CREATE OR REPLACE PACKAGE CUX_MSC_SUBSTITUTE_RECALS_EY IS
  GV_ERROR_COCE        VARCHAR2(20);
  GV_ERROR_MESSAGE     VARCHAR2(20000);
  GN_ERROR_COUNT       NUMBER := 0;
  GV_LOG_FLAG          VARCHAR2(1) := 'Y';
  GV_BUY_LOG_FLAG      VARCHAR2(1) := 'Y';
  GV_ASSIGNMENT_SET_ID NUMBER;

  TYPE GT_CUX_MSC_DEMANDS_PLAN IS TABLE OF CUX.CUX_MSC_DEMANDS_PLAN_T%rowtype;
  TYPE GT_CUX_MSC_SUPPLIES_PLAN IS TABLE OF CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  TYPE GT_CUX_MSC_FULL_PEGGING_PLAN IS TABLE OF CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
  TYPE GT_CUX_MSC_UPDATE_QTY IS TABLE OF CUX.CUX_MSC_UPDATE_QTY_T%ROWTYPE;
  TYPE GT_CUX_MSC_SUPPLIES_SJ IS TABLE OF CUX.CUX_MSC_SUPPLIES_SJ_T%ROWTYPE;
  TYPE GT_PROCESS_SUPPLIES_H IS TABLE OF CUX.CUX_MSC_PROCESS_SUPPLIES_H%ROWTYPE;
  TYPE GT_PROCESS_SUPPLIES_L IS TABLE OF CUX.CUX_MSC_PROCESS_SUPPLIES_L%ROWTYPE;

  LT_CUX_MSC_DEMANDS_PLAN_NEW  GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
  LT_CUX_MSC_SUPPLIES_PLAN     GT_CUX_MSC_SUPPLIES_PLAN := GT_CUX_MSC_SUPPLIES_PLAN();
  LT_CUX_MSC_FULL_PEGGING_PLAN GT_CUX_MSC_FULL_PEGGING_PLAN := GT_CUX_MSC_FULL_PEGGING_PLAN();
  LT_PROCESS_SUPPLIES_H        GT_PROCESS_SUPPLIES_H := GT_PROCESS_SUPPLIES_H();
  LT_PROCESS_SUPPLIES_L        GT_PROCESS_SUPPLIES_L := GT_PROCESS_SUPPLIES_L();

  --冲减现有量
  CURSOR GC_SUPPLY_OH(P_SR_INSTANCE_ID    NUMBER,
                      P_ORGANIZATION_ID   NUMBER,
                      P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, MSC_SUB_INVENTORIES_V M1
     WHERE CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type = 18 --现有量
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND CMS.ORGANIZATION_ID = M1.organization_id
       AND CMS.SUBINVENTORY_CODE = M1.sub_inventory_code
       AND SIGN(CMS.REMAIN_QTY) = 1
       and M1.PLAN_ID = -1
       AND M1.NETTING_TYPE = 1
     ORDER BY CMS.NEW_ORDER_QUANTITY, CMS.SUBINVENTORY_CODE;

  --冲减工作单
  CURSOR GC_SUPPLY_DJ(P_SR_INSTANCE_ID    NUMBER,
                      P_ORGANIZATION_ID   NUMBER,
                      P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
     where CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type IN (3, 7) --3 工作单 7 非标准任务
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND SIGN(CMS.REMAIN_QTY) = 1
     ORDER BY CMS.NEW_WIP_START_DATE, CMS.DISPOSITION_ID;

  --冲减工作单副需求
  CURSOR GC_SUPPLY_RDJ(P_SR_INSTANCE_ID    NUMBER,
                       P_ORGANIZATION_ID   NUMBER,
                       P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
     where CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type IN (14, 15) --14 工作单联产品/副产品 15 非标准任务副产品
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND SIGN(CMS.REMAIN_QTY) = 1
     ORDER BY CMS.NEW_WIP_START_DATE, CMS.DISPOSITION_ID;

  --冲减在途部分
  CURSOR GC_SUPPLY_RCV(P_SR_INSTANCE_ID    NUMBER,
                       P_ORGANIZATION_ID   NUMBER,
                       P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
     where CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type IN (8, 12, 11) --8 正在接收 PO 12 在途接收
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND SIGN(CMS.REMAIN_QTY) = 1
     ORDER BY CMS.New_Dock_Date;

  --冲减PO订单部分
  CURSOR GC_SUPPLY_PO(P_SR_INSTANCE_ID    NUMBER,
                      P_ORGANIZATION_ID   NUMBER,
                      P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
     where CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type IN (1) --1 采购订单
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND SIGN(CMS.REMAIN_QTY) = 1
     ORDER BY CMS.NEW_ORDER_PLACEMENT_DATE, CMS.Disposition_Id;

  CURSOR GC_SUPPLY_PR(P_SR_INSTANCE_ID    NUMBER,
                      P_ORGANIZATION_ID   NUMBER,
                      P_INVENTORY_ITEM_ID NUMBER) IS
    select CMS.*
      from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
     where CMS.plan_id = -1
       and CMS.sr_instance_id = p_SR_INSTANCE_ID
       and CMS.order_type IN (2) --2 采购申请
       and CMS.organization_id = P_ORGANIZATION_ID
       and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
       AND SIGN(CMS.REMAIN_QTY) = 1
     ORDER BY CMS.NEW_ORDER_PLACEMENT_DATE, CMS.ORDER_NUMBER;

  PROCEDURE TRUNC_TEMP_TABLE(P_TABLE_NAME VARCHAR2);

  PROCEDURE LOG(P_REQUEST_ID NUMBER, P_UNIT VARCHAR2, P_MESSAGE VARCHAR2);

  PROCEDURE LOG_PROCESS(P_REQUEST_ID NUMBER,
                        P_UNIT       VARCHAR2,
                        P_MESSAGE    VARCHAR2);

  FUNCTION GET_HEADER_ID(P_ASSY_ITEM_ID NUMBER) RETURN NUMBER;

  FUNCTION GET_BILL_ID(P_PLAN_ID        NUMBER,
                       p_SR_INSTANCE_ID NUMBER,
                       P_COMP_SEQ_ID    NUMBER) RETURN NUMBER;

  PROCEDURE CALCULATE_LINE_QTY(P_HEADER_ID NUMBER, P_PLAN_QTY NUMBER);

  FUNCTION GET_ACTUAL_DATE(P_DATE DATE) RETURN DATE;

  FUNCTION GET_RDJ_FLAG(P_PLAN_ID        NUMBER,
                        p_SR_INSTANCE_ID NUMBER,
                        P_PEGGING_ID     NUMBER) RETURN VARCHAR2;

  PROCEDURE INSERT_BOM_EXPLOSION(P_SR_INSTANCE_ID        NUMBER,
                                 P_PLAN_ID               NUMBER,
                                 P_ORGANIZATION_ID       NUMBER,
                                 P_ASSY_ITEM_ID          NUMBER,
                                 P_ASSY_ITEM_QTY         NUMBER,
                                 P_BOM_VER_DATE          DATE,
                                 P_PRV_PEGGING_ID        NUMBER,
                                 P_END_PEGGING_ID        NUMBER,
                                 P_ASSY_DEMAND_COMP_DATE DATE,
                                 P_ASSY_DEMAND_DATE      DATE,
                                 P_END_ORIGINATION_TYPE  NUMBER,
                                 P_ORGI_USAGE            NUMBER DEFAULT 1,--Added by V1.027
                                 P_D_COUNT               IN OUT NUMBER,
                                 P_S_COUNT               IN OUT NUMBER,
                                 P_P_COUNT               IN OUT NUMBER);

  FUNCTION GET_PROCESS_FLAG(P_INVENTORY_ITEM_ID IN NUMBER,
                            P_PCBA_FLAG         IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                            ) RETURN VARCHAR2;

  PROCEDURE CALCULATE_GROUP_QTY(p_SR_INSTANCE_ID   NUMBER,
                                P_NO_PCBA_SUB_FLAG VARCHAR2 DEFAULT 'N' --Added by V1.022
                                );

  PROCEDURE CALCULATE_GROUP_QTY_PH(p_SR_INSTANCE_ID NUMBER,
                                   PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE get_change_detail(p_plan_id         IN NUMBER,
                              p_sr_instance_id  IN NUMBER DEFAULT 1,
                              p_pegging_id      IN NUMBER,
                              p_prev_pegging_id IN NUMBER,
                              p_chang_qty       IN NUMBER,
                              P_ORGI_USAGE      IN NUMBER DEFAULT 1,--Added by V1.027
                              P_SEQUENCE_ID     IN NUMBER,
                              P_PCBA_FLAG       IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                              );

  PROCEDURE p_change_pegging(p_plan_id        IN NUMBER,
                             p_sr_instance_id IN NUMBER DEFAULT 1,
                             p_pegging_id     IN NUMBER,
                             p_chang_qty      IN NUMBER,
                             p_flag           IN VARCHAR2, ------是否删除原始需求数
                             P_ORGI_USAGE     IN NUMBER DEFAULT 1,--Added by V1.027
                             P_PCBA_FLAG      IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                             );
  PROCEDURE CALCULATE_LEVEL3_QTY(P_PLAN_ID        NUMBER,
                                 p_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_QTY       NUMBER,
                                 P_CALCUT_COUNT   NUMBER);

  PROCEDURE CALCULATE_GROUP_USED_QTY_PH(P_PLAN_ID         NUMBER,
                                        p_SR_INSTANCE_ID  NUMBER,
                                        P_ORGANIZATION_ID NUMBER,
                                        P_PLAN_QTY        NUMBER,
                                        P_ALLOT_FLAG      VARCHAR2,
                                        PO_ERROR_CODE     OUT VARCHAR2);

  PROCEDURE CALCULATE_GROUP_USED_QTY(P_PLAN_ID         NUMBER,
                                     p_SR_INSTANCE_ID  NUMBER,
                                     P_ORGANIZATION_ID NUMBER,
                                     P_PLAN_QTY        NUMBER,
                                     P_ALLOT_FLAG      VARCHAR2,
                                     PO_ERROR_CODE     OUT VARCHAR2);

  FUNCTION GET_ITEM_NAME(P_PLAN_ID           NUMBER,
                         p_SR_INSTANCE_ID    NUMBER,
                         P_ORGANIZATION_ID   NUMBER,
                         P_INVENTORY_ITEM_ID NUMBER) RETURN VARCHAR2;

  PROCEDURE ALLOCATION_QTY(P_PLAN_ID           NUMBER,
                           p_SR_INSTANCE_ID    NUMBER,
                           P_ORGANIZATION_ID   NUMBER,
                           P_INVENTORY_ITEM_ID NUMBER,
                           P_COMPONENT_SEQ_ID  NUMBER,
                           P_ALLOCATION_QTY    NUMBER);

  PROCEDURE PROCESS_ALLOCATION_QTY(P_OU_ID NUMBER, P_ALLOCATION_QTY NUMBER);

  PROCEDURE INSERT_WIP_MPS_DEMAND(P_SR_INSTANCE_ID NUMBER,
                                  P_PLAN_ID        NUMBER);

  PROCEDURE INSERT_WIP_DEMAND(P_SR_INSTANCE_ID        NUMBER,
                              P_PLAN_ID               NUMBER,
                              P_ORGANIZATION_ID       NUMBER,
                              P_WIP_ENTITY_ID         NUMBER,
                              P_ASSY_ITEM_ID          NUMBER,
                              P_PRV_PEGGING_ID        NUMBER,
                              P_END_PEGGING_ID        NUMBER,
                              P_ASSY_DEMAND_COMP_DATE DATE,
                              P_ASSY_DEMAND_DATE      DATE,
                              P_END_ORIGINATION_TYPE  NUMBER,
                              P_LEVEL_FLAG            NUMBER,
                              P_BOM_FLAG              VARCHAR2 DEFAULT 'Y',
                              P_D_COUNT               IN OUT NUMBER,
                              P_S_COUNT               IN OUT NUMBER,
                              P_P_COUNT               IN OUT NUMBER);

  PROCEDURE INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        NUMBER,
                               P_PLAN_ID               NUMBER,
                               P_ORGANIZATION_ID       NUMBER,
                               P_WIP_ENTITY_ID         NUMBER,
                               P_ASSY_ITEM_ID          NUMBER,
                               P_PRV_PEGGING_ID        NUMBER,
                               P_END_PEGGING_ID        NUMBER,
                               P_ASSY_DEMAND_COMP_DATE DATE,
                               P_ASSY_DEMAND_DATE      DATE,
                               P_END_ORIGINATION_TYPE  NUMBER,
                               P_LEVEL_FLAG            NUMBER,
                               P_PLAN_QTY              NUMBER,
                               P_ACCESS_FLAG           VARCHAR DEFAULT 'N',
                               P_BOM_FLAG              VARCHAR2 DEFAULT 'Y',
                               P_ONLY_PEGGING_FLAG     VARCHAR2 DEFAULT 'N',
                               P_PRIOR_FLAG            VARCHAR2 DEFAULT 'N',
                               P_ORGI_USAGE            IN NUMBER DEFAULT 1,--Added by V1.027
                               P_D_COUNT               IN OUT NUMBER,
                               P_S_COUNT               IN OUT NUMBER,
                               P_P_COUNT               IN OUT NUMBER);

  PROCEDURE INSERT_BOM_DEMAND(P_SR_INSTANCE_ID        NUMBER,
                              P_PLAN_ID               NUMBER,
                              P_ORGANIZATION_ID       NUMBER,
                              P_ASSY_ITEM_ID          NUMBER,
                              P_ASSY_ITEM_QTY         NUMBER,
                              P_BOM_VER_DATE          DATE,
                              P_PRV_PEGGING_ID        NUMBER,
                              P_END_PEGGING_ID        NUMBER,
                              P_ASSY_DEMAND_COMP_DATE DATE,
                              P_ASSY_DEMAND_DATE      DATE,
                              P_END_ORIGINATION_TYPE  NUMBER,
                              P_LEVEL_FLAG            NUMBER,
                              P_ASSY_USED_QTY         OUT NUMBER,
                              P_PCBA_FLAG             IN VARCHAR2 DEFAULT 'N', --Added by V1.008 as calculate sub PCB item qty
                              P_ORGI_USAGE            IN NUMBER DEFAULT 1,--Added by V1.027
                              P_D_COUNT               IN OUT NUMBER,
                              P_S_COUNT               IN OUT NUMBER,
                              P_P_COUNT               IN OUT NUMBER);

  FUNCTION GET_MPS_FLAG(P_ORGANIZATION_ID   NUMBER,
                        P_INVENTORY_ITEM_ID NUMBER) RETURN VARCHAR2;

  FUNCTION GET_SOURCE_ORG(P_PLAN_ID           NUMBER,
                          P_SR_INSTANCE_ID    NUMBER,
                          P_ORGANIZATION_ID   NUMBER,
                          P_INVENTORY_ITEM_ID NUMBER) RETURN NUMBER;

  PROCEDURE UPDATE_SUB_RATE(errbuf                OUT VARCHAR2,
                            retcode               OUT VARCHAR2,
                            p_SR_INSTANCE_ID      NUMBER,
                            P_ORG_GOUP            VARCHAR2,
                            P_SOURCE_ASSGN_SET_ID NUMBER,
                            P_ASSGN_SET_ID        NUMBER);

  PROCEDURE UPDATE_PLAN_SUB_RATE(retcode          OUT VARCHAR2,
                                 P_REQUEST_ID     NUMBER,
                                 p_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_ID        NUMBER);

  PROCEDURE CALCULATE_PCBA_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                   P_PLAN_ID        NUMBER,
                                   P_LEVEL_CODE     NUMBER,
                                   PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE CALCULATE_SA_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_ID        NUMBER,
                                 P_LEVEL_CODE     NUMBER,
                                 PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE CALCULATE_CROSS_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                    P_PLAN_ID        NUMBER,
                                    P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                    P_D_COUNT        IN OUT NUMBER,
                                    P_S_COUNT        IN OUT NUMBER,
                                    P_P_COUNT        IN OUT NUMBER,
                                    PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE CALCULATE_PH_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_ID        NUMBER,
                                 P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                 P_D_COUNT        IN OUT NUMBER,
                                 P_S_COUNT        IN OUT NUMBER,
                                 P_P_COUNT        IN OUT NUMBER,
                                 PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE CALCULATE_BUY_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                  P_PLAN_ID        NUMBER,
                                  P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                  P_D_COUNT        IN OUT NUMBER,
                                  P_S_COUNT        IN OUT NUMBER,
                                  P_P_COUNT        IN OUT NUMBER,
                                  PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE CALCULATE_CROSS_SA_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                       P_PLAN_ID        NUMBER,
                                       P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                       P_D_COUNT        IN OUT NUMBER,
                                       P_S_COUNT        IN OUT NUMBER,
                                       P_P_COUNT        IN OUT NUMBER,
                                       PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE PROCESS_NO_SA_PCBA(P_SR_INSTANCE_ID NUMBER,
                               P_PLAN_ID        NUMBER,
                               PO_ERROR_CODE    OUT VARCHAR2);

  PROCEDURE UPDATE_ITEM_ATTRIBUTES(errbuf           OUT VARCHAR2,
                                   retcode          OUT VARCHAR2,
                                   P_SR_INSTANCE_ID NUMBER);

  PROCEDURE PROCESS_PLAN_ORDER_SUPPLIY(PO_ERROR_CODE    OUT VARCHAR2,
                                       P_PLAN_ID        NUMBER,
                                       P_SR_INSTANCE_ID NUMBER);

  PROCEDURE PROCESS_SUPPLIY_ACCESS(PO_ERROR_CODE    OUT VARCHAR2,
                                   P_PLAN_ID        NUMBER,
                                   P_SR_INSTANCE_ID NUMBER);

  PROCEDURE MAIN(errbuf           OUT VARCHAR2,
                 retcode          OUT VARCHAR2,
                 p_SR_INSTANCE_ID NUMBER,
                 P_PLAN_ID        NUMBER,
                 P_LOG_FLAG       VARCHAR2);

END CUX_MSC_SUBSTITUTE_RECALS_EY;
/
CREATE OR REPLACE PACKAGE BODY CUX_MSC_SUBSTITUTE_RECALS_EY IS
  /**************************************************************************************************************
  * $Header: CUX_MSC_SUBSTITUTE_RECALS_EY.pks V1.029 2017/02/18 ShanLi Wang$
  ***************************************************************************************************************/
  /*************************************************************************************************/
  /* NAME: CUX_MSC_SUBSTITUTE_RECALS_EY                                                               */
  /* PURPOSE:  替代选用加强程序主PKG                                                               */
  /*                                                                                               */
  /* REVISIONS                                                                                     */
  /* Ver   Date        Author             Description                                              */
  /*------ ----------- ------------------ ---------------------------------------------------------*/
  /* 1.0   2016/10/10  ShanLi Wang        It's an initial version                                  */
  /* 1.001 2016/12/09  ShanLi Wang        修改计划单分配招标比例BUG                                */
  /* 1.002 2016/12/12  ShanLi Wang        修改p_change_pegging首层冲减BUG                          */
  /* 1.003 2016/12/13  ShanLi Wang        修改订单修正因子固定天数NULL处理BUG                      */
  /* 1.004 2016/12/13  ShanLi Wang        修改错阶跟组合替代判断逻辑，从替代组合表判断             */
  /* 1.005 2016/12/15  ShanLi Wang        修改招标比例每次都取ERP端同步期初数据开始计算            */
  /* 1.006 2016/12/16  ShanLi Wang        修改PCBA追溯异常问题                                     */
  /* 1.007 2016/12/17  ShanLi Wang        修改追溯日期逻辑                                         */
  /* 1.008 2016/12/18  ShanLi Wang        PCB替代增加                                              */
  /* 1.009 2016/12/19  ShanLi Wang        修改展BOM的日期取值范围                                  */
  /* 1.010 2016/12/20  ShanLi Wang        修改工做单需求的日期取值逻辑                             */
  /* 1.011 2016/12/21  RAY                修改SA阶段加入父阶错阶判断                               */
  /* 1.012 2016/12/23  ShanLi Wang        修改错阶 组合替代齐套分配逻辑                            */
  /* 1.013 2016/12/26  ShanLi Wang        修改错阶下面采购件重复库存供应                           */
  /* 1.014 2016/12/27  ShanLi Wang        修改错阶齐套数量计算BUG                                  */
  /* 1.015 2016/12/27  ShanLi Wang        修改供需不平衡BUG修正                                    */
  /* 1.016 2016/12/30  ShanLi Wang        修改普通制造件替代料全部按照自然替代计算                 */
  /* 1.017 2017/01/03  ShanLi Wang        修改PCBA下面没有PCB出现空计划单问题                      */
  /* 1.018 2017/01/09  ShanLi Wang        1. 非标工单下面的SA不展开需求                            */
  /*                                      2. 错阶定义里面的SA放到最后处理                          */
  /*                                      3. 错阶 组合 错阶中的SA 采购件按照时间顺序处理           */
  /* 1.019 2017/01/19  ShanLi Wang        订单因子修正中“固定供应天数”设置为0BUG修正               */
  /* 1.020 2017/01/21  ShanLi Wang        同步程序增加DB_LINK                                      */
  /* 1.021 2017/02/06  Ray               无法将 NULL 插入 CUX_MSC_SUPPLIES_PLAN_TPLAN_ID异常处理   */
  /* 1.022 2017/02/09  ShanLi Wang        PCBA无自然替代时仅仅计算PCBA自身供应，PCB留待采购件时计算*/
  /* 1.023 2017/02/09  ShanLi Wang        PCBA下面还挂有PCBA的处理                                 */
  /* 1.024 2017/02/13  ShanLi Wang        若空计划则报错                                           */
  /* 1.025 2017/02/15  ShanLi Wang        处理最后INSERT MSC_DEMANDS是违反唯一索引问题             */
  /* 1.026 2017/02/15  ShanLi Wang        性能优化                                                 */
  /* 1.027 2017/02/17  ShanLi Wang        PEGGIGN表单位用量修改                                    */  
  /* 1.028 2017/02/18  ShanLi Wang        工单过剩重复显示修正                                     */    
  /* 1.029 2017/02/19  ShanLi Wang        采购件有替代没有维护替代组修正                           */    
  /*************************************************************************************************/

  PROCEDURE TRUNC_TEMP_TABLE(P_TABLE_NAME VARCHAR2) IS
    LV_SQL VARCHAR2(200);
  BEGIN
    LV_SQL := 'TRUNCATE TABLE ' || P_TABLE_NAME;
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(-1,
            'TRUNC_TABLE',
            '***ERROR*** TABLE ' || P_TABLE_NAME || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
    END;
  END;

  PROCEDURE LOG(P_REQUEST_ID NUMBER, P_UNIT VARCHAR2, P_MESSAGE VARCHAR2) IS
    /* PRAGMA AUTONOMOUS_TRANSACTION;*/
  begin
  
    FND_FILE.PUT_LINE(FND_FILE.LOG, P_MESSAGE);
  
    /*insert into CUX.CUX_ASCP_RECAL_LOGS
      (SEQUNECE_ID, REQUEST_ID, LOG_DATE, UNIT_NAME, LOG_MESSAGE)
    values
      (cux.CUX_ASCP_RECAL_LOGS_S.nextval, P_REQUEST_ID, sysdate, P_UNIT, P_MESSAGE);
    commit;*/
  end log;

  PROCEDURE LOG_PROCESS(P_REQUEST_ID NUMBER, P_UNIT VARCHAR2, P_MESSAGE VARCHAR2) IS
    PRAGMA AUTONOMOUS_TRANSACTION;
  begin
    insert into CUX.CUX_ASCP_RECAL_LOGS
      (SEQUNECE_ID, REQUEST_ID, LOG_DATE, UNIT_NAME, LOG_MESSAGE)
    values
      (cux.CUX_ASCP_RECAL_LOGS_S.nextval, P_REQUEST_ID, sysdate, P_UNIT, P_MESSAGE);
    commit;
  end LOG_PROCESS;

  --Added below by V1.008 as calculate sub PCB item qty
  FUNCTION GET_HEADER_ID(P_ASSY_ITEM_ID NUMBER) RETURN NUMBER IS
    LN_HEADER_ID NUMBER;
  BEGIN
    BEGIN
      SELECT HEADER_ID
        INTO LN_HEADER_ID
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
       WHERE CMGH.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LN_HEADER_ID := NULL;
    END;
    RETURN LN_HEADER_ID;
  END;

  FUNCTION GET_BILL_ID(P_PLAN_ID NUMBER, p_SR_INSTANCE_ID NUMBER, P_COMP_SEQ_ID NUMBER) RETURN NUMBER IS
    LN_BILL_ID NUMBER;
  BEGIN
  
    begin
      select c.bill_sequence_id
        into LN_BILL_ID
        from msc_bom_components c
       where c.component_sequence_id = P_COMP_SEQ_ID
         and c.sr_instance_id = p_SR_INSTANCE_ID
         and c.plan_id = P_PLAN_ID;
    exception
      when no_data_found then
        LN_BILL_ID := null;
      when others then
        LN_BILL_ID := null;
    end;
  
    RETURN LN_BILL_ID;
  END;

  PROCEDURE CALCULATE_LINE_QTY(P_HEADER_ID NUMBER, P_PLAN_QTY NUMBER) IS
    CURSOR LC_ALLOT_QTY(P_HEADER_ID NUMBER) IS
      SELECT LINE_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 0 SORT_ORDER
        FROM CUX.CUX_MSC_GROUP_QTY_LINE
       WHERE HEADER_ZIRAN_FLAG = 'Y'
         AND NVL(LEVEL1_QTY, 0) > 0
         AND HEADER_ID = P_HEADER_ID
      UNION ALL
      SELECT LINE_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 1 SORT_ORDER
        FROM CUX.CUX_MSC_GROUP_QTY_LINE
       WHERE HEADER_ZIRAN_FLAG = 'Y'
         AND NVL(LEVEL2_QTY, 0) > 0
         AND HEADER_ID = P_HEADER_ID
      UNION ALL
      SELECT LINE_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 2
        FROM CUX.CUX_MSC_GROUP_QTY_LINE
       WHERE DECODE(NVL(HEADER_ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND NVL(LEVEL1_QTY, 0) > 0
         AND HEADER_ID = P_HEADER_ID
      UNION ALL
      SELECT LINE_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 3
        FROM CUX.CUX_MSC_GROUP_QTY_LINE
       WHERE DECODE(NVL(HEADER_ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND NVL(LEVEL2_QTY, 0) > 0
         AND HEADER_ID = P_HEADER_ID
       ORDER BY 3, 2;
    LN_PLAN_QTY NUMBER;
  BEGIN
    UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
       SET CMGL.LEVEL1_QTY = DECODE(SIGN(NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                    1,
                                    NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0),
                                    0),
           CMGL.LEVEL2_QTY = DECODE(SIGN(NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                    1,
                                    NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0),
                                    0)
     WHERE HEADER_ID = P_HEADER_ID;
  
    UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
       SET CMGL.LEVEL2_QTY = NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.LEVEL1_QTY, 0)
     WHERE HEADER_ID = P_HEADER_ID;
  
    LN_PLAN_QTY := P_PLAN_QTY;
  
    FOR LR_ALLOT_QTY IN LC_ALLOT_QTY(P_HEADER_ID) LOOP
      IF LN_PLAN_QTY <= LR_ALLOT_QTY.TOTAL_QTY THEN
        UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGQ
           SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
         WHERE CMGQ.LINE_ID = LR_ALLOT_QTY.LINE_ID;
        LN_PLAN_QTY := 0;
      ELSE
        UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGQ
           SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LR_ALLOT_QTY.TOTAL_QTY
         WHERE CMGQ.LINE_ID = LR_ALLOT_QTY.LINE_ID;
        LN_PLAN_QTY := LN_PLAN_QTY - LR_ALLOT_QTY.TOTAL_QTY;
      END IF;
      IF LN_PLAN_QTY <= 0 THEN
        EXIT;
      END IF;
    END LOOP;
  END;

  --Added above by V1.008 as calculate sub PCB item qty

  FUNCTION GET_ACTUAL_DATE(P_DATE DATE) RETURN DATE IS
    LV_DATE DATE;
  BEGIN
    IF NVL(P_DATE, SYSDATE) > SYSDATE THEN
      LV_DATE := P_DATE;
    ELSE
      LV_DATE := SYSDATE;
    END IF;
    RETURN LV_DATE;
  END;

  FUNCTION GET_RDJ_FLAG(P_PLAN_ID NUMBER, p_SR_INSTANCE_ID NUMBER, P_PEGGING_ID NUMBER) RETURN VARCHAR2 IS
    LV_RDJ_FLAG   VARCHAR2(1);
    LN_ORDER_TYPE NUMBER;
  
  BEGIN
    BEGIN
      SELECT CMF.SUPPLY_TYPE
        INTO LN_ORDER_TYPE
        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
       WHERE CMF.PEGGING_ID = P_PEGGING_ID
         AND CMF.PLAN_ID = P_PLAN_ID
         AND CMF.SR_INSTANCE_ID = p_SR_INSTANCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_ORDER_TYPE := 0;
      WHEN OTHERS THEN 
        LN_ORDER_TYPE := 0;
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_RDJ_FLAG',
                '***ERROR*** GET RDJ FLAG 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM); 
    END;
    IF LN_ORDER_TYPE = 7 THEN
      LV_RDJ_FLAG := 'Y';
    ELSE
      LV_RDJ_FLAG := 'N';
    END IF;
    RETURN LV_RDJ_FLAG;
  END;

  PROCEDURE INSERT_BOM_EXPLOSION(P_SR_INSTANCE_ID        NUMBER,
                                 P_PLAN_ID               NUMBER,
                                 P_ORGANIZATION_ID       NUMBER,
                                 P_ASSY_ITEM_ID          NUMBER,
                                 P_ASSY_ITEM_QTY         NUMBER,
                                 P_BOM_VER_DATE          DATE,
                                 P_PRV_PEGGING_ID        NUMBER,
                                 P_END_PEGGING_ID        NUMBER,
                                 P_ASSY_DEMAND_COMP_DATE DATE,
                                 P_ASSY_DEMAND_DATE      DATE,
                                 P_END_ORIGINATION_TYPE  NUMBER,
                                 P_ORGI_USAGE            NUMBER DEFAULT 1,
                                 P_D_COUNT               IN OUT NUMBER,
                                 P_S_COUNT               IN OUT NUMBER,
                                 P_P_COUNT               IN OUT NUMBER) IS
  
    CURSOR LC_BOM(P_ORGANIZATION_ID NUMBER) IS
      select MBC.INVENTORY_ITEM_ID,
             MBC.USAGE_QUANTITY,
             MBC.COMPONENT_SEQUENCE_ID,
             MBC.OPERATION_SEQ_NUM,
             MBC.ORGANIZATION_ID
        from msc_bom_components mbc, msc_boms mb
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and nvl(GET_PROCESS_FLAG(MBC.INVENTORY_ITEM_ID), 'N') = 'N'
         and mb.plan_id = P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1);
  
    ln_source_org_id          NUMBER;
    ln_sub_preproce_lead_time NUMBER;
    ln_sub_post_lead_time     NUMBER;
    ln_sub_full_lead_time     NUMBER;
    ln_sub_fixed_lead_time    NUMBER;
    ln_sub_varia_lead_time    NUMBER;
    ln_make_buy_code          NUMBER;
    lv_item_type              VARCHAR2(200);
    lv_item_name              VARCHAR2(200);
    ln_low_level_code         NUMBER;
    ln_transaction_id         number;
    ln_demand_id              number;
    ln_pre_pegging_id         NUMBER;
    ln_pegging_id             NUMBER;
    LN_P_COUNT                NUMBER;
    LN_D_COUNT                NUMBER;
    LN_S_COUNT                NUMBER;
    ln_org_id                 NUMBER;
    LT_PEGGING_TEMP           CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP            CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP          CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
  
    LN_D_COUNT        := P_D_COUNT;
    LN_S_COUNT        := P_S_COUNT;
    LN_P_COUNT        := P_P_COUNT;
    ln_source_org_id  := get_source_org(p_plan_id, p_sr_instance_id, p_organization_id, P_ASSY_ITEM_ID);
    ln_pre_pegging_id := NULL;
    IF ln_source_org_id > 0 THEN
    
      BEGIN
        SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
               MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
               MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
               MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
               MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
               MSI.PLANNING_MAKE_BUY_CODE,
               MSI.ATTRIBUTE1,
               MSI.ITEM_NAME,
               MSI.LOW_LEVEL_CODE
          INTO LN_SUB_PREPROCE_LEAD_TIME,
               LN_SUB_POST_LEAD_TIME,
               LN_SUB_FULL_LEAD_TIME,
               LN_SUB_FIXED_LEAD_TIME,
               LN_SUB_VARIA_LEAD_TIME,
               LN_MAKE_BUY_CODE,
               LV_ITEM_TYPE,
               LV_ITEM_NAME,
               LN_LOW_LEVEL_CODE
          FROM MSC_SYSTEM_ITEMS MSI
         WHERE MSI.plan_id = P_PLAN_ID
           AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND MSI.ORGANIZATION_ID = ln_source_org_id
           AND MSI.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_SUB_PREPROCE_LEAD_TIME := 0;
          LN_SUB_POST_LEAD_TIME     := 0;
          LN_SUB_FULL_LEAD_TIME     := 0;
          LN_SUB_FIXED_LEAD_TIME    := 0;
          LN_SUB_VARIA_LEAD_TIME    := 0;
      END;
    
      LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
      LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
      --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
      LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
      LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
      LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
    
      ln_transaction_id := msc_supplies_s.nextval;
      ln_demand_id      := msc_demands_s.nextval;
      ln_pegging_id     := msc_full_pegging_s.nextval;
      ln_pre_pegging_id := ln_pegging_id;
      /*      ln_disposition_id  := ln_transaction_id;
      ln_supply_quantity := P_ASSY_ITEM_QTY;
      ln_demand_quantity := P_ASSY_ITEM_QTY;*/
    
      --先写入一笔计划单需求
      BEGIN
        LT_DEMAND_TEMP                                := NULL;
        LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
        LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := P_ASSY_ITEM_QTY;
        LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
        LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
        LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
        LT_DEMAND_TEMP.DISPOSITION_ID                 := NULL;
        LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_ASSY_ITEM_ID;
        LT_DEMAND_TEMP.PLAN_ID                        := P_PLAN_ID;
        LT_DEMAND_TEMP.ORGANIZATION_ID                := ln_source_org_id;
        LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := P_ASSY_ITEM_ID; --替代料ID
        LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_SR_INSTANCE_ID;
        LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := 0;
        LT_DEMAND_TEMP.PROMISE_DATE                   := NULL;
        LT_DEMAND_TEMP.SELLING_PRICE                  := 0;
        LT_DEMAND_TEMP.DMD_LATENESS_COST              := 0;
        LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := NULL;
        LT_DEMAND_TEMP.OP_SEQ_NUM                     := NULL;
        LT_DEMAND_TEMP.UPDATED                        := 2;
        LT_DEMAND_TEMP.STATUS                         := 0;
        LT_DEMAND_TEMP.APPLIED                        := NULL;
        LT_DEMAND_TEMP.DEMAND_CLASS                   := NULL;
        LT_DEMAND_TEMP.FIRM_QUANTITY                  := NULL;
        LT_DEMAND_TEMP.FIRM_DATE                      := NULL;
        LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := NULL;
        LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_ASSY_DEMAND_DATE;
        LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_ORGANIZATION_ID;
        LT_DEMAND_TEMP.RESERVATION_ID                 := NULL;
        LT_DEMAND_TEMP.PARENT_ID                      := NULL;
        LT_DEMAND_TEMP.LENDING_PROJECT_ID             := NULL;
        LT_DEMAND_TEMP.LENDING_TASK_ID                := NULL;
        LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --1 替代料 2 主料
        LT_DEMAND_TEMP.ORDER_NUMBER                   := NULL;
        LT_DEMAND_TEMP.RESERVED_QUANTITY              := 0;
        LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
        LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
        LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
        LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
        LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
        LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
        LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
        LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
        LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := NULL;
        LT_DEMAND_TEMP.ATTRIBUTE1                     := NULL;
        LT_DEMAND_TEMP.WIP_ENTITY_ID                  := NULL;
        LT_DEMAND_TEMP.ISSUED_QUANTITY                := NULL;
        LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := NULL;
        LT_DEMAND_TEMP.REFRESH_NUMBER                 := NULL;
        LT_DEMAND_TEMP.REQUEST_DATE                   := NULL;
        LT_DEMAND_TEMP.WIP_STATUS_CODE                := NULL;
        LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := 1;
        LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := 1;
        LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := NULL;
        LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := NULL;
        LT_DEMAND_TEMP.BUCKET_TYPE                    := 1;
        LT_DEMAND_TEMP.BILL_ID                        := NULL;
        LT_DEMAND_TEMP.PROBABILITY                    := NULL;
        LT_DEMAND_TEMP.FORECAST_SET_ID                := NULL;
        LT_DEMAND_TEMP.GROUP_ID                       := NULL;
        LT_DEMAND_TEMP.SERVICE_LEVEL                  := NULL;
        LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := NULL;
        LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := NULL;
        LT_DEMAND_TEMP.SCENARIO_SET                   := NULL;
        LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := NULL;
        LT_DEMAND_TEMP.SUPPLY_ID                      := NULL;
        LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := NULL;
        LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := NULL;
        LT_DEMAND_TEMP.STOLEN_FLAG                    := NULL;
        LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := NULL;
        LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := NULL;
        LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := NULL;
        LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := NULL;
        LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := NULL;
        LT_DEMAND_TEMP.UNMET_QUANTITY                 := NULL;
        LT_DEMAND_TEMP.RECORD_SOURCE                  := NULL;
        LT_DEMAND_TEMP.LINK_TO_LINE_ID                := NULL;
        LT_DEMAND_TEMP.ERROR_TYPE                     := NULL;
        LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := NULL;
        LT_DEMAND_TEMP.COMP_SEQ_ID                    := NULL;
        LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := NULL;
        LT_DEMAND_TEMP.RELEASE_STATUS                 := NULL;
        LT_DEMAND_TEMP.RESCHEDULE_FLAG                := NULL;
        LT_DEMAND_TEMP.LOAD_TYPE                      := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_DATE                 := NULL;
        LT_DEMAND_TEMP.RELEASE_ERRORS                 := NULL;
        LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := NULL;
        LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := NULL;
        LT_DEMAND_TEMP.ORIGINAL_INST_ID               := NULL;
        LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := 0;
        LT_DEMAND_TEMP.SHIP_SET_ID                    := 0;
        LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := NULL;
        LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := NULL;
        LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := NULL;
        LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := NULL;
        LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := NULL;
        LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := NULL;
        LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := NULL;
        LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := NULL;
        LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := NULL;
        LT_DEMAND_TEMP.ZONE_ID                        := NULL;
        LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := NULL;
        LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := 0;
        LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := NULL;
        LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := NULL;
        LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := NULL; --需要更新？
        LT_DEMAND_TEMP.ATO_LINE_ID                    := NULL;
        LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := NULL;
        LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := NULL;
        LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := NULL;
        LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := NULL;
        LT_DEMAND_TEMP.SHIP_METHOD                    := NULL;
        LT_DEMAND_TEMP.SHIP_CALENDAR                  := NULL;
        LT_DEMAND_TEMP.RECEIVING_CALENDAR             := NULL;
        LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := NULL;
        LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := NULL;
        LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := NULL;
        LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := NULL;
        LT_DEMAND_TEMP.FINAL_USE_DATE                 := NULL;
        LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := NULL;
        LT_DEMAND_TEMP.SHIP_SET_NAME                  := NULL;
        LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := NULL;
        LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := NULL; --需要更新？
        LT_DEMAND_TEMP.ATP_SESSION_ID                 := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := NULL;
        LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_ASSY_DEMAND_DATE;
        LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := 1;
      
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MD',
              '***ERROR*** INSERT BOM DEMAND 018 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
    
      --写入供应数据
      BEGIN
        LV_SUPPLIES_TEMP                        := NULL;
        LV_SUPPLIES_TEMP.PLAN_ID                := P_PLAN_ID;
        LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LV_SUPPLIES_TEMP.ORGANIZATION_ID        := ln_source_org_id;
        LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := ln_source_org_id;
        LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := P_ASSY_ITEM_ID;
        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
      
        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME); --重新计算
        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                     LN_SUB_FULL_LEAD_TIME);
        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                     LN_SUB_FULL_LEAD_TIME - LN_SUB_PREPROCE_LEAD_TIME);
      
        LV_SUPPLIES_TEMP.DISPOSITION_ID          := NULL;
        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
        LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := P_ASSY_ITEM_QTY;
        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := P_ASSY_ITEM_QTY;
        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
        LV_SUPPLIES_TEMP.UPDATED                 := 2;
        LV_SUPPLIES_TEMP.STATUS                  := 0;
        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***ERROR*** INSERT BOM SUPPLIES 019 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
    
      --写入PEGGING数据
      BEGIN
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := P_ASSY_ITEM_QTY;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := P_ASSY_ITEM_QTY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := P_ASSY_ITEM_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := P_ORGI_USAGE; --单位用量 --Changed by V1.027
        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := P_ASSY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := ln_source_org_id;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
        LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
        LT_PEGGING_TEMP.PROJECT_ID             := NULL;
        LT_PEGGING_TEMP.TASK_ID                := NULL;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT BOM PEGGINGS 020 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
      LT_DEMAND_TEMP.LOW_LEVEL_CODE         := LN_LOW_LEVEL_CODE;
      LT_DEMAND_TEMP.PEGGING_ID             := LN_PEGGING_ID;
      LT_DEMAND_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
      LT_DEMAND_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
      LT_DEMAND_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
      LT_DEMAND_TEMP.ALLOCATED_QUANTITY     := P_ASSY_ITEM_QTY;
      LT_DEMAND_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
      LT_DEMAND_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
      LT_DEMAND_TEMP.ITEM_TYPE              := LV_ITEM_TYPE;
      LT_DEMAND_TEMP.ITEM_NAME              := LV_ITEM_NAME;
      LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE := LN_MAKE_BUY_CODE;
      LT_DEMAND_TEMP.END_ITEM_USAGE         := P_ORGI_USAGE;--Changed by V1.027
      INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
    END IF;
  
    IF ln_source_org_id = -1 THEN
      ln_source_org_id := P_ORGANIZATION_ID;
    END IF;
  
    IF ln_pre_pegging_id IS NULL THEN
      ln_pre_pegging_id := P_PRV_PEGGING_ID;
    END IF;
  
    FOR LR_BOM IN LC_BOM(ln_source_org_id) LOOP
    
      ln_org_id := get_source_org(p_plan_id, p_sr_instance_id, LR_BOM.organization_id, LR_BOM.inventory_item_id);
      IF ln_org_id = -1 THEN
        ln_org_id := LR_BOM.organization_id;
      END IF;
    
      BEGIN
        SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
               MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
               MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
               MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
               MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
               MSI.PLANNING_MAKE_BUY_CODE,
               MSI.ATTRIBUTE1,
               MSI.ITEM_NAME,
               MSI.LOW_LEVEL_CODE
          INTO LN_SUB_PREPROCE_LEAD_TIME,
               LN_SUB_POST_LEAD_TIME,
               LN_SUB_FULL_LEAD_TIME,
               LN_SUB_FIXED_LEAD_TIME,
               LN_SUB_VARIA_LEAD_TIME,
               LN_MAKE_BUY_CODE,
               LV_ITEM_TYPE,
               LV_ITEM_NAME,
               LN_LOW_LEVEL_CODE
          FROM MSC_SYSTEM_ITEMS MSI
         WHERE MSI.plan_id = P_PLAN_ID
           AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND MSI.ORGANIZATION_ID = LR_BOM.ORGANIZATION_ID
           AND MSI.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_SUB_PREPROCE_LEAD_TIME := 0;
          LN_SUB_POST_LEAD_TIME     := 0;
          LN_SUB_FULL_LEAD_TIME     := 0;
          LN_SUB_FIXED_LEAD_TIME    := 0;
          LN_SUB_VARIA_LEAD_TIME    := 0;
      END;
    
      LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
      LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
      --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
      LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
      LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
      LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
    
      --先写入一笔计划单需求
      BEGIN
        SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
        LT_DEMAND_TEMP                                := NULL;
        LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
        LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
        LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
        LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
        LT_DEMAND_TEMP.DISPOSITION_ID                 := NULL;
        LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_ASSY_ITEM_ID;
        LT_DEMAND_TEMP.PLAN_ID                        := P_PLAN_ID;
        LT_DEMAND_TEMP.ORGANIZATION_ID                := LR_BOM.ORGANIZATION_ID;
        LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_BOM.INVENTORY_ITEM_ID;
        LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_SR_INSTANCE_ID;
        LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := 0;
        LT_DEMAND_TEMP.PROMISE_DATE                   := NULL;
        LT_DEMAND_TEMP.SELLING_PRICE                  := 0;
        LT_DEMAND_TEMP.DMD_LATENESS_COST              := 0;
        LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := NULL;
        LT_DEMAND_TEMP.OP_SEQ_NUM                     := LR_BOM.OPERATION_SEQ_NUM;
        LT_DEMAND_TEMP.UPDATED                        := 2;
        LT_DEMAND_TEMP.STATUS                         := 0;
        LT_DEMAND_TEMP.APPLIED                        := NULL;
        LT_DEMAND_TEMP.DEMAND_CLASS                   := NULL;
        LT_DEMAND_TEMP.FIRM_QUANTITY                  := NULL;
        LT_DEMAND_TEMP.FIRM_DATE                      := NULL;
        LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := NULL;
        LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_ASSY_DEMAND_DATE;
        LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LR_BOM.ORGANIZATION_ID;
        LT_DEMAND_TEMP.RESERVATION_ID                 := NULL;
        LT_DEMAND_TEMP.PARENT_ID                      := NULL;
        LT_DEMAND_TEMP.LENDING_PROJECT_ID             := NULL;
        LT_DEMAND_TEMP.LENDING_TASK_ID                := NULL;
        LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --1 替代料 2 主料
        LT_DEMAND_TEMP.ORDER_NUMBER                   := NULL;
        LT_DEMAND_TEMP.RESERVED_QUANTITY              := 0;
        LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
        LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
        LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
        LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
        LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
        LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
        LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
        LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
        LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := NULL;
        LT_DEMAND_TEMP.ATTRIBUTE1                     := NULL;
        LT_DEMAND_TEMP.WIP_ENTITY_ID                  := NULL;
        LT_DEMAND_TEMP.ISSUED_QUANTITY                := NULL;
        LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := NULL;
        LT_DEMAND_TEMP.REFRESH_NUMBER                 := NULL;
        LT_DEMAND_TEMP.REQUEST_DATE                   := NULL;
        LT_DEMAND_TEMP.WIP_STATUS_CODE                := NULL;
        LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := 1;
        LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := 1;
        LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := NULL;
        LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := NULL;
        LT_DEMAND_TEMP.BUCKET_TYPE                    := 1;
        LT_DEMAND_TEMP.BILL_ID                        := NULL;
        LT_DEMAND_TEMP.PROBABILITY                    := NULL;
        LT_DEMAND_TEMP.FORECAST_SET_ID                := NULL;
        LT_DEMAND_TEMP.GROUP_ID                       := NULL;
        LT_DEMAND_TEMP.SERVICE_LEVEL                  := NULL;
        LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := NULL;
        LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := NULL;
        LT_DEMAND_TEMP.SCENARIO_SET                   := NULL;
        LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := NULL;
        LT_DEMAND_TEMP.SUPPLY_ID                      := NULL;
        LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := NULL;
        LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := NULL;
        LT_DEMAND_TEMP.STOLEN_FLAG                    := NULL;
        LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := NULL;
        LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := NULL;
        LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := NULL;
        LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := NULL;
        LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := NULL;
        LT_DEMAND_TEMP.UNMET_QUANTITY                 := NULL;
        LT_DEMAND_TEMP.RECORD_SOURCE                  := NULL;
        LT_DEMAND_TEMP.LINK_TO_LINE_ID                := NULL;
        LT_DEMAND_TEMP.ERROR_TYPE                     := NULL;
        LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := NULL;
        LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_BOM.COMPONENT_SEQUENCE_ID;
        LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := NULL;
        LT_DEMAND_TEMP.RELEASE_STATUS                 := NULL;
        LT_DEMAND_TEMP.RESCHEDULE_FLAG                := NULL;
        LT_DEMAND_TEMP.LOAD_TYPE                      := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_DATE                 := NULL;
        LT_DEMAND_TEMP.RELEASE_ERRORS                 := NULL;
        LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := NULL;
        LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := NULL;
        LT_DEMAND_TEMP.ORIGINAL_INST_ID               := NULL;
        LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := 0;
        LT_DEMAND_TEMP.SHIP_SET_ID                    := 0;
        LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := NULL;
        LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := NULL;
        LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := NULL;
        LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := NULL;
        LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := NULL;
        LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := NULL;
        LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := NULL;
        LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := NULL;
        LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := NULL;
        LT_DEMAND_TEMP.ZONE_ID                        := NULL;
        LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := NULL;
        LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := 0;
        LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := NULL;
        LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := NULL;
        LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := NULL; --需要更新？
        LT_DEMAND_TEMP.ATO_LINE_ID                    := NULL;
        LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := NULL;
        LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := NULL;
        LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := NULL;
        LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := NULL;
        LT_DEMAND_TEMP.SHIP_METHOD                    := NULL;
        LT_DEMAND_TEMP.SHIP_CALENDAR                  := NULL;
        LT_DEMAND_TEMP.RECEIVING_CALENDAR             := NULL;
        LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := NULL;
        LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := NULL;
        LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := NULL;
        LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := NULL;
        LT_DEMAND_TEMP.FINAL_USE_DATE                 := NULL;
        LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := NULL;
        LT_DEMAND_TEMP.SHIP_SET_NAME                  := NULL;
        LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := NULL;
        LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := NULL; --需要更新？
        LT_DEMAND_TEMP.ATP_SESSION_ID                 := NULL;
        LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := NULL;
        LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_ASSY_DEMAND_DATE;
        --INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MD',
              '***ERROR*** INSERT BOM DEMAND 018 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
    
      --写入供应数据
      BEGIN
        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
        LV_SUPPLIES_TEMP                        := NULL;
        LV_SUPPLIES_TEMP.PLAN_ID                := P_PLAN_ID;
        LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LV_SUPPLIES_TEMP.ORGANIZATION_ID        := LR_BOM.ORGANIZATION_ID;
        LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := ln_org_id;
        LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
      
        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME); --重新计算
        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                     LN_SUB_FULL_LEAD_TIME);
        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                     LN_SUB_FULL_LEAD_TIME - LN_SUB_PREPROCE_LEAD_TIME);
      
        LV_SUPPLIES_TEMP.DISPOSITION_ID          := NULL;
        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
        LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
        LV_SUPPLIES_TEMP.UPDATED                 := 2;
        LV_SUPPLIES_TEMP.STATUS                  := 0;
        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***ERROR*** INSERT BOM SUPPLIES 019 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Added P_ORGI_USAGE by v1.027
        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BOM.ORGANIZATION_ID;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := ln_pre_pegging_id;
        LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
        LT_PEGGING_TEMP.PROJECT_ID             := NULL;
        LT_PEGGING_TEMP.TASK_ID                := NULL;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT BOM PEGGINGS 020 ' || dbms_utility.format_error_backtrace() ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
      END;
      LT_DEMAND_TEMP.LOW_LEVEL_CODE         := LN_LOW_LEVEL_CODE;
      LT_DEMAND_TEMP.PEGGING_ID             := LN_PEGGING_ID;
      LT_DEMAND_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
      LT_DEMAND_TEMP.PREV_PEGGING_ID        := ln_pre_pegging_id;
      LT_DEMAND_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
      LT_DEMAND_TEMP.ALLOCATED_QUANTITY     := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
      LT_DEMAND_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
      LT_DEMAND_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
      LT_DEMAND_TEMP.ITEM_TYPE              := LV_ITEM_TYPE;
      LT_DEMAND_TEMP.ITEM_NAME              := LV_ITEM_NAME;
      LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE := LN_MAKE_BUY_CODE;
      LT_DEMAND_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Added P_ORGI_USAGE by v1.027
      INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
    
      IF LN_LOW_LEVEL_CODE <> 1000 THEN
      
        INSERT_BOM_EXPLOSION(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                             P_PLAN_ID               => P_PLAN_ID,
                             P_ORGANIZATION_ID       => LR_BOM.organization_id,
                             P_ASSY_ITEM_ID          => LR_BOM.inventory_item_id,
                             P_ASSY_ITEM_QTY         => P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY,
                             P_BOM_VER_DATE          => P_BOM_VER_DATE,
                             P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                             P_END_PEGGING_ID        => P_END_PEGGING_ID,
                             P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                        LN_SUB_FULL_LEAD_TIME),
                             P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                        LN_SUB_FULL_LEAD_TIME),
                             P_END_ORIGINATION_TYPE  => P_END_ORIGINATION_TYPE,
                             P_ORGI_USAGE            => LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE,--初始单位用量--Added by v1.027
                             P_D_COUNT               => LN_D_COUNT,
                             P_S_COUNT               => LN_S_COUNT,
                             P_P_COUNT               => LN_P_COUNT);
      END IF;
    END LOOP;
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  END;

  FUNCTION GET_PROCESS_FLAG(P_INVENTORY_ITEM_ID IN NUMBER,
                            P_PCBA_FLAG         IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                            ) RETURN VARCHAR2 IS
    LV_PROCESS_FLAG VARCHAR2(10);
  BEGIN
    LV_PROCESS_FLAG := 'N';
  
    BEGIN
      SELECT 'Y'
        INTO LV_PROCESS_FLAG
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
         AND ROWNUM = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_PROCESS_FLAG := 'N';
      WHEN OTHERS THEN 
        LV_PROCESS_FLAG := 'N';
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_PRO_FLAG',
                '***ERROR*** GET PROCESS FLAG 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);  
    END;
  
    IF LV_PROCESS_FLAG = 'N' THEN
      --Added below by V1.008 as calculate sub PCB item qty
      IF p_pcba_flag = 'Y' THEN
        LV_PROCESS_FLAG := 'N';
      ELSE
        BEGIN
          SELECT 'Y'
            INTO LV_PROCESS_FLAG
            FROM CUX.CUX_MSC_GROUP_QTY_LINE
           WHERE INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
             AND ROWNUM = 1;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_PROCESS_FLAG := 'N';
          WHEN OTHERS THEN 
        LV_PROCESS_FLAG := 'N';
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_PRO_FLAG',
                '***ERROR*** GET PROCESS FLAG 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);  
        END;
      
        IF LV_PROCESS_FLAG = 'N' THEN
          BEGIN
            SELECT 'Y'
              INTO LV_PROCESS_FLAG
              FROM CUX.CUX_MSC_GROUP_QTY_DETAIL
             WHERE INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
               AND ROWNUM = 1;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LV_PROCESS_FLAG := 'N';
              WHEN OTHERS THEN 
        LV_PROCESS_FLAG := 'N';
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_PRO_FLAG',
                '***ERROR*** GET PROCESS FLAG 006 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          END;
        END IF;
      
      END IF;
    END IF;
    IF LV_PROCESS_FLAG = 'Y' THEN
      RETURN 'Y';
    ELSE
      RETURN 'N';
    END IF;
  END;

  PROCEDURE CALCULATE_GROUP_QTY_PH(p_SR_INSTANCE_ID NUMBER, PO_ERROR_CODE OUT VARCHAR2) IS
    LE_EXCEPTION EXCEPTION;
  BEGIN
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
         SET HEADER_ZIRAN_FLAG =
             (SELECT CMGH.ZIRAN_FLAG FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH WHERE CMGH.HEADER_ID = CMGL.HEADER_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
         SET HEADER_ZIRAN_FLAG =
             (SELECT CMGH.ZIRAN_FLAG FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH WHERE CMGH.HEADER_ID = CMGD.HEADER_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
         SET LEVEL1_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 11)
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             LEVEL2_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and ((CMS.order_type IN (2, 1) AND NVL(CMGL.HEADER_ZIRAN_FLAG, 'N') != 'Y') OR
                                     (CMS.order_type = 1 AND NVL(CMGL.HEADER_ZIRAN_FLAG, 'N') = 'Y'))
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
         SET LEVEL1_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 11)
                                 and CMS.organization_id in (CMGD.ORGANIZATION_ID, CMGD.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGD.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             LEVEL2_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and ((CMS.order_type IN (2, 1) AND NVL(CMGD.HEADER_ZIRAN_FLAG, 'N') != 'Y') OR
                                     (CMS.order_type = 1 AND NVL(CMGD.HEADER_ZIRAN_FLAG, 'N') = 'Y'))
                                 and CMS.organization_id in (CMGD.ORGANIZATION_ID, CMGD.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGD.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             REMAIN_QTY = NVL((select sum(CMD.USING_REQUIREMENT_QUANTITY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T  CMS,
                                     CUX.CUX_MSC_DEMANDS_SJ_T   CMD,
                                     CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (3, 7) --3 工作单 7 非标准任务
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND CMGD.LINE_ID = CMGL.LINE_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1
                                 AND NVL(CMS.DJ_USED_FLAG, 'N') = 'N' --排除已经分配过的工单
                                 AND CMD.plan_id = -1
                                 and CMD.sr_instance_id = CMS.sr_instance_id
                                 AND CMD.WIP_ENTITY_ID = CMS.DISPOSITION_ID
                                 AND CMD.INVENTORY_ITEM_ID = CMGD.INVENTORY_ITEM_ID),
                              0);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
         SET LEVEL1_QTY = NVL((SELECT CMGL.LEVEL1_QTY * CMGD.PER_QTY
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGL.HEADER_ID = CMGD.HEADER_ID
                                 AND CMGL.LINE_ID = CMGD.LINE_ID),
                              0) + DECODE(SIGN(LEVEL1_QTY - REMAIN_QTY), 1, LEVEL1_QTY - REMAIN_QTY, 0),
             LEVEL2_QTY = NVL((SELECT CMGL.LEVEL2_QTY * CMGD.PER_QTY
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGL.HEADER_ID = CMGD.HEADER_ID
                                 AND CMGL.LINE_ID = CMGD.LINE_ID),
                              0) + DECODE(SIGN(LEVEL1_QTY - REMAIN_QTY),
                                          1,
                                          LEVEL2_QTY,
                                          DECODE(SIGN(LEVEL1_QTY + LEVEL2_QTY - REMAIN_QTY),
                                                 1,
                                                 LEVEL1_QTY + LEVEL2_QTY - REMAIN_QTY,
                                                 0));
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD SET LEVEL3_QTY = LEVEL1_QTY + LEVEL2_QTY;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE SET LEVEL3_QTY = LEVEL1_QTY + LEVEL2_QTY;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
         SET LEVEL1_QTY = NVL((SELECT MIN(CMGH1.LEVEL1_QTY)
                                FROM (SELECT CMGL.HEADER_ID, CMGL.LEVEL1_QTY / CMGL.PER_QTY LEVEL1_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                       WHERE NOT EXISTS (SELECT 1
                                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                               WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                                      --AND CMGL.HEADER_ID = CMGH.HEADER_ID
                                      UNION ALL
                                      SELECT CMGD.HEADER_ID, CMGD.LEVEL1_QTY / CMGD.EXTEND_PER_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                      --WHERE CMGD.HEADER_ID = CMGH.HEADER_ID
                                      ) CMGH1
                               WHERE CMGH1.HEADER_ID = CMGH.HEADER_ID
                               GROUP BY CMGH1.HEADER_ID),
                              0),
             LEVEL2_QTY = NVL((SELECT MIN(CMGH1.LEVEL1_QTY)
                                FROM (SELECT CMGL.HEADER_ID,
                                             (CMGL.LEVEL1_QTY + CMGL.LEVEL2_QTY) / CMGL.PER_QTY LEVEL1_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                       WHERE NOT EXISTS (SELECT 1
                                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                               WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                                      --AND CMGL.HEADER_ID = CMGH.HEADER_ID
                                      UNION ALL
                                      SELECT CMGD.HEADER_ID, (CMGD.LEVEL1_QTY + CMGD.LEVEL2_QTY) / CMGD.EXTEND_PER_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                      --WHERE CMGD.HEADER_ID = CMGH.HEADER_ID
                                      ) CMGH1
                               WHERE CMGH1.HEADER_ID = CMGH.HEADER_ID
                               GROUP BY CMGH1.HEADER_ID),
                              0),
             LEVEL3_QTY = NVL((SELECT MAX(CMGH1.LEVEL1_QTY)
                                FROM (SELECT CMGL.HEADER_ID,
                                             (CMGL.LEVEL1_QTY + CMGL.LEVEL2_QTY) / CMGL.PER_QTY LEVEL1_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                       WHERE NOT EXISTS (SELECT 1
                                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                               WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                                      --AND CMGL.HEADER_ID = CMGH.HEADER_ID
                                      UNION ALL
                                      SELECT CMGD.HEADER_ID, (CMGD.LEVEL1_QTY + CMGD.LEVEL2_QTY) / CMGD.EXTEND_PER_QTY
                                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                                      --WHERE CMGD.HEADER_ID = CMGH.HEADER_ID
                                      ) CMGH1
                               WHERE CMGH1.HEADER_ID = CMGH.HEADER_ID
                               GROUP BY CMGH1.HEADER_ID),
                              0);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH SET LEVEL3_QTY = NVL(LEVEL3_QTY, 0) - NVL(LEVEL2_QTY, 0);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  
    BEGIN
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH SET LEVEL2_QTY = NVL(LEVEL2_QTY, 0) - NVL(LEVEL1_QTY, 0);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'PROCESS_GROUP_QTY',
            '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      
        RAISE LE_EXCEPTION;
    END;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := '2';
  END;

  PROCEDURE CALCULATE_GROUP_QTY(p_SR_INSTANCE_ID   NUMBER,
                                P_NO_PCBA_SUB_FLAG VARCHAR2 DEFAULT 'N' --Added by V1.022
                                ) IS
  BEGIN
  
    UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
       SET LEVEL1_QTY = NVL((select sum(CMS.REMAIN_QTY)
                              from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             where CMS.plan_id = -1
                               and CMS.sr_instance_id = p_SR_INSTANCE_ID
                               and CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 11)
                               and CMS.organization_id in (CMGH.ORGANIZATION_ID, CMGH.SOURCE_ORGANIZATION_ID)
                               and CMS.inventory_item_id = CMGH.INVENTORY_ITEM_ID
                               AND SIGN(CMS.REMAIN_QTY) = 1),
                            0),
           LEVEL2_QTY = NVL((select sum(CMS.REMAIN_QTY)
                              from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             where CMS.plan_id = -1
                               and CMS.sr_instance_id = p_SR_INSTANCE_ID
                               and ((CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 2, 11) AND
                                   NVL(CMGH.ZIRAN_FLAG, 'N') != 'Y') OR
                                   (CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 11) AND
                                   NVL(CMGH.ZIRAN_FLAG, 'N') = 'Y'))
                               and CMS.organization_id in (CMGH.ORGANIZATION_ID, CMGH.SOURCE_ORGANIZATION_ID)
                               and CMS.inventory_item_id = CMGH.INVENTORY_ITEM_ID
                               AND SIGN(CMS.REMAIN_QTY) = 1),
                            0);
    IF P_NO_PCBA_SUB_FLAG = 'Y' THEN
      --Added by V1.022                  
      --Added by V1.008 as calculate sub PCB item qty
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH SET ORIGINAL_LEVEL1_QTY = LEVEL1_QTY, ORIGINAL_LEVEL2_QTY = LEVEL2_QTY;
    
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
         SET HEADER_ZIRAN_FLAG =
             (SELECT CMGH.ZIRAN_FLAG FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH WHERE CMGH.HEADER_ID = CMGL.HEADER_ID)
       WHERE EXISTS (SELECT 1
                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                 AND CMGH.ZIRAN_FLAG = 'Y');
    
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
         SET HEADER_ZIRAN_FLAG =
             (SELECT CMGH.ZIRAN_FLAG FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH WHERE CMGH.HEADER_ID = CMGD.HEADER_ID)
       WHERE EXISTS (SELECT 1
                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
               WHERE CMGH.HEADER_ID = CMGD.HEADER_ID
                 AND CMGH.ZIRAN_FLAG = 'Y');
    
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
         SET LEVEL1_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 11)
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             LEVEL2_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and ((CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 2, 11) AND
                                     NVL(CMGL.HEADER_ZIRAN_FLAG, 'N') != 'Y') OR
                                     (CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 11) AND
                                     NVL(CMGL.HEADER_ZIRAN_FLAG, 'N') = 'Y'))
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             REMAIN_QTY = NVL((select sum(CMD.USING_REQUIREMENT_QUANTITY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T    CMS,
                                     CUX.CUX_MSC_DEMANDS_SJ_T     CMD,
                                     CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (3, 7) --3 工作单 7 非标准任务
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGH.INVENTORY_ITEM_ID
                                 AND CMGH.HEADER_ID = CMGL.HEADER_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1
                                 AND CMD.plan_id = -1
                                 and CMD.sr_instance_id = CMS.sr_instance_id
                                 AND CMD.WIP_ENTITY_ID = CMS.DISPOSITION_ID
                                 AND CMD.INVENTORY_ITEM_ID = CMGL.INVENTORY_ITEM_ID),
                              0);
    
      UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
         SET LEVEL1_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 11)
                                 and CMS.organization_id in (CMGD.ORGANIZATION_ID, CMGD.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGD.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             LEVEL2_QTY = NVL((select sum(CMS.REMAIN_QTY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and ((CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 2, 11) AND
                                     NVL(CMGD.HEADER_ZIRAN_FLAG, 'N') != 'Y') OR
                                     (CMS.order_type IN (14, 15, 18, 3, 7, 8, 12, 1, 11) AND
                                     NVL(CMGD.HEADER_ZIRAN_FLAG, 'N') = 'Y'))
                                 and CMS.organization_id in (CMGD.ORGANIZATION_ID, CMGD.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGD.INVENTORY_ITEM_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1),
                              0),
             REMAIN_QTY = NVL((select sum(CMD.USING_REQUIREMENT_QUANTITY)
                                from CUX.CUX_MSC_SUPPLIES_SJ_T  CMS,
                                     CUX.CUX_MSC_DEMANDS_SJ_T   CMD,
                                     CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               where CMS.plan_id = -1
                                 and CMS.sr_instance_id = p_SR_INSTANCE_ID
                                 and CMS.order_type IN (3, 7) --3 工作单 7 非标准任务
                                 and CMS.organization_id in (CMGL.ORGANIZATION_ID, CMGL.SOURCE_ORGANIZATION_ID)
                                 and CMS.inventory_item_id = CMGL.INVENTORY_ITEM_ID
                                 AND CMGD.LINE_ID = CMGL.LINE_ID
                                 AND SIGN(CMS.REMAIN_QTY) = 1
                                 AND NVL(CMS.DJ_USED_FLAG, 'N') = 'N' --排除已经分配过的工单
                                 AND CMD.plan_id = -1
                                 and CMD.sr_instance_id = CMS.sr_instance_id
                                 AND CMD.WIP_ENTITY_ID = CMS.DISPOSITION_ID
                                 AND CMD.INVENTORY_ITEM_ID = CMGD.INVENTORY_ITEM_ID),
                              0);
    
      UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
         SET LEVEL1_QTY = NVL(LEVEL1_QTY, 0) +
                          NVL((SELECT MIN(DECODE(SIGN(NVL(CMGD.LEVEL1_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGD.LEVEL1_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                               WHERE CMGD.LINE_ID = CMGL.LINE_ID),
                              0),
             LEVEL2_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MIN(DECODE(SIGN(NVL(CMGD.LEVEL2_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGD.LEVEL2_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                               WHERE CMGD.LINE_ID = CMGL.LINE_ID),
                              0),
             LEVEL3_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MAX(DECODE(SIGN(NVL(CMGD.LEVEL2_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGD.LEVEL2_QTY, 0) - NVL(CMGD.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                               WHERE CMGD.LINE_ID = CMGL.LINE_ID),
                              0);
      --Added by V1.008 as calculate sub PCB item qty
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
         SET LEVEL1_QTY = NVL(LEVEL1_QTY, 0) +
                          NVL((SELECT MIN(SUM(DECODE(SIGN(NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                    -1,
                                                    0,
                                                    NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0))))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                               GROUP BY CMGL.HEADER_ID, CMGL.HEADER_ID || DECODE(CMGL.SUM_FLAG, 'Y', 'Y', CMGL.LINE_ID)),
                              0),
             LEVEL2_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MIN(SUM(DECODE(SIGN(NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                    -1,
                                                    0,
                                                    NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0))))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                               GROUP BY CMGL.HEADER_ID, CMGL.HEADER_ID || DECODE(CMGL.SUM_FLAG, 'Y', 'Y', CMGL.LINE_ID)),
                              0),
             LEVEL3_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MAX(SUM(DECODE(SIGN(NVL(CMGL.LEVEL3_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                    -1,
                                                    0,
                                                    NVL(CMGL.LEVEL3_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0))))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                               GROUP BY CMGL.HEADER_ID, CMGL.HEADER_ID || DECODE(CMGL.SUM_FLAG, 'Y', 'Y', CMGL.LINE_ID)),
                              0);
    
      /*Commented by V1.008
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
         SET LEVEL1_QTY = NVL(LEVEL1_QTY, 0) +
                          NVL((SELECT MIN(DECODE(SIGN(NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGL.LEVEL1_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID),
                              0),
             LEVEL2_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MIN(DECODE(SIGN(NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGL.LEVEL2_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID),
                              0),
             LEVEL3_QTY = NVL(LEVEL2_QTY, 0) +
                          NVL((SELECT MAX(DECODE(SIGN(NVL(CMGL.LEVEL3_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)),
                                                -1,
                                                0,
                                                NVL(CMGL.LEVEL3_QTY, 0) - NVL(CMGL.REMAIN_QTY, 0)))
                                FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID),
                              0);*/
    END IF;
  
    UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH SET LEVEL3_QTY = NVL(LEVEL3_QTY, 0) - NVL(LEVEL2_QTY, 0);
  
    UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGH SET LEVEL2_QTY = NVL(LEVEL2_QTY, 0) - NVL(LEVEL1_QTY, 0);
  
  END;

  PROCEDURE get_change_detail(p_plan_id         IN NUMBER,
                              p_sr_instance_id  IN NUMBER DEFAULT 1,
                              p_pegging_id      IN NUMBER,
                              p_prev_pegging_id IN NUMBER,
                              p_chang_qty       IN NUMBER,
                              P_ORGI_USAGE      IN NUMBER DEFAULT 1,--Added by V1.027
                              P_SEQUENCE_ID     IN NUMBER,--Added by V1.027
                              P_PCBA_FLAG       IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                              ) IS
    CURSOR cu_detail IS
      SELECT mfg.inventory_item_id,
             mfg.pegging_id,
             mfg.prev_pegging_id,
             mfg.plan_id,
             mfg.demand_quantity,
             mfg.supply_quantity,
             mfg.allocated_quantity,
             mfg.end_item_usage,
             mfg.transaction_id transaction_id,
             mfg.disposition_id,
             mfg.demand_id demand_id,
             GET_PROCESS_FLAG(mfg.inventory_item_id, p_pcba_flag) PROCESS_FLAG
        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T mfg
       WHERE mfg.plan_id = p_plan_id
         AND mfg.sr_instance_id = p_sr_instance_id
         AND mfg.pegging_id = p_pegging_id
         AND p_prev_pegging_id IS NULL
      UNION ALL
      SELECT mfg.inventory_item_id,
             mfg.pegging_id,
             mfg.prev_pegging_id,
             mfg.plan_id,
             mfg.demand_quantity,
             mfg.supply_quantity,
             mfg.allocated_quantity,
             mfg.end_item_usage,
             mfg.transaction_id transaction_id,
             mfg.disposition_id,
             mfg.demand_id demand_id,
             GET_PROCESS_FLAG(mfg.inventory_item_id, p_pcba_flag) PROCESS_FLAG
        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T mfg
       WHERE mfg.plan_id = p_plan_id
         AND mfg.sr_instance_id = p_sr_instance_id
         AND p_pegging_id IS NULL
         AND mfg.prev_pegging_id = p_prev_pegging_id;
  
    lr_detail cu_detail%ROWTYPE;
  
    l_bitc_ascp_change_peg CUX.CUX_ASCP_CHANGE_PEG_TEMP%ROWTYPE;
    LN_END_ITEM_UASGE      NUMBER;
  
  BEGIN
  
    OPEN cu_detail;
    LOOP
      FETCH cu_detail
        INTO lr_detail;
      EXIT WHEN cu_detail%NOTFOUND;
    
      /*IF p_prev_pegging_id IS NULL THEN
        LN_END_ITEM_UASGE := 1;
      ELSE
        LN_END_ITEM_UASGE := lr_detail.end_item_usage;
      END IF;*/
      l_bitc_ascp_change_peg.SEQUENCE_ID       := P_SEQUENCE_ID;--Added by V1.027
      l_bitc_ascp_change_peg.p_plan_id         := p_plan_id;
      l_bitc_ascp_change_peg.item_id           := lr_detail.inventory_item_id;
      l_bitc_ascp_change_peg.chang_qty         := lr_detail.end_item_usage * p_chang_qty / P_ORGI_USAGE;
      l_bitc_ascp_change_peg.transaction_id    := lr_detail.transaction_id;
      l_bitc_ascp_change_peg.demand_id         := lr_detail.demand_id;
      l_bitc_ascp_change_peg.pegging_id        := lr_detail.pegging_id;
      l_bitc_ascp_change_peg.request_id        := fnd_global.CONC_REQUEST_ID;
      l_bitc_ascp_change_peg.PROCESS_FLAG      := lr_detail.PROCESS_FLAG;
      l_bitc_ascp_change_peg.inventory_item_id := lr_detail.inventory_item_id;
    
      INSERT INTO CUX.CUX_ASCP_CHANGE_PEG_TEMP VALUES l_bitc_ascp_change_peg;
    
      IF NVL(FND_PROFILE.VALUE('CUX_ASCP_PROCESS_TABLE'), 'N') = 'Y' THEN
        --测试性能用--系统正式上线，请屏蔽此处。此为分析性能过程中使用。
        INSERT INTO CUX.CUX_ASCP_CHANGE_PEG_TEMP_TT
          SELECT * FROM CUX.CUX_ASCP_CHANGE_PEG_TEMP WHERE REQUEST_ID = fnd_global.CONC_REQUEST_ID;
      END IF;
    
      get_change_detail(p_plan_id         => p_plan_id,
                        p_sr_instance_id  => p_sr_instance_id,
                        p_pegging_id      => NULL,
                        p_prev_pegging_id => lr_detail.pegging_id,
                        p_chang_qty       => p_chang_qty,
                        P_ORGI_USAGE      => P_ORGI_USAGE,--Added by V1.027
                        P_SEQUENCE_ID     => P_SEQUENCE_ID,--Added by V1.027
                        P_PCBA_FLAG       => P_PCBA_FLAG                        
                        );
    
    END LOOP;
    CLOSE cu_detail;
  EXCEPTION
    WHEN OTHERS THEN
      fnd_file.put_line(fnd_file.log, '获取修改明细错误！' || chr(13) || SQLERRM);
  END;

  PROCEDURE p_change_pegging(p_plan_id        IN NUMBER,
                             p_sr_instance_id IN NUMBER DEFAULT 1,
                             p_pegging_id     IN NUMBER,
                             p_chang_qty      IN NUMBER,
                             p_flag           IN VARCHAR2, ------是否删除原始需求数
                             P_ORGI_USAGE     IN NUMBER DEFAULT 1,--Added by V1.027
                             P_PCBA_FLAG      IN VARCHAR2 DEFAULT 'N' --Added by V1.008 as calculate sub PCB item qty
                             ) IS
  
    v_allocated_quantity NUMBER := 0;
    v_new_order_quantity NUMBER := 0;
    v_md_quantity        NUMBER := 0;
    LN_FIRST_DEMAND_ID   NUMBER;
    LV_ITEM_NAME         VARCHAR2(200);
    LN_SEQUENCE_ID       NUMBER;--Added by V1.027
  
  BEGIN
  
    --DELETE FROM CUX.CUX_ASCP_CHANGE_PEG_TEMP;
    BEGIN
      SELECT MFP.DEMAND_ID, GET_ITEM_NAME(MFP.PLAN_ID, MFP.SR_INSTANCE_ID, MFP.ORGANIZATION_ID, MFP.INVENTORY_ITEM_ID)
        INTO LN_FIRST_DEMAND_ID, LV_ITEM_NAME
        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
       WHERE MFP.pegging_id = p_pegging_id
         AND MFP.plan_id = p_plan_id
         AND MFP.sr_instance_id = p_sr_instance_id;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_FIRST_DEMAND_ID := -9999;
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***ERROR*** 10014 p_pegging_id =' || p_pegging_id || ' 出现错误: ' || dbms_utility.format_error_backtrace() ||
            CHR(10) || SQLERRM);
    END;
  
    ---------------------------------------------------
    -----------获取对应修改明细------------------------
    SELECT CUX.CUX_ASCP_CHANGE_PEG_TEMP_S.NEXTVAL --Added by V1.027
      INTO LN_SEQUENCE_ID
      FROM DUAL;
    
/*    --Added below by V1.026   
    INSERT INTO CUX.CUX_ASCP_CHANGE_PEG_TEMP
      (SEQUENCE_ID,
       P_PLAN_ID,
       ITEM_ID,
       CHANG_QTY,
       TRANSACTION_ID,
       DEMAND_ID,
       PEGGING_ID,
       REQUEST_ID,
       PROCESS_FLAG,
       INVENTORY_ITEM_ID,
       ITEM_USAGE,
       PREV_PEGGING_ID)
      select LN_SEQUENCE_ID,
             MFP1.PLAN_ID,
             MFP1.INVENTORY_ITEM_ID,
             p_chang_qty * MFP1.item_usage/P_ORGI_USAGE, --Changed by V1.027
             MFP1.TRANSACTION_ID,
             MFP1.DEMAND_ID,
             MFP1.PEGGING_ID,
             fnd_global.CONC_REQUEST_ID,
             GET_PROCESS_FLAG(MFP1.inventory_item_id, p_pcba_flag),
             MFP1.INVENTORY_ITEM_ID,
             MFP1.ITEM_USAGE,
             MFP1.PREV_PEGGING_ID
        from (SELECT MFP.PEGGING_ID,
                     MFP.PREV_PEGGING_ID,
                     MFP.END_ITEM_USAGE as ITEM_USAGE,
                     MFP.DEMAND_QUANTITY,
                     MFP.SUPPLY_QUANTITY,
                     MFP.ALLOCATED_QUANTITY,
                     MFP.PLAN_ID,
                     MFP.TRANSACTION_ID,
                     MFP.DEMAND_ID,
                     MFP.INVENTORY_ITEM_ID,
                     --MFP.end_item_usage,
                     DECODE(PEGGING_ID, p_pegging_id, 0, LOG(10, MFP.end_item_usage)) CHANGE_QTY
                FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
               WHERE MFP.PLAN_ID = p_plan_id
                 AND MFP.sr_instance_id = p_sr_instance_id) MFP1
      connect by prior MFP1.PEGGING_ID = MFP1.PREV_PEGGING_ID
       START WITH MFP1.PEGGING_ID = p_pegging_id;*/
       
    /*UPDATE CUX.CUX_ASCP_CHANGE_PEG_TEMP A
       SET CHANG_QTY = p_chang_qty * (SELECT power(10, sum(log(10, t.item_usage)))
                                        from CUX.CUX_ASCP_CHANGE_PEG_TEMP T
                                      connect by prior t.PREV_PEGGING_ID = t.PEGGING_ID
                                       start WITH t.PEGGING_ID = A.PEGGING_ID) / LN_FIRST_USAGE;*/
    --Added above by V1.026
    
    --Commented by V1.026
    get_change_detail(p_plan_id         => p_plan_id,
    p_sr_instance_id  => p_sr_instance_id,
    p_pegging_id      => p_pegging_id,
    p_prev_pegging_id => NULL,
    p_chang_qty       => p_chang_qty,
    P_ORGI_USAGE      => P_ORGI_USAGE,--Added by V1.027
    P_SEQUENCE_ID     => LN_SEQUENCE_ID,--Added by V1.027
    p_pcba_flag       => p_pcba_flag);
  
    ------------------------------------------------------
    ----------------------修改对应明细数据----------------
    FOR lr_detail IN (SELECT * FROM CUX.CUX_ASCP_CHANGE_PEG_TEMP WHERE SEQUENCE_ID = LN_SEQUENCE_ID) LOOP
    
      BEGIN
        SELECT mfg.allocated_quantity
          INTO v_allocated_quantity
          FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T mfg
         WHERE mfg.pegging_id = lr_detail.pegging_id
           AND mfg.plan_id = p_plan_id
           AND mfg.sr_instance_id = p_sr_instance_id;
      
      EXCEPTION
        WHEN OTHERS THEN
          v_allocated_quantity := 0;
      END;
      IF v_allocated_quantity > lr_detail.chang_qty THEN
        UPDATE CUX.CUX_MSC_FULL_PEGGING_PLAN_T mfg
           SET --mfg.supply_quantity    = mfg.supply_quantity -
               --                         lr_detail.chang_qty,
                 mfg.allocated_quantity = mfg.allocated_quantity - lr_detail.chang_qty,
               --mfg.demand_quantity    = mfg.demand_quantity -
               --                         lr_detail.chang_qty,
               mfg.last_update_date = SYSDATE
         WHERE mfg.pegging_id = lr_detail.pegging_id
           AND mfg.plan_id = p_plan_id
           AND mfg.sr_instance_id = p_sr_instance_id;
        IF (lr_detail.demand_id != LN_FIRST_DEMAND_ID AND p_flag = 'N') OR p_flag = 'Y' THEN
          UPDATE CUX.CUX_MSC_DEMANDS_PLAN_T md
             SET md.ALLOCATED_QUANTITY = md.ALLOCATED_QUANTITY - lr_detail.chang_qty,
                 md.attribute1         = lr_detail.PROCESS_FLAG,
                 md.last_update_date   = SYSDATE
           WHERE md.demand_id = lr_detail.demand_id
             and md.pegging_id = lr_detail.pegging_id
             AND md.plan_id = p_plan_id
             AND md.sr_instance_id = p_sr_instance_id;
        END IF;
      ELSE
      
        DELETE FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T mfg
         WHERE mfg.pegging_id = lr_detail.pegging_id
           AND mfg.plan_id = p_plan_id
           AND mfg.sr_instance_id = p_sr_instance_id;
        IF (lr_detail.demand_id != LN_FIRST_DEMAND_ID AND p_flag = 'N') OR p_flag = 'Y' THEN
          DELETE FROM CUX.CUX_MSC_DEMANDS_PLAN_T md
           WHERE md.demand_id = lr_detail.demand_id
             and md.pegging_id = lr_detail.pegging_id
             AND md.plan_id = p_plan_id
             AND md.sr_instance_id = p_sr_instance_id;
        END IF;
      END IF;
    
      ---------------supplies-----------------------------
    
      BEGIN
        SELECT ms.new_order_quantity
          INTO v_new_order_quantity
          FROM CUX.CUX_MSC_SUPPLIES_PLAN_T ms
         WHERE ms.transaction_id = lr_detail.transaction_id
           AND ms.plan_id = p_plan_id
           AND ms.sr_instance_id = p_sr_instance_id;
      
      EXCEPTION
        WHEN OTHERS THEN
          v_new_order_quantity := 0;
      END;
      IF v_new_order_quantity > lr_detail.chang_qty THEN
        UPDATE CUX.CUX_MSC_SUPPLIES_PLAN_T ms
           SET ms.new_order_quantity = ms.new_order_quantity - lr_detail.chang_qty, ms.last_update_date = SYSDATE
         WHERE ms.transaction_id = lr_detail.transaction_id
           AND ms.plan_id = p_plan_id
           AND ms.sr_instance_id = p_sr_instance_id;
      
        UPDATE CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
           SET MFP.SUPPLY_QUANTITY = v_new_order_quantity - lr_detail.chang_qty
         WHERE MFP.transaction_id = lr_detail.transaction_id
           AND MFP.plan_id = p_plan_id
           AND MFP.sr_instance_id = p_sr_instance_id;
      ELSE
        DELETE FROM CUX.CUX_MSC_SUPPLIES_PLAN_T ms
         WHERE ms.transaction_id = lr_detail.transaction_id
           AND ms.plan_id = p_plan_id
           AND ms.sr_instance_id = p_sr_instance_id;
      END IF;
      ---------------demands------------------------------
    
      IF (lr_detail.demand_id != LN_FIRST_DEMAND_ID AND p_flag = 'N') OR p_flag = 'Y' THEN
        BEGIN
          SELECT md.using_requirement_quantity
            INTO v_md_quantity
            FROM CUX.CUX_MSC_DEMANDS_PLAN_T md
           WHERE md.demand_id = lr_detail.demand_id
             AND md.plan_id = p_plan_id
             AND md.sr_instance_id = p_sr_instance_id
             AND ROWNUM = 1;
        
        EXCEPTION
          WHEN OTHERS THEN
            v_md_quantity := 0;
        END;
      
        IF v_md_quantity > lr_detail.chang_qty THEN
          UPDATE CUX.CUX_MSC_DEMANDS_PLAN_T md
             SET md.using_requirement_quantity = md.using_requirement_quantity - lr_detail.chang_qty,
                 --md.attribute1                 = lr_detail.PROCESS_FLAG,
                 md.last_update_date = SYSDATE
           WHERE md.demand_id = lr_detail.demand_id
             AND md.plan_id = p_plan_id
             AND md.sr_instance_id = p_sr_instance_id;
        
          UPDATE CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
             SET MFP.DEMAND_QUANTITY = v_md_quantity - lr_detail.chang_qty
           WHERE MFP.demand_id = lr_detail.demand_id
             AND MFP.plan_id = p_plan_id
             AND MFP.sr_instance_id = p_sr_instance_id;
        ELSE
        
          DELETE FROM CUX.CUX_MSC_DEMANDS_PLAN_T md
           WHERE md.demand_id = lr_detail.demand_id
             AND md.plan_id = p_plan_id
             AND md.sr_instance_id = p_sr_instance_id;
        END IF;
        --------------------------------------------
      END IF;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      fnd_file.put_line(fnd_file.log, '修改明细错误！' || chr(13) || SQLERRM);
  END;

  PROCEDURE CALCULATE_LEVEL3_QTY(P_PLAN_ID NUMBER, p_SR_INSTANCE_ID NUMBER, P_PLAN_QTY NUMBER, P_CALCUT_COUNT NUMBER) IS
    LN_PLAN_QTY        NUMBER;
    LN_HEADER_ID       NUMBER;
    LN_SORT_ORDER      NUMBER;
    LN_USED_QTY        NUMBER;
    LN_CALCUT_COUNT    NUMBER;
    LN_ITEM_ID         NUMBER;
    LN_ORGANIZATION_ID NUMBER;
    CURSOR LC_LEVELE3 IS
      SELECT HEADER_ID,
             (SELECT COUNT(*)
                FROM (SELECT CMGL.HEADER_ID, CMGL.LEVEL3_QTY / CMGL.PER_QTY LEVEL3_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                       WHERE NOT EXISTS (SELECT 1 FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                         AND NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y'
                      UNION ALL
                      SELECT CMGD.HEADER_ID, CMGD.LEVEL3_QTY / CMGD.EXTEND_PER_QTY LEVEL3_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                       WHERE NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y') CMGL1
               WHERE CMGL1.HEADER_ID = CMGH.HEADER_ID
                 AND CMGL1.LEVEL3_QTY <= 0) *
             (SELECT MIN(CMGL2.LEVEL3_QTY)
                FROM (SELECT CMGL.HEADER_ID, CMGL.LEVEL3_QTY / CMGL.PER_QTY LEVEL3_QTY, CMGL.PER_QTY PER_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                       WHERE NOT EXISTS (SELECT 1 FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                         AND NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y'
                      UNION ALL
                      SELECT CMGD.HEADER_ID,
                             CMGD.LEVEL3_QTY / CMGD.EXTEND_PER_QTY LEVEL3_QTY,
                             CMGD.EXTEND_PER_QTY PER_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                       WHERE NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y') CMGL2
               WHERE CMGL2.HEADER_ID = CMGH.HEADER_ID
                 AND CMGL2.LEVEL3_QTY > 0) SORT_ORDER,
             (SELECT MIN(CMGL2.LEVEL3_QTY)
                FROM (SELECT CMGL.HEADER_ID, CMGL.LEVEL3_QTY / CMGL.PER_QTY LEVEL3_QTY, CMGL.PER_QTY PER_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                       WHERE NOT EXISTS (SELECT 1 FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD WHERE CMGL.LINE_ID = CMGD.LINE_ID)
                         AND NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y'
                      UNION ALL
                      SELECT CMGD.HEADER_ID,
                             CMGD.LEVEL3_QTY / CMGD.EXTEND_PER_QTY LEVEL3_QTY,
                             CMGD.EXTEND_PER_QTY PER_QTY
                        FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                       WHERE NVL(HEADER_ZIRAN_FLAG, 'N') != 'Y') CMGL2
               WHERE CMGL2.HEADER_ID = CMGH.HEADER_ID
                 AND CMGL2.LEVEL3_QTY > 0) USED_QTY,
             CMGH.INVENTORY_ITEM_ID,
             CMGH.ORGANIZATION_ID
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND (EXISTS (SELECT 1
                 FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                WHERE CMGL.HEADER_ID = CMGH.HEADER_ID
                  AND CMGL.LEVEL3_QTY > 0) OR EXISTS (SELECT 1
                 FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                WHERE CMGD.HEADER_ID = CMGH.HEADER_ID
                  AND CMGD.LEVEL3_QTY > 0))
       ORDER BY 2;
  BEGIN
    LN_CALCUT_COUNT := P_CALCUT_COUNT;
  
    IF LN_CALCUT_COUNT = 1 THEN
      LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note***分配过程在途+计划单  待分配数量 ' || P_PLAN_QTY);
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
           SET LEVEL3_QTY = CMGD.LEVEL3_QTY - (SELECT (CMGH.LEVEL1_QTY + CMGH.LEVEL2_QTY) * CMGD.EXTEND_PER_QTY
                                                 FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
                                                WHERE CMGH.HEADER_ID = CMGD.HEADER_ID);
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
    
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
           SET LEVEL3_QTY = CMGL.LEVEL3_QTY - (SELECT (CMGH.LEVEL1_QTY + CMGH.LEVEL2_QTY) * CMGL.PER_QTY
                                                 FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
                                                WHERE CMGH.HEADER_ID = CMGL.HEADER_ID);
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
    END IF;
    LN_CALCUT_COUNT := LN_CALCUT_COUNT + 1;
    LN_PLAN_QTY     := P_PLAN_QTY;
    OPEN LC_LEVELE3;
    FETCH LC_LEVELE3
      INTO LN_HEADER_ID, LN_SORT_ORDER, LN_USED_QTY, LN_ITEM_ID, LN_ORGANIZATION_ID;
    CLOSE LC_LEVELE3;
    IF LN_PLAN_QTY <= LN_USED_QTY THEN
      UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
         SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
       WHERE CMGQ.HEADER_ID = LN_HEADER_ID;
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note***分配过程在途+计划单  料号 ' || GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LN_ORGANIZATION_ID, LN_ITEM_ID) ||
            ' 分配数量 ' || LN_PLAN_QTY);
      END IF;
    
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
           SET CMGL.LEVEL3_QTY = DECODE(SIGN(CMGL.LEVEL3_QTY - LN_PLAN_QTY * CMGL.PER_QTY),
                                        1,
                                        (CMGL.LEVEL3_QTY - LN_PLAN_QTY * CMGL.PER_QTY),
                                        0)
         WHERE CMGL.HEADER_ID = LN_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
    
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
           SET CMGD.LEVEL3_QTY = DECODE(SIGN(CMGD.LEVEL3_QTY - LN_PLAN_QTY * CMGD.EXTEND_PER_QTY),
                                        1,
                                        (CMGD.LEVEL3_QTY - LN_PLAN_QTY * CMGD.EXTEND_PER_QTY),
                                        0)
         WHERE CMGD.HEADER_ID = LN_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
      LN_PLAN_QTY := 0;
    ELSE
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_USED_QTY
         WHERE CMGQ.HEADER_ID = LN_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note***分配过程在途+计划单  料号 ' || GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LN_ORGANIZATION_ID, LN_ITEM_ID) ||
            ' 分配数量 ' || LN_USED_QTY);
      END IF;
    
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_LINE CMGL
           SET CMGL.LEVEL3_QTY = DECODE(SIGN(CMGL.LEVEL3_QTY - LN_USED_QTY * CMGL.PER_QTY),
                                        1,
                                        (CMGL.LEVEL3_QTY - LN_USED_QTY * CMGL.PER_QTY),
                                        0)
         WHERE CMGL.HEADER_ID = LN_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
      BEGIN
        UPDATE CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
           SET CMGD.LEVEL3_QTY = DECODE(SIGN(CMGD.LEVEL3_QTY - LN_USED_QTY * CMGD.EXTEND_PER_QTY),
                                        1,
                                        (CMGD.LEVEL3_QTY - LN_USED_QTY * CMGD.EXTEND_PER_QTY),
                                        0)
         WHERE CMGD.HEADER_ID = LN_HEADER_ID;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 齐套数量 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
      END;
      LN_PLAN_QTY := LN_PLAN_QTY - LN_USED_QTY;
    END IF;
  
    IF LN_PLAN_QTY > 0 THEN
      CALCULATE_LEVEL3_QTY(P_PLAN_ID, p_SR_INSTANCE_ID, LN_PLAN_QTY, LN_CALCUT_COUNT);
    END IF;
  
  END;

  /***********************************************************************************
   NAME: CALCULATE_GROUP_USED_QTY
   DESCRIPTION:计算替代组的各个物料的分配数量
  ***********************************************************************************/
  PROCEDURE CALCULATE_GROUP_USED_QTY_PH(P_PLAN_ID         NUMBER,
                                        p_SR_INSTANCE_ID  NUMBER,
                                        P_ORGANIZATION_ID NUMBER,
                                        P_PLAN_QTY        NUMBER,
                                        P_ALLOT_FLAG      VARCHAR2,
                                        PO_ERROR_CODE     OUT VARCHAR2) IS
    CURSOR LC_ALLOT_QTY IS
      SELECT HEADER_ID,
             NVL(LEVEL1_QTY, 0) + NVL(LEVEL2_QTY, 0) TOTAL_QTY,
             1 SORT_ORDER,
             INVENTORY_ITEM_ID,
             ORGANIZATION_ID
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE ZIRAN_FLAG = 'Y'
         AND NVL(LEVEL1_QTY, 0) + NVL(LEVEL2_QTY, 0) > 0
      UNION ALL
      SELECT HEADER_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 2, INVENTORY_ITEM_ID, ORGANIZATION_ID
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND NVL(LEVEL1_QTY, 0) > 0
      UNION ALL
      SELECT HEADER_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 3, INVENTORY_ITEM_ID, ORGANIZATION_ID
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND NVL(LEVEL2_QTY, 0) > 0
       ORDER BY 3, 2;
  
    CURSOR LC_USED IS
      SELECT CMBI.INVENTORY_ITEM_ID, SUM(CMAB.CURRENT_ALLOCATION_QTY) ALLOT_QTY
        FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
       WHERE CMAB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
         AND CMAB.CURRENT_ALLOCATION_QTY > 0
       group by CMBI.INVENTORY_ITEM_ID; --add by ray 20161221
  
    LN_PLAN_QTY       NUMBER;
    LN_OU_ID          NUMBER;
    LN_BID_NO_COUNT   NUMBER;
    LN_COUNT          NUMBER;
    LN_TOTAL_QTY      NUMBER;
    LN_TOTAL_USED_QTY NUMBER;
    LE_EXCEPTION EXCEPTION;
  BEGIN
  
    LN_PLAN_QTY := P_PLAN_QTY;
    --计算库存跟在途成套部分
    FOR LR_ALLOT_QTY IN LC_ALLOT_QTY LOOP
      IF LN_PLAN_QTY <= LR_ALLOT_QTY.TOTAL_QTY THEN
        BEGIN
          UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
             SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
           WHERE CMGQ.HEADER_ID = LR_ALLOT_QTY.HEADER_ID;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'PROCESS_GROUP_QTY',
                '***ERROR*** 更新齐套数量头 001 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            RAISE LE_EXCEPTION;
        END;
      
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note***分配过程库存+在途  料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_ALLOT_QTY.ORGANIZATION_ID, LR_ALLOT_QTY.INVENTORY_ITEM_ID) ||
              ' 分配数量 ' || LN_PLAN_QTY);
        END IF;
        LN_PLAN_QTY := 0;
      ELSE
        BEGIN
          UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
             SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LR_ALLOT_QTY.TOTAL_QTY
           WHERE CMGQ.HEADER_ID = LR_ALLOT_QTY.HEADER_ID;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'PROCESS_GROUP_QTY',
                '***ERROR*** 更新齐套数量 002 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            RAISE LE_EXCEPTION;
        END;
      
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note***分配过程库存+在途  料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_ALLOT_QTY.ORGANIZATION_ID, LR_ALLOT_QTY.INVENTORY_ITEM_ID) ||
              ' 分配数量 ' || LR_ALLOT_QTY.TOTAL_QTY);
        END IF;
        LN_PLAN_QTY := LN_PLAN_QTY - LR_ALLOT_QTY.TOTAL_QTY;
      END IF;
      IF LN_PLAN_QTY <= 0 THEN
        EXIT;
      END IF;
    END LOOP;
    --若库存+在途成套部分仍不能满足的部分增加计划单去满足
  
    CALCULATE_LEVEL3_QTY(P_PLAN_ID, p_SR_INSTANCE_ID, LN_PLAN_QTY, 1);
    --按比例分配剩余的部分
  
    BEGIN
      SELECT SUM(NVL(USED_QTY, 0)) INTO LN_TOTAL_USED_QTY FROM CUX.CUX_MSC_GROUP_QTY_HEADER;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_TOTAL_USED_QTY := 0;
    END;
    LN_PLAN_QTY := P_PLAN_QTY - LN_TOTAL_USED_QTY;
    IF LN_PLAN_QTY > 0 AND P_ALLOT_FLAG = 'Y' THEN
    BEGIN
        SELECT CMOR.ORG_ID
          INTO LN_OU_ID
          FROM CUX.CUX_MSC_ORG_RANGE CMOR
         WHERE CMOR.ORGANIZATION_ID = P_ORGANIZATION_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_OU_ID := 0;
      END;  
    
      DELETE CUX.CUX_MSC_BID_ITEM_RANGE;
    
      BEGIN
        INSERT INTO CUX.CUX_MSC_BID_ITEM_RANGE
          (INVENTORY_ITEM_ID, SUB_ITEM_TYPE,SUB_GROUP_ID)
          SELECT INVENTORY_ITEM_ID, ZIRAN_FLAG,
               (SELECT DISTINCT NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID)
                  FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB
                 WHERE CMGH.INVENTORY_ITEM_ID = CMB.MSC_INVENTORY_ITEM_ID
                   AND CMB.ORG_ID = LN_OU_ID) --Added by V1.029
            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
           WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N';
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'PROCESS_GROUP_QTY',
              '***ERROR*** 更新齐套数量 003 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          RAISE LE_EXCEPTION;
      END;
       
       --Added by V1.029
       DELETE CUX.CUX_MSC_BID_ITEM_RANGE CMBI
        WHERE NOT EXISTS (SELECT 1
                 FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI1
                WHERE CMBI1.SUB_GROUP_ID = CMBI.SUB_GROUP_ID
                  AND CMBI1.SUB_ITEM_TYPE = 'M')  ;
          
      /*Commented by V1.029
      BEGIN
        SELECT COUNT(DISTINCT NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID))
          INTO LN_BID_NO_COUNT
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND CMB.ORG_ID = LN_OU_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_BID_NO_COUNT := 0;
      END;
    
      IF LN_BID_NO_COUNT > 1 THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID, 'ALLOCAT_QTY', '     ');
        FOR LR_ERROR IN (SELECT INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE) LOOP
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'ALLOCAT_QTY',
              '***ERROR*** 物料 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ERROR.INVENTORY_ITEM_ID) || ' 存在多个分配组 ' ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        END LOOP;
      ELSE*/
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.CURRENT_ALLOCATION_QTY = NULL
           WHERE 1 = 1
             AND CMB.ORG_ID = LN_OU_ID
             AND CMB.BID_NO IN (SELECT CMB1.BID_NO
                                  FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBIR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
                                 WHERE CMB1.MSC_INVENTORY_ITEM_ID = CMBIR.INVENTORY_ITEM_ID
                                   AND CMB1.ORG_ID = LN_OU_ID);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'PROCESS_GROUP_QTY',
                '***ERROR*** 更新齐套数量 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            RAISE LE_EXCEPTION;
        END;
        --开始计算分配比例
        PROCESS_ALLOCATION_QTY(LN_OU_ID, LN_PLAN_QTY);
      
        BEGIN
          SELECT COUNT(DISTINCT CMBI.INVENTORY_ITEM_ID)
            INTO LN_COUNT
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
           WHERE CMAB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
             AND CMAB.CURRENT_ALLOCATION_QTY > 0;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_COUNT := 0;
        END;
      
        IF LN_COUNT = 0 THEN
          BEGIN
            UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
               SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
             WHERE NVL(ZIRAN_FLAG, 'N') = 'M';
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'PROCESS_GROUP_QTY',
                  '***ERROR*** 更新齐套数量 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              RAISE LE_EXCEPTION;
          END;
        ELSE
        
          FOR LR_USED IN LC_USED LOOP
            IF LN_COUNT = LC_USED%ROWCOUNT THEN
              BEGIN
                UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                   SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY - NVL(LN_TOTAL_QTY, 0)
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'PROCESS_GROUP_QTY',
                      '***ERROR*** 更新齐套数量 006 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  RAISE LE_EXCEPTION;
              END;
            ELSE
              LN_TOTAL_QTY := NVL(LN_TOTAL_QTY, 0) + LR_USED.ALLOT_QTY;
              BEGIN
                UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                   SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LR_USED.ALLOT_QTY
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'PROCESS_GROUP_QTY',
                      '***ERROR*** 更新齐套数量 007 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  RAISE LE_EXCEPTION;
              END;
            END IF;
          END LOOP;
        END IF;
      --END IF;
    
    END IF;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := '2';
  END;
  /***********************************************************************************
   NAME: CALCULATE_GROUP_USED_QTY
   DESCRIPTION:计算替代组的各个物料的分配数量
  ***********************************************************************************/
  PROCEDURE CALCULATE_GROUP_USED_QTY(P_PLAN_ID         NUMBER,
                                     p_SR_INSTANCE_ID  NUMBER,
                                     P_ORGANIZATION_ID NUMBER,
                                     P_PLAN_QTY        NUMBER,
                                     P_ALLOT_FLAG      VARCHAR2,
                                     PO_ERROR_CODE     OUT VARCHAR2) IS
    CURSOR LC_ALLOT_QTY IS
      SELECT HEADER_ID, TOTAL_QTY, SORT_ORDER FROM CUX.CUX_MSC_GROUP_QTY_USED ORDER BY SORT_ORDER, TOTAL_QTY;
    /*SELECT HEADER_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 0 SORT_ORDER
      FROM CUX.CUX_MSC_GROUP_QTY_HEADER
     WHERE ZIRAN_FLAG = 'Y'
       AND NVL(LEVEL1_QTY, 0) > 0
    UNION ALL
    SELECT HEADER_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 1 SORT_ORDER
      FROM CUX.CUX_MSC_GROUP_QTY_HEADER
     WHERE ZIRAN_FLAG = 'Y'
       AND NVL(LEVEL2_QTY, 0) > 0
    UNION ALL
    SELECT HEADER_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 2
      FROM CUX.CUX_MSC_GROUP_QTY_HEADER
     WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
       AND NVL(LEVEL1_QTY, 0) > 0
    UNION ALL
    SELECT HEADER_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 3
      FROM CUX.CUX_MSC_GROUP_QTY_HEADER
     WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
       AND NVL(LEVEL2_QTY, 0) > 0
    UNION ALL
    SELECT HEADER_ID, NVL(LEVEL3_QTY, 0) TOTAL_QTY, 4
      FROM CUX.CUX_MSC_GROUP_QTY_HEADER
     WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
       AND NVL(LEVEL3_QTY, 0) > 0
     ORDER BY 3, 2;*/
  
    CURSOR LC_USED IS
      SELECT CMAB.ORG_ID,
             CMBI.INVENTORY_ITEM_ID,
             CMAB.MSC_VENDOR_ID,
             CMAB.MSC_VENDOR_SITE_ID,
             CMAB.CURRENT_ALLOCATION_QTY ALLOT_QTY
        FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
       WHERE CMAB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
         AND CMAB.CURRENT_ALLOCATION_QTY > 0
      --group by CMBI.INVENTORY_ITEM_ID, CMAB.ORG_ID
      ; --add by ray 20161221
  
    LN_PLAN_QTY         NUMBER;
    LN_OU_ID            NUMBER;
    LN_BID_NO_COUNT     NUMBER;
    LN_COUNT            NUMBER;
    LN_TOTAL_QTY        NUMBER;
    LN_TOTAL_PERCENTAGE NUMBER;
    LE_EXCEPTION EXCEPTION;
  BEGIN
  
    LN_PLAN_QTY := P_PLAN_QTY;
    DELETE CUX.CUX_MSC_GROUP_QTY_USED;
  
    INSERT INTO CUX.CUX_MSC_GROUP_QTY_USED
      (HEADER_ID, TOTAL_QTY, SORT_ORDER)
      SELECT HEADER_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 0 SORT_ORDER
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE ZIRAN_FLAG = 'Y'
         AND SIGN(NVL(LEVEL1_QTY, 0)) = 1;
  
    INSERT INTO CUX.CUX_MSC_GROUP_QTY_USED
      (HEADER_ID, TOTAL_QTY, SORT_ORDER)
      SELECT HEADER_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 1 SORT_ORDER
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE ZIRAN_FLAG = 'Y'
         AND SIGN(NVL(LEVEL2_QTY, 0)) = 1;
  
    INSERT INTO CUX.CUX_MSC_GROUP_QTY_USED
      (HEADER_ID, TOTAL_QTY, SORT_ORDER)
      SELECT HEADER_ID, NVL(LEVEL1_QTY, 0) TOTAL_QTY, 2
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND SIGN(NVL(LEVEL1_QTY, 0)) = 1;
  
    INSERT INTO CUX.CUX_MSC_GROUP_QTY_USED
      (HEADER_ID, TOTAL_QTY, SORT_ORDER)
      SELECT HEADER_ID, NVL(LEVEL2_QTY, 0) TOTAL_QTY, 3
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND SIGN(NVL(LEVEL2_QTY, 0)) = 1;
  
    INSERT INTO CUX.CUX_MSC_GROUP_QTY_USED
      (HEADER_ID, TOTAL_QTY, SORT_ORDER)
      SELECT HEADER_ID, NVL(LEVEL3_QTY, 0) TOTAL_QTY, 4
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER
       WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N'
         AND SIGN(NVL(LEVEL3_QTY, 0)) = 1;
  
    FOR LR_ALLOT_QTY IN LC_ALLOT_QTY LOOP
      IF LN_PLAN_QTY <= LR_ALLOT_QTY.TOTAL_QTY THEN
        UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
         WHERE CMGQ.HEADER_ID = LR_ALLOT_QTY.HEADER_ID;
        LN_PLAN_QTY := 0;
      ELSE
        UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LR_ALLOT_QTY.TOTAL_QTY
         WHERE CMGQ.HEADER_ID = LR_ALLOT_QTY.HEADER_ID;
        LN_PLAN_QTY := LN_PLAN_QTY - LR_ALLOT_QTY.TOTAL_QTY;
      END IF;
      IF LN_PLAN_QTY <= 0 THEN
        EXIT;
      END IF;
    END LOOP;
    --成套部分仍不能满足的部分分配
    --按比例分配剩余的部分
  
    IF LN_PLAN_QTY > 0 AND P_ALLOT_FLAG = 'Y' THEN
      BEGIN
        SELECT CMOR.ORG_ID
          INTO LN_OU_ID
          FROM CUX.CUX_MSC_ORG_RANGE CMOR
         WHERE CMOR.ORGANIZATION_ID = P_ORGANIZATION_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_OU_ID := 0;
        WHEN OTHERS THEN
          LN_OU_ID := 0;
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_OU',
                '***ERROR*** GET OU 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      END;  
    
      DELETE CUX.CUX_MSC_BID_ITEM_RANGE;
    
      INSERT INTO CUX.CUX_MSC_BID_ITEM_RANGE
        (INVENTORY_ITEM_ID, SUB_ITEM_TYPE, SUB_GROUP_ID)
        SELECT INVENTORY_ITEM_ID,
               ZIRAN_FLAG,
               (SELECT DISTINCT NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID)
                  FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB
                 WHERE CMGH.INVENTORY_ITEM_ID = CMB.MSC_INVENTORY_ITEM_ID
                   AND CMB.ORG_ID = LN_OU_ID) --Added by V1.029
          FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
          WHERE DECODE(NVL(ZIRAN_FLAG, 'N'), 'Y', 'Y', 'N') = 'N';--Added by V1.029
       
       --Added by V1.029
       DELETE CUX.CUX_MSC_BID_ITEM_RANGE CMBI
        WHERE NOT EXISTS (SELECT 1
                 FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI1
                WHERE CMBI1.SUB_GROUP_ID = CMBI.SUB_GROUP_ID
                  AND CMBI1.SUB_ITEM_TYPE = 'M')  ;
    /*Commented by V1.029
      BEGIN
        SELECT COUNT(DISTINCT NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID)), SUM(NVL(CMB.BID_PERCENTAGE, 0))
          INTO LN_BID_NO_COUNT, LN_TOTAL_PERCENTAGE
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND CMB.ORG_ID = LN_OU_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_BID_NO_COUNT := 0;
      END;
         
      
      IF LN_BID_NO_COUNT > 1 THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,'ALLOCAT_QTY','****Wanging****: 下面物料存在多个替代组！');
        FOR LR_ERROR IN (SELECT INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE) LOOP          
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'ALLOCAT_QTY',
              '***ERROR*** 物料 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ERROR.INVENTORY_ITEM_ID) || ' 存在多个分配组 ' ||
              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        END LOOP;
      ELSE*/
        IF GV_BUY_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 006 总需待按比例分配数量 ' || NVL(LN_PLAN_QTY, 0));
        
          BEGIN
            INSERT INTO CUX.CUX_MSC_FENPEI_DETAIL
              (INVENTORY_ITEM_ID,
               SUB_TYPE,
               SUPPLIER_ID,
               SUPPLIER_SITE_ID,
               BID_NO,
               TOTAL_PLAN_QTY,
               BID_PERCENTAGE,
               FENPEI_QTY,
               ORIGINAL_PR_QTY,
               ACTUAL_QTY)
              SELECT CMB.MSC_INVENTORY_ITEM_ID,
                     (SELECT CMGH.ZIRAN_FLAG
                        FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
                       WHERE CMGH.INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID),
                     CMB.MSC_VENDOR_ID,
                     CMB.MSC_VENDOR_SITE_ID,
                     CMB.BID_NO,
                     LN_PLAN_QTY,
                     CMB.BID_PERCENTAGE,
                     DECODE(LN_TOTAL_PERCENTAGE, 0, 0, ROUND(LN_PLAN_QTY * CMB.BID_PERCENTAGE / LN_TOTAL_PERCENTAGE, 6)),
                     CMB.LINE_ACTUAL_PR_QTY,
                     0
                FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
               WHERE 1 = 1
                 AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
                 AND CMB.ORG_ID = LN_OU_ID;
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'PROCESS_GROUP_QTY',
                  '***ERROR*** 采购件LOG 001 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              RAISE LE_EXCEPTION;
          END;
        END IF;
      
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.CURRENT_ALLOCATION_QTY = NULL
           WHERE 1 = 1
             AND CMB.ORG_ID = LN_OU_ID
             AND CMB.BID_NO IN (SELECT CMB1.BID_NO
                                  FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBIR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
                                 WHERE CMB1.MSC_INVENTORY_ITEM_ID = CMBIR.INVENTORY_ITEM_ID
                                   AND CMB1.ORG_ID = LN_OU_ID);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'PROCESS_GROUP_QTY',
                '***ERROR*** 更新招标表当前分配数量 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            RAISE LE_EXCEPTION;
        END;
        --开始计算分配比例
        PROCESS_ALLOCATION_QTY(LN_OU_ID, LN_PLAN_QTY);
      
        BEGIN
          SELECT COUNT(CMBI.INVENTORY_ITEM_ID)
            INTO LN_COUNT
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
           WHERE CMAB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
             AND CMAB.CURRENT_ALLOCATION_QTY > 0;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_COUNT := 0;
        END;
      
        IF LN_COUNT = 0 THEN
          BEGIN
            UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
               SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY
             WHERE NVL(ZIRAN_FLAG, 'N') = 'M';
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'PROCESS_GROUP_QTY',
                  '***ERROR*** 不存在分配，全部给主料 002 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                  SQLERRM);
              RAISE LE_EXCEPTION;
          END;
          IF GV_BUY_LOG_FLAG = 'Y' THEN
            BEGIN
              UPDATE CUX.CUX_MSC_FENPEI_DETAIL SET ACTUAL_QTY = LN_PLAN_QTY WHERE SUB_TYPE = 'M';
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'PROCESS_GROUP_QTY',
                    '***ERROR*** 采购件LOG 002 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                    SQLERRM);
                RAISE LE_EXCEPTION;
            END;
          END IF;
        ELSE
        
          FOR LR_USED IN LC_USED LOOP
            IF LN_COUNT = LC_USED%ROWCOUNT THEN
              BEGIN
                UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                   SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LN_PLAN_QTY - NVL(LN_TOTAL_QTY, 0)
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'PROCESS_GROUP_QTY',
                      '***ERROR*** 更新最后一笔分配量 002 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                      SQLERRM);
                  RAISE LE_EXCEPTION;
              END;
            
              BEGIN
                UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB
                   SET CURRENT_ALLOCATION_QTY = LN_PLAN_QTY - NVL(LN_TOTAL_QTY, 0)
                 WHERE CMB.MSC_INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID
                   AND NVL(CMB.MSC_VENDOR_ID, -9999) = NVL(LR_USED.MSC_VENDOR_ID, -9999)
                   AND NVL(CMB.MSC_VENDOR_SITE_ID, -9999) = NVL(LR_USED.MSC_VENDOR_SITE_ID, -9999)
                   AND CMB.ORG_ID = LR_USED.ORG_ID;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'PROCESS_GROUP_QTY',
                      '***ERROR*** 更新最后一笔招标比例分配量 002 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                      SQLERRM);
                  RAISE LE_EXCEPTION;
              END;
              IF GV_BUY_LOG_FLAG = 'Y' THEN
                BEGIN
                  UPDATE CUX.CUX_MSC_FENPEI_DETAIL
                     SET ACTUAL_QTY = LN_PLAN_QTY - NVL(LN_TOTAL_QTY, 0)
                   WHERE INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID
                     AND NVL(SUPPLIER_ID, -9999) = NVL(LR_USED.MSC_VENDOR_ID, -9999)
                     AND NVL(SUPPLIER_SITE_ID, -9999) = NVL(LR_USED.MSC_VENDOR_SITE_ID, -9999);
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'PROCESS_GROUP_QTY',
                        '***ERROR*** 采购件LOG 002 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                        SQLERRM);
                    RAISE LE_EXCEPTION;
                END;
              END IF;
            ELSE
              LN_TOTAL_QTY := NVL(LN_TOTAL_QTY, 0) + LR_USED.ALLOT_QTY;
              BEGIN
                UPDATE CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                   SET CMGQ.USED_QTY = NVL(CMGQ.USED_QTY, 0) + LR_USED.ALLOT_QTY
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'PROCESS_GROUP_QTY',
                      '***ERROR*** 更新分配量 003 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                      SQLERRM);
                  RAISE LE_EXCEPTION;
              END;
              IF GV_BUY_LOG_FLAG = 'Y' THEN
                BEGIN
                  UPDATE CUX.CUX_MSC_FENPEI_DETAIL
                     SET ACTUAL_QTY = LR_USED.ALLOT_QTY
                   WHERE INVENTORY_ITEM_ID = LR_USED.INVENTORY_ITEM_ID
                     AND NVL(SUPPLIER_ID, -9999) = NVL(LR_USED.MSC_VENDOR_ID, -9999)
                     AND NVL(SUPPLIER_SITE_ID, -9999) = NVL(LR_USED.MSC_VENDOR_SITE_ID, -9999);
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'PROCESS_GROUP_QTY',
                        '***ERROR*** 采购件LOG 003 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                        SQLERRM);
                    RAISE LE_EXCEPTION;
                END;
              END IF;
            END IF;
          END LOOP;
        END IF;
      --END IF;
    
    END IF;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := '2';
  END;

  /***********************************************************************************
   NAME: GET_ITEM_NAME
   DESCRIPTION:得到物料编码
  ***********************************************************************************/
  FUNCTION GET_ITEM_NAME(P_PLAN_ID           NUMBER,
                         p_SR_INSTANCE_ID    NUMBER,
                         P_ORGANIZATION_ID   NUMBER,
                         P_INVENTORY_ITEM_ID NUMBER) RETURN VARCHAR2 IS
    LV_ITEM_NAME MSC_SYSTEM_ITEMS.ITEM_NAME%TYPE;
  BEGIN
  
    BEGIN
      SELECT MSI.ITEM_NAME
        INTO LV_ITEM_NAME
        FROM MSC_SYSTEM_ITEMS MSI
       WHERE MSI.PLAN_ID = P_PLAN_ID
         AND MSI.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MSI.ORGANIZATION_ID = P_ORGANIZATION_ID
         AND MSI.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_ITEM_NAME := NULL;
    END;
  
    RETURN LV_ITEM_NAME;
  END GET_ITEM_NAME;

  /***********************************************************************************
   NAME: ALLOCATION_QTY
   DESCRIPTION:根据采购招标比例分配数量
  ***********************************************************************************/
  PROCEDURE ALLOCATION_QTY(P_PLAN_ID           NUMBER,
                           p_SR_INSTANCE_ID    NUMBER,
                           P_ORGANIZATION_ID   NUMBER,
                           P_INVENTORY_ITEM_ID NUMBER,
                           P_COMPONENT_SEQ_ID  NUMBER,
                           P_ALLOCATION_QTY    NUMBER) IS
    LN_BID_NO_COUNT NUMBER;
    LN_OU_ID        NUMBER;
  BEGIN
    DELETE CUX.CUX_MSC_BID_ITEM_RANGE;
  
    INSERT INTO CUX.CUX_MSC_BID_ITEM_RANGE (INVENTORY_ITEM_ID, SUB_ITEM_TYPE) VALUES (P_INVENTORY_ITEM_ID, 'M');
  
    INSERT INTO CUX.CUX_MSC_BID_ITEM_RANGE
      (INVENTORY_ITEM_ID, SUB_ITEM_TYPE)
      select MCS.SUBSTITUTE_ITEM_ID, 'N'
        from MSC_COMPONENT_SUBSTITUTES MCS, msc_bom_components MBC
       WHERE MCS.PLAN_ID = MBC.PLAN_ID
         AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
         AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
         AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
         AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID
         AND mcs.plan_id = -1
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
         and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'N';
  
    BEGIN
      SELECT CMOR.ORG_ID INTO LN_OU_ID FROM CUX.CUX_MSC_ORG_RANGE CMOR WHERE CMOR.ORGANIZATION_ID = P_ORGANIZATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_OU_ID := 0;
      WHEN OTHERS THEN
        LN_OU_ID := 0;
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_OU',
                '***ERROR*** GET OU 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
    END;
  
    BEGIN
      SELECT COUNT(DISTINCT NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID))
        INTO LN_BID_NO_COUNT
        FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
       WHERE 1 = 1
         AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
         AND CMB.ORG_ID = LN_OU_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_BID_NO_COUNT := 0;
    END;
  
    IF LN_BID_NO_COUNT > 1 THEN
      LOG(FND_GLOBAL.CONC_REQUEST_ID,
          'ALLOCAT_QTY',
          '***ERROR*** 物料 ' || GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_ORGANIZATION_ID, P_INVENTORY_ITEM_ID) ||
          ' 存在多个分配组 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    ELSE
    
      UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
         SET CMB.CURRENT_ALLOCATION_QTY = NULL
       WHERE 1 = 1
         AND CMB.ORG_ID = LN_OU_ID
         AND CMB.BID_NO IN (SELECT CMB1.BID_NO
                              FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBIR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
                             WHERE CMB1.MSC_INVENTORY_ITEM_ID = CMBIR.INVENTORY_ITEM_ID);
    
      --开始计算分配比例
      PROCESS_ALLOCATION_QTY(LN_OU_ID, P_ALLOCATION_QTY);
    END IF;
  
  END ALLOCATION_QTY;

  /***********************************************************************************
   NAME: PROCESS_ALLOCATION_QTY
   DESCRIPTION:根据采购招标或者SOURCE RULE分配数量
  ***********************************************************************************/
  PROCEDURE PROCESS_ALLOCATION_QTY(P_OU_ID NUMBER, P_ALLOCATION_QTY NUMBER) IS
  
    LV_SOURCE_TYPE        VARCHAR2(100);
    LN_GROUP_ID           NUMBER;
    LN_ACTUAL_TOTAL_QTY   NUMBER;
    LN_TOTAL_PERCENTAGE   NUMBER;
    LN_NEGATIVE_TOTAL_QTY NUMBER;
    LN_TOTAL_QTY          NUMBER;
    LN_ALL_PERCENTAGE     NUMBER;
    LN_TOTAL_QTY1         NUMBER; --Added by V1.026
    LN_ALL_PERCENTAGE1    NUMBER; --Added by V1.026
  BEGIN
  
    IF P_ALLOCATION_QTY > 0 THEN
      --计算参与计算的所有的分配比例和，实际采购总PR量
      BEGIN
        SELECT CMB.SOURCE_TYPE,
               NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID),
               SUM(NVL(CMB.BID_PERCENTAGE, 0)), --行理想比例
               SUM(NVL(CMB.LINE_ACTUAL_PR_QTY, 0)) --行实际总PR量
          INTO LV_SOURCE_TYPE, LN_GROUP_ID, LN_TOTAL_PERCENTAGE, LN_ACTUAL_TOTAL_QTY
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND CMB.ORG_ID = P_OU_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
         GROUP BY CMB.SOURCE_TYPE, NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_TOTAL_PERCENTAGE := 0;
          LN_ACTUAL_TOTAL_QTY := 0;
        WHEN OTHERS THEN
          LN_TOTAL_PERCENTAGE := 0;
          LN_ACTUAL_TOTAL_QTY := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);    
      END;
    
      IF LN_TOTAL_PERCENTAGE > 0 THEN
        --按照理想比例进行分配
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.CURRENT_ALLOCATION_QTY =
               (LN_ACTUAL_TOTAL_QTY + P_ALLOCATION_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_TOTAL_PERCENTAGE -
               NVL(CMB.LINE_ACTUAL_PR_QTY, 0)
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.MSC_INVENTORY_ITEM_ID IN (SELECT CMBI.INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI);
      ELSE
        --若总的分配比例为0 则全部分配给主料，若有多个供应商则随机取得一个
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.CURRENT_ALLOCATION_QTY = P_ALLOCATION_QTY
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND (CMB.MSC_INVENTORY_ITEM_ID, CMB.MSC_VENDOR_ID) IN
               (SELECT CMBI.INVENTORY_ITEM_ID, MAX(CMB1.MSC_VENDOR_ID)
                  FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
                 WHERE CMBI.INVENTORY_ITEM_ID = CMB1.MSC_INVENTORY_ITEM_ID
                   AND CMB1.ORG_ID = P_OU_ID
                   AND CMBI.SUB_ITEM_TYPE = 'M'
                   AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                       NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1)
                 GROUP BY CMBI.INVENTORY_ITEM_ID);
      END IF;
    
      BEGIN
        SELECT SUM(CMB.CURRENT_ALLOCATION_QTY)
          INTO LN_NEGATIVE_TOTAL_QTY
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.CURRENT_ALLOCATION_QTY < 0;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_NEGATIVE_TOTAL_QTY := 0;
      END;
    
      IF NVL(LN_NEGATIVE_TOTAL_QTY, 0) < 0 THEN
        --将分配为负数的部分更新为0
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.CURRENT_ALLOCATION_QTY = 0
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND CMB.MSC_INVENTORY_ITEM_ID IN (SELECT CMBI.INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI)
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.CURRENT_ALLOCATION_QTY < 0;
      
        --存在负数，循环计算，将负数量按比例分配给其他
        PROCESS_ALLOCATION_QTY(P_OU_ID, LN_NEGATIVE_TOTAL_QTY);
      ELSE
        --Added below by V1.026
        BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY1, LN_ALL_PERCENTAGE1
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) /*OR
                                  (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID)*/
                 )
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY1      := 0;
            LN_ALL_PERCENTAGE1 := 0;
          WHEN OTHERS THEN 
            LN_TOTAL_QTY1      := 0;
            LN_ALL_PERCENTAGE1 := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
      
        BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY, LN_ALL_PERCENTAGE
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ( /*(LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR*/
                  (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY      := 0;
            LN_ALL_PERCENTAGE := 0;
          WHEN OTHERS THEN 
            LN_TOTAL_QTY      := 0;
            LN_ALL_PERCENTAGE := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);  
        END;
        LN_TOTAL_QTY      := nvl(LN_TOTAL_QTY, 0) + nvl(LN_TOTAL_QTY1, 0);
        LN_ALL_PERCENTAGE := nvl(LN_ALL_PERCENTAGE, 0) + nvl(LN_ALL_PERCENTAGE1, 0);
      
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
                 CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
                 CMB.LINE_CUMULATED_PR_QTY    =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
                 CMB.LINE_PR_DIFF_QTY         =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
                 CMB.LINE_ACTUAL_PR_PERCENTAGE =
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
           WHERE 1 = 1
             AND CMB.ORG_ID = P_OU_ID
             AND LV_SOURCE_TYPE = '来源补充规则'
             AND CMB.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'UPDATE_BID',
                '***ERROR*** Update CUX_MSC_ASCP_BID_ACCUM_INFO_T 出现错误: ' || dbms_utility.format_error_backtrace() ||
                CHR(10) || SQLERRM);
        END;
      
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
                 CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
                 CMB.LINE_CUMULATED_PR_QTY    =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
                 CMB.LINE_PR_DIFF_QTY         =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
                 CMB.LINE_ACTUAL_PR_PERCENTAGE =
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
           WHERE 1 = 1
             AND CMB.ORG_ID = P_OU_ID
             AND LV_SOURCE_TYPE != '来源补充规则'
             AND CMB.SUBSTITUTE_GROUP_ID = LN_GROUP_ID
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'UPDATE_BID',
                '***ERROR*** Update CUX_MSC_ASCP_BID_ACCUM_INFO_T 出现错误: ' || dbms_utility.format_error_backtrace() ||
                CHR(10) || SQLERRM);
        END;
        --Added above by V1.026
        --Commented by V1.026
        /*BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY, LN_ALL_PERCENTAGE
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR
                 (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY := 0;
        END;
        
        --不存在负数，更新总的PR量，实际采购量，比例偏差
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
               CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
               CMB.LINE_CUMULATED_PR_QTY    =
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
               CMB.LINE_PR_DIFF_QTY         =
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
               (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
               CMB.LINE_ACTUAL_PR_PERCENTAGE =
               (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR
               (LV_SOURCE_TYPE != '来源补充规则' AND CMB.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);*/
      END IF;
    
    ELSE
      --计算参与计算的所有的分配比例和，实际采购总PR量
      BEGIN
        SELECT CMB.SOURCE_TYPE,
               NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID),
               SUM(NVL(CMB.BID_PERCENTAGE, 0)), --行理想比例
               SUM(NVL(CMB.LINE_ACTUAL_PR_QTY, 0)) --行实际总PR量
          INTO LV_SOURCE_TYPE, LN_GROUP_ID, LN_TOTAL_PERCENTAGE, LN_ACTUAL_TOTAL_QTY
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND CMB.CURRENT_ALLOCATION_QTY > 0
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
         GROUP BY CMB.SOURCE_TYPE, NVL(CMB.SUBSTITUTE_GROUP_ID, CMB.MSC_INVENTORY_ITEM_ID);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_TOTAL_PERCENTAGE := 0;
          LN_ACTUAL_TOTAL_QTY := 0;
        WHEN OTHERS THEN 
          LN_TOTAL_PERCENTAGE := 0;
          LN_ACTUAL_TOTAL_QTY := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
      END;
    
      IF LN_TOTAL_PERCENTAGE > 0 THEN
        --按照理想比例进行分配
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.CURRENT_ALLOCATION_QTY = CMB.CURRENT_ALLOCATION_QTY +
                                            P_ALLOCATION_QTY * NVL(CMB.BID_PERCENTAGE, 0) / LN_TOTAL_PERCENTAGE
         WHERE CMB.CURRENT_ALLOCATION_QTY > 0
           AND CMB.ORG_ID = P_OU_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.MSC_INVENTORY_ITEM_ID IN (SELECT CMBI.INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI);
      END IF;
    
      BEGIN
        SELECT SUM(CMB.CURRENT_ALLOCATION_QTY)
          INTO LN_NEGATIVE_TOTAL_QTY
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_BID_ITEM_RANGE CMBI
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND CMB.MSC_INVENTORY_ITEM_ID = CMBI.INVENTORY_ITEM_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.CURRENT_ALLOCATION_QTY < 0;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_NEGATIVE_TOTAL_QTY := 0;
      END;
    
      IF LN_NEGATIVE_TOTAL_QTY < 0 THEN
        --将分配为负数的部分更新为0
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.CURRENT_ALLOCATION_QTY = 0
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND CMB.MSC_INVENTORY_ITEM_ID IN (SELECT CMBI.INVENTORY_ITEM_ID FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBI)
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1)
           AND CMB.CURRENT_ALLOCATION_QTY < 0;
        --存在负数，循环计算，将负数量按比例分配给其他
        PROCESS_ALLOCATION_QTY(P_OU_ID, LN_NEGATIVE_TOTAL_QTY);
      ELSE
        --Added below by V1.026
        BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY1, LN_ALL_PERCENTAGE1
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) /* OR
                                  (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID)*/
                 )
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY1      := 0;
            LN_ALL_PERCENTAGE1 := 0;
          WHEN OTHERS THEN 
            LN_TOTAL_QTY1      := 0;
            LN_ALL_PERCENTAGE1 := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);  
        END;
      
        BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY, LN_ALL_PERCENTAGE
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ( /*(LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR*/
                  (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY      := 0;
            LN_ALL_PERCENTAGE := 0;
          WHEN OTHERS THEN 
            LN_TOTAL_QTY      := 0;
            LN_ALL_PERCENTAGE := 0;
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'GET_BID',
                '***ERROR*** GET BID 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);   
        END;
      
        LN_TOTAL_QTY      := nvl(LN_TOTAL_QTY, 0) + nvl(LN_TOTAL_QTY1, 0);
        LN_ALL_PERCENTAGE := nvl(LN_ALL_PERCENTAGE, 0) + nvl(LN_ALL_PERCENTAGE1, 0);
      
        --不存在负数，更新总的PR量，实际采购量，比例偏差
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
                 CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
                 CMB.LINE_CUMULATED_PR_QTY    =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
                 CMB.LINE_PR_DIFF_QTY         =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
                 CMB.LINE_ACTUAL_PR_PERCENTAGE =
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
           WHERE 1 = 1
             AND CMB.ORG_ID = P_OU_ID
             AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) /* OR
                                (LV_SOURCE_TYPE != '来源补充规则' AND CMB.SUBSTITUTE_GROUP_ID = LN_GROUP_ID)*/
                 )
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'UPDATE_BID',
                '***ERROR*** Update CUX_MSC_ASCP_BID_ACCUM_INFO_T 出现错误: ' || dbms_utility.format_error_backtrace() ||
                CHR(10) || SQLERRM);
        END;
      
        BEGIN
          UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
             SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
                 CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
                 CMB.LINE_CUMULATED_PR_QTY    =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
                 CMB.LINE_PR_DIFF_QTY         =
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
                 CMB.LINE_ACTUAL_PR_PERCENTAGE =
                 (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
                 (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
           WHERE 1 = 1
             AND CMB.ORG_ID = P_OU_ID
             AND ( /*(LV_SOURCE_TYPE = '来源补充规则' AND CMB.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR*/
                  (LV_SOURCE_TYPE != '来源补充规则' AND CMB.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'UPDATE_BID',
                '***ERROR*** Update CUX_MSC_ASCP_BID_ACCUM_INFO_T 出现错误: ' || dbms_utility.format_error_backtrace() ||
                CHR(10) || SQLERRM);
        END;
        --Added above by V1.026       
        /*--Commented by V1.026  
        BEGIN
          SELECT SUM(NVL(CMB1.CURRENT_ALLOCATION_QTY, 0)), SUM(NVL(CMB1.BID_PERCENTAGE, 0))
            INTO LN_TOTAL_QTY, LN_ALL_PERCENTAGE
            FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMB1
           WHERE 1 = 1
             AND CMB1.ORG_ID = P_OU_ID
             AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB1.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR
                 (LV_SOURCE_TYPE != '来源补充规则' AND CMB1.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
             AND TRUNC(SYSDATE) BETWEEN NVL(CMB1.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
                 NVL(CMB1.DISABLE_DATE, TRUNC(SYSDATE) + 1);
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_TOTAL_QTY := 0;
        END;
        
        --不存在负数，更新总的PR量，实际采购量，比例偏差
        UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb
           SET CMB.HEADER_CUMULATED_PR_QTY   = CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY,
               CMB.LINE_ACTUAL_PR_QTY        = CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0),
               CMB.LINE_CUMULATED_PR_QTY    =
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE,
               CMB.LINE_PR_DIFF_QTY         =
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) * NVL(CMB.BID_PERCENTAGE, 0) / LN_ALL_PERCENTAGE -
               (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)),
               CMB.LINE_ACTUAL_PR_PERCENTAGE =
               (CMB.LINE_ACTUAL_PR_QTY + NVL(CMB.CURRENT_ALLOCATION_QTY, 0)) /
               (CMB.HEADER_CUMULATED_PR_QTY + LN_TOTAL_QTY) - CMB.BID_PERCENTAGE
         WHERE 1 = 1
           AND CMB.ORG_ID = P_OU_ID
           AND ((LV_SOURCE_TYPE = '来源补充规则' AND CMB.MSC_INVENTORY_ITEM_ID = LN_GROUP_ID) OR
               (LV_SOURCE_TYPE != '来源补充规则' AND CMB.SUBSTITUTE_GROUP_ID = LN_GROUP_ID))
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);*/
      END IF;
    
    END IF;
  
  END PROCESS_ALLOCATION_QTY;

  /***********************************************************************************
   NAME: INSERT_WIP_MPS_DEMAND
   DESCRIPTION:INSERT工单部分需求
  ***********************************************************************************/
  PROCEDURE INSERT_WIP_MPS_DEMAND(P_SR_INSTANCE_ID NUMBER, P_PLAN_ID NUMBER) IS
    CURSOR LC_MAIN IS
      select CMS.*
        from CUX.CUX_MSC_SUPPLIES_SJ_T CMS
       where CMS.plan_id = -1
         and CMS.sr_instance_id = P_SR_INSTANCE_ID
         and CMS.order_type = 7 --7 非标准任务
         AND SIGN(CMS.REMAIN_QTY) = 1
      UNION ALL
      select CMS.*
        from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_MPS_RANGE CMMR
       where CMS.plan_id = -1
         and CMS.sr_instance_id = P_SR_INSTANCE_ID
         and CMS.order_type = 3 --7 工作单
         AND SIGN(CMS.REMAIN_QTY) = 1
         AND CMMR.ORGANIZATION_ID = CMS.ORGANIZATION_ID
         AND CMMR.INVENTORY_ITEM_ID = CMS.INVENTORY_ITEM_ID;
  
    LT_CUX_MSC_SUPPLIES GT_CUX_MSC_SUPPLIES_SJ := GT_CUX_MSC_SUPPLIES_SJ();
    /*LT_CUX_MSC_SUPPLIES_PLAN     GT_CUX_MSC_SUPPLIES_PLAN := GT_CUX_MSC_SUPPLIES_PLAN();
    LT_CUX_MSC_FULL_PEGGING_PLAN GT_CUX_MSC_FULL_PEGGING_PLAN := GT_CUX_MSC_FULL_PEGGING_PLAN();
    LT_CUX_MSC_DEMANDS_PLAN_NEW  GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();*/
    LN_TRANSACTION_ID NUMBER;
    LN_S_COUNT        NUMBER := 1;
    LN_P_COUNT        NUMBER := 1;
    LN_D_COUNT        NUMBER := 1;
    LN_PEGGING_ID     NUMBER;
    LV_BOM_FLAG       VARCHAR2(10); --Added by V1.018
    LN_MPS_COUNT      NUMBER := 0;
    LT_PEGGING_TEMP   CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP    CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP  CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    OPEN LC_MAIN;
    LOOP
      FETCH LC_MAIN bulk collect
        into LT_CUX_MSC_SUPPLIES LIMIT 5000;
    
      for r in 1 .. LT_CUX_MSC_SUPPLIES.count LOOP
        LN_MPS_COUNT := LN_MPS_COUNT + 1;
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
        
          LV_SUPPLIES_TEMP                           := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID                   := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
          LV_SUPPLIES_TEMP.ORGANIZATION_ID           := LT_CUX_MSC_SUPPLIES(R).ORGANIZATION_ID;
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := LT_CUX_MSC_SUPPLIES(R).SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LT_CUX_MSC_SUPPLIES(R).INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_SCHEDULE_DATE);
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_SCHEDULE_DATE);
          LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_WIP_START_DATE);
          LV_SUPPLIES_TEMP.DISPOSITION_ID            := LT_CUX_MSC_SUPPLIES(R).DISPOSITION_ID;
          LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEED_BY_DATE);
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_DOCK_DATE);
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_WIP_START_DATE);
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_ORDER_PLACEMENT_DATE);
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
          LV_SUPPLIES_TEMP.ORDER_TYPE                := LT_CUX_MSC_SUPPLIES(R).ORDER_TYPE;
          LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
          LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LT_CUX_MSC_SUPPLIES(R).REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LT_CUX_MSC_SUPPLIES(R).REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
          LV_SUPPLIES_TEMP.LINE_ID                   := LT_CUX_MSC_SUPPLIES(R).LINE_ID;
          LV_SUPPLIES_TEMP.ORDER_NUMBER              := LT_CUX_MSC_SUPPLIES(R).ORDER_NUMBER;
          LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LT_CUX_MSC_SUPPLIES(R).SCHEDULE_GROUP_ID;
          LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LT_CUX_MSC_SUPPLIES(R).QTY_SCRAPPED;
          LV_SUPPLIES_TEMP.QTY_COMPLETED             := LT_CUX_MSC_SUPPLIES(R).QTY_COMPLETED;
          LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LT_CUX_MSC_SUPPLIES(R).SCHEDULE_GROUP_NAME;
          LV_SUPPLIES_TEMP.UPDATED                   := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
          LV_SUPPLIES_TEMP.STATUS                    := 0;
          LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LT_CUX_MSC_SUPPLIES(R).WIP_STATUS_CODE;
          LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LT_CUX_MSC_SUPPLIES(R).ROUTING_SEQUENCE_ID;
          LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LT_CUX_MSC_SUPPLIES(R).BILL_SEQUENCE_ID;
          LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LT_CUX_MSC_SUPPLIES(R).WIP_START_QUANTITY;
          LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LT_CUX_MSC_SUPPLIES(R).SCHEDULE_PRIORITY;
          LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LT_CUX_MSC_SUPPLIES(R).REQUESTED_COMPLETION_DATE;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 001 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
      
        UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
           SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
         WHERE CMS.ROW_ID = LT_CUX_MSC_SUPPLIES(R).ROW_ID;
      
        --写入PEGGING数据
        BEGIN
          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
        
          LT_PEGGING_TEMP                        := NULL;
          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
          LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LT_CUX_MSC_SUPPLIES(R).REMAIN_QTY;
          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LT_CUX_MSC_SUPPLIES(R).REMAIN_QTY;
          LT_PEGGING_TEMP.END_ITEM_USAGE         := 1;
          LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_SCHEDULE_DATE); --可能要修改
          LT_PEGGING_TEMP.SUPPLY_TYPE            := LT_CUX_MSC_SUPPLIES(R).ORDER_TYPE;
          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LT_CUX_MSC_SUPPLIES(R).INVENTORY_ITEM_ID;
          LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_SUPPLIES(R).ORGANIZATION_ID;
          LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
          LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
          LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DEMAND_ID              := -1;
          LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_SUPPLIES(R).PROJECT_ID;
          LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_SUPPLIES(R).TASK_ID;
          LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_SUPPLIES(R).SR_INSTANCE_ID;
          LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_SUPPLIES(R).DEMAND_CLASS;
          LT_PEGGING_TEMP.UPDATED                := 0;
          LT_PEGGING_TEMP.STATUS                 := 2;
          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MFP',
                '***ERROR*** INSERT WIP FULL PEGGING 002 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
        --Added below by V1.018
        IF LT_CUX_MSC_SUPPLIES(R).order_type = 7 THEN
          LV_BOM_FLAG := 'N';
        ELSE
          LV_BOM_FLAG := 'Y';
        END IF;
        --Added above by V1.018
        --INSERT 入工作单需求部分 并用计划单去满足
        INSERT_WIP_DEMAND(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                          P_PLAN_ID               => P_PLAN_ID,
                          P_ORGANIZATION_ID       => LT_CUX_MSC_SUPPLIES(R).ORGANIZATION_ID,
                          P_WIP_ENTITY_ID         => LT_CUX_MSC_SUPPLIES(R).DISPOSITION_ID,
                          P_ASSY_ITEM_ID          => LT_CUX_MSC_SUPPLIES(R).INVENTORY_ITEM_ID,
                          P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                          P_END_PEGGING_ID        => LN_PEGGING_ID,
                          P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_WIP_START_DATE),
                          P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(LT_CUX_MSC_SUPPLIES(R).NEW_WIP_START_DATE),
                          P_END_ORIGINATION_TYPE  => NULL,
                          P_LEVEL_FLAG            => 0,
                          P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                          P_D_COUNT               => LN_D_COUNT,
                          P_S_COUNT               => LN_S_COUNT,
                          P_P_COUNT               => LN_P_COUNT);
      END LOOP;
      EXIT WHEN LC_MAIN%NOTFOUND;
    END LOOP;
    CLOSE LC_MAIN;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'MPS_COUNT', '总处理MPS工单记录数：' || LN_MPS_COUNT);
  END;

  /***********************************************************************************
   NAME: INSERT_WIP_DEMAND
   DESCRIPTION:INSERT工单部分需求
  ***********************************************************************************/
  PROCEDURE INSERT_WIP_DEMAND(P_SR_INSTANCE_ID        NUMBER,
                              P_PLAN_ID               NUMBER,
                              P_ORGANIZATION_ID       NUMBER,
                              P_WIP_ENTITY_ID         NUMBER,
                              P_ASSY_ITEM_ID          NUMBER,
                              P_PRV_PEGGING_ID        NUMBER,
                              P_END_PEGGING_ID        NUMBER,
                              P_ASSY_DEMAND_COMP_DATE DATE,
                              P_ASSY_DEMAND_DATE      DATE,
                              P_END_ORIGINATION_TYPE  NUMBER,
                              P_LEVEL_FLAG            NUMBER,
                              P_BOM_FLAG              VARCHAR2 DEFAULT 'Y', --Added by V1.018
                              P_D_COUNT               IN OUT NUMBER,
                              P_S_COUNT               IN OUT NUMBER,
                              P_P_COUNT               IN OUT NUMBER) IS
    CURSOR LC_WIP_DEMAND IS
      select CMD.*
        from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_DEMANDS_SJ_T CMD
       where CMS.plan_id = -1
         and CMS.sr_instance_id = p_SR_INSTANCE_ID
         and CMS.organization_id = P_ORGANIZATION_ID
            --AND SIGN(CMS.REMAIN_QTY) = 1
            --AND NVL(CMS.DJ_USED_FLAG, 'N') = 'N' --排除已经分配过的工单
         AND CMD.plan_id = -1
         AND CMD.ORIGINATION_TYPE IN (2, 3)
         and CMD.sr_instance_id = CMS.sr_instance_id
         AND CMD.WIP_ENTITY_ID = CMS.DISPOSITION_ID
         AND CMS.DISPOSITION_ID = P_WIP_ENTITY_ID;
    LV_PRIOR_FLAG     VARCHAR2(1);
    LN_DEMAND_ID      NUMBER;
    LN_TRANSACTION_ID NUMBER;
    /*LT_CUX_MSC_DEMANDS_PLAN_NEW  GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
    LT_CUX_MSC_SUPPLIES_PLAN     GT_CUX_MSC_SUPPLIES_PLAN := GT_CUX_MSC_SUPPLIES_PLAN();
    LT_CUX_MSC_FULL_PEGGING_PLAN GT_CUX_MSC_FULL_PEGGING_PLAN := GT_CUX_MSC_FULL_PEGGING_PLAN();*/
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_PLAN_QTY               NUMBER;
    LN_USED_QTY               NUMBER;
    LN_MAKE_BUY_CODE          NUMBER;
    LV_ITEM_TYPE              VARCHAR2(200);
    LV_ITEM_NAME              VARCHAR2(200);
    LN_LOW_LEVEL_CODE         NUMBER;
    LN_SOURCE_ORG_ID          NUMBER;
    LT_PEGGING_TEMP           CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP            CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP          CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
  
    FOR LR_WIP_DEMAND IN LC_WIP_DEMAND LOOP
    
      --判断此工作单需求物料是否为需要优先供应满足物料
    
      IF GET_MPS_FLAG(LR_WIP_DEMAND.ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) = 'N' THEN
      
        BEGIN
          SELECT GET_SOURCE_ORG(P_PLAN_ID,
                                P_SR_INSTANCE_ID,
                                LR_WIP_DEMAND.ORGANIZATION_ID,
                                LR_WIP_DEMAND.INVENTORY_ITEM_ID)
            INTO LN_SOURCE_ORG_ID
            FROM DUAL;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SOURCE_ORG_ID := -1;
        END;
      
        IF LN_SOURCE_ORG_ID = -1 THEN
          LN_SOURCE_ORG_ID := LR_WIP_DEMAND.ORGANIZATION_ID;
        END IF;
      
        BEGIN
          SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                 MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                 MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                 MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                 MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                 MSI.PLANNING_MAKE_BUY_CODE,
                 MSI.ATTRIBUTE1,
                 MSI.ITEM_NAME,
                 MSI.LOW_LEVEL_CODE
            INTO LN_SUB_PREPROCE_LEAD_TIME,
                 LN_SUB_POST_LEAD_TIME,
                 LN_SUB_FULL_LEAD_TIME,
                 LN_SUB_FIXED_LEAD_TIME,
                 LN_SUB_VARIA_LEAD_TIME,
                 LN_MAKE_BUY_CODE,
                 LV_ITEM_TYPE,
                 LV_ITEM_NAME,
                 LN_LOW_LEVEL_CODE
            FROM MSC_SYSTEM_ITEMS MSI
           WHERE MSI.plan_id = P_PLAN_ID
             AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
             AND MSI.ORGANIZATION_ID = LR_WIP_DEMAND.ORGANIZATION_ID
             AND MSI.INVENTORY_ITEM_ID = LR_WIP_DEMAND.INVENTORY_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_PREPROCE_LEAD_TIME := 0;
            LN_SUB_POST_LEAD_TIME     := 0;
            LN_SUB_FULL_LEAD_TIME     := 0;
            LN_SUB_FIXED_LEAD_TIME    := 0;
            LN_SUB_VARIA_LEAD_TIME    := 0;
        END;
      
        LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
        LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
        --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
        LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
        LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
        LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
      
        --先写入一笔工作单需求
        BEGIN
          SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
        
          LT_DEMAND_TEMP                                := NULL;
          LT_DEMAND_TEMP.ORDER_PRIORITY                 := LR_WIP_DEMAND.ORDER_PRIORITY;
          LT_DEMAND_TEMP.FORECAST_MAD                   := LR_WIP_DEMAND.FORECAST_MAD;
          LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
          LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LR_WIP_DEMAND.SCHEDULE_DESIGNATOR_ID;
          LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
          LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
          LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
          LT_DEMAND_TEMP.ORIGINATION_TYPE               := LR_WIP_DEMAND.ORIGINATION_TYPE; --工作单需求
          LT_DEMAND_TEMP.DEMAND_PRIORITY                := LR_WIP_DEMAND.DEMAND_PRIORITY;
          LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LR_WIP_DEMAND.SALES_ORDER_PRIORITY;
          LT_DEMAND_TEMP.FORECAST_PRIORITY              := LR_WIP_DEMAND.FORECAST_PRIORITY;
          LT_DEMAND_TEMP.PLANNING_GROUP                 := LR_WIP_DEMAND.PLANNING_GROUP;
          LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LR_WIP_DEMAND.DAILY_DEMAND_RATE;
          LT_DEMAND_TEMP.UNIT_NUMBER                    := LR_WIP_DEMAND.UNIT_NUMBER;
          LT_DEMAND_TEMP.DISPOSITION_ID                 := LR_WIP_DEMAND.DISPOSITION_ID;
          LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LR_WIP_DEMAND.USING_ASSEMBLY_ITEM_ID;
          LT_DEMAND_TEMP.PLAN_ID                        := P_PLAN_ID;
          LT_DEMAND_TEMP.ORGANIZATION_ID                := LR_WIP_DEMAND.ORGANIZATION_ID;
          LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
          LT_DEMAND_TEMP.PROJECT_ID                     := LR_WIP_DEMAND.PROJECT_ID;
          LT_DEMAND_TEMP.TASK_ID                        := LR_WIP_DEMAND.TASK_ID;
          LT_DEMAND_TEMP.CUSTOMER_ID                    := LR_WIP_DEMAND.CUSTOMER_ID;
          LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LR_WIP_DEMAND.CUSTOMER_SITE_ID;
          LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LR_WIP_DEMAND.SR_INSTANCE_ID;
          LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LR_WIP_DEMAND.SHIP_TO_SITE_ID;
          LT_DEMAND_TEMP.PROMISE_DATE                   := LR_WIP_DEMAND.PROMISE_DATE;
          LT_DEMAND_TEMP.SELLING_PRICE                  := LR_WIP_DEMAND.SELLING_PRICE;
          LT_DEMAND_TEMP.DMD_LATENESS_COST              := LR_WIP_DEMAND.DMD_LATENESS_COST;
          LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LR_WIP_DEMAND.DMD_SATISFIED_DATE;
          LT_DEMAND_TEMP.OP_SEQ_NUM                     := LR_WIP_DEMAND.OP_SEQ_NUM;
          LT_DEMAND_TEMP.UPDATED                        := LR_WIP_DEMAND.UPDATED;
          LT_DEMAND_TEMP.STATUS                         := LR_WIP_DEMAND.STATUS;
          LT_DEMAND_TEMP.APPLIED                        := LR_WIP_DEMAND.APPLIED;
          LT_DEMAND_TEMP.DEMAND_CLASS                   := LR_WIP_DEMAND.DEMAND_CLASS;
          LT_DEMAND_TEMP.FIRM_QUANTITY                  := LR_WIP_DEMAND.FIRM_QUANTITY;
          LT_DEMAND_TEMP.FIRM_DATE                      := LR_WIP_DEMAND.FIRM_DATE;
          LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LR_WIP_DEMAND.OLD_DEMAND_QUANTITY;
          LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LR_WIP_DEMAND.OLD_DEMAND_DATE;
          LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LR_WIP_DEMAND.ORGANIZATION_ID;
          LT_DEMAND_TEMP.RESERVATION_ID                 := LR_WIP_DEMAND.RESERVATION_ID;
          LT_DEMAND_TEMP.PARENT_ID                      := LR_WIP_DEMAND.PARENT_ID;
          LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LR_WIP_DEMAND.LENDING_PROJECT_ID;
          LT_DEMAND_TEMP.LENDING_TASK_ID                := LR_WIP_DEMAND.LENDING_TASK_ID;
          LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_WIP_DEMAND.SUBST_ITEM_FLAG; --替代料标记
          LT_DEMAND_TEMP.ORDER_NUMBER                   := LR_WIP_DEMAND.ORDER_NUMBER;
          LT_DEMAND_TEMP.RESERVED_QUANTITY              := LR_WIP_DEMAND.RESERVED_QUANTITY;
          LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
          LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
          LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
          LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
          LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
          LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
          LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
          LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
          LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
          LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LR_WIP_DEMAND.ATTRIBUTE_CATEGORY;
          LT_DEMAND_TEMP.ATTRIBUTE1                     := NULL;
          LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LR_WIP_DEMAND.WIP_ENTITY_ID;
          LT_DEMAND_TEMP.ISSUED_QUANTITY                := LR_WIP_DEMAND.ISSUED_QUANTITY;
          LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LR_WIP_DEMAND.REPETITIVE_SCHEDULE_ID;
          LT_DEMAND_TEMP.REFRESH_NUMBER                 := LR_WIP_DEMAND.REFRESH_NUMBER;
          LT_DEMAND_TEMP.REQUEST_DATE                   := LR_WIP_DEMAND.REQUEST_DATE;
          LT_DEMAND_TEMP.WIP_STATUS_CODE                := LR_WIP_DEMAND.WIP_STATUS_CODE;
          LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LR_WIP_DEMAND.WIP_SUPPLY_TYPE;
          LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LR_WIP_DEMAND.SOURCE_ORG_INSTANCE_ID;
          LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LR_WIP_DEMAND.SALES_ORDER_LINE_ID;
          LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LR_WIP_DEMAND.CONFIDENCE_PERCENTAGE;
          LT_DEMAND_TEMP.BUCKET_TYPE                    := LR_WIP_DEMAND.BUCKET_TYPE;
          LT_DEMAND_TEMP.BILL_ID                        := LR_WIP_DEMAND.BILL_ID;
          LT_DEMAND_TEMP.PROBABILITY                    := LR_WIP_DEMAND.PROBABILITY;
          LT_DEMAND_TEMP.FORECAST_SET_ID                := LR_WIP_DEMAND.FORECAST_SET_ID;
          LT_DEMAND_TEMP.GROUP_ID                       := LR_WIP_DEMAND.GROUP_ID;
          LT_DEMAND_TEMP.SERVICE_LEVEL                  := LR_WIP_DEMAND.SERVICE_LEVEL;
          LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LR_WIP_DEMAND.QUANTITY_BY_DUE_DATE;
          LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LR_WIP_DEMAND.TARGET_SAFETY_STOCK;
          LT_DEMAND_TEMP.SCENARIO_SET                   := LR_WIP_DEMAND.SCENARIO_SET;
          LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LR_WIP_DEMAND.DEMAND_SOURCE_TYPE;
          LT_DEMAND_TEMP.SUPPLY_ID                      := LR_WIP_DEMAND.SUPPLY_ID;
          LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LR_WIP_DEMAND.ORIGINAL_SYSTEM_REFERENCE;
          LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LR_WIP_DEMAND.ORIGINAL_SYSTEM_LINE_REFERENCE;
          LT_DEMAND_TEMP.STOLEN_FLAG                    := LR_WIP_DEMAND.STOLEN_FLAG;
          LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LR_WIP_DEMAND.OLD_USING_REQUIREMENT_QUANTITY;
          LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LR_WIP_DEMAND.OLD_USING_ASSEMBLY_DEMAND_DATE;
          LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LR_WIP_DEMAND.OLD_ASSEMBLY_DEMAND_COMP_DATE;
          LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LR_WIP_DEMAND.CUMMULATIVE_PROBABILITY;
          LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LR_WIP_DEMAND.ORIGINAL_ITEM_ID;
          LT_DEMAND_TEMP.UNMET_QUANTITY                 := LR_WIP_DEMAND.UNMET_QUANTITY;
          LT_DEMAND_TEMP.RECORD_SOURCE                  := LR_WIP_DEMAND.RECORD_SOURCE;
          LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LR_WIP_DEMAND.LINK_TO_LINE_ID;
          LT_DEMAND_TEMP.ERROR_TYPE                     := LR_WIP_DEMAND.ERROR_TYPE;
          LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LR_WIP_DEMAND.ATP_SYNCHRONIZATION_FLAG;
          LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_WIP_DEMAND.COMP_SEQ_ID;
          LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY;
          LT_DEMAND_TEMP.RELEASE_STATUS                 := LR_WIP_DEMAND.RELEASE_STATUS;
          LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LR_WIP_DEMAND.RESCHEDULE_FLAG;
          LT_DEMAND_TEMP.LOAD_TYPE                      := LR_WIP_DEMAND.LOAD_TYPE;
          LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LR_WIP_DEMAND.IMPLEMENT_ORG_ID;
          LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LR_WIP_DEMAND.IMPLEMENT_INSTANCE_ID;
          LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LR_WIP_DEMAND.IMPLEMENT_DATE;
          LT_DEMAND_TEMP.RELEASE_ERRORS                 := LR_WIP_DEMAND.RELEASE_ERRORS;
          LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LR_WIP_DEMAND.ORG_FIRM_FLAG;
          LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LR_WIP_DEMAND.ORIGINAL_ORG_ID;
          LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LR_WIP_DEMAND.ORIGINAL_INST_ID;
          LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LR_WIP_DEMAND.ARRIVAL_SET_ID;
          LT_DEMAND_TEMP.SHIP_SET_ID                    := LR_WIP_DEMAND.SHIP_SET_ID;
          LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LR_WIP_DEMAND.ORDER_DATE_TYPE_CODE;
          LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LR_WIP_DEMAND.SCHEDULE_ARRIVAL_DATE;
          LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LR_WIP_DEMAND.LATEST_ACCEPTABLE_DATE;
          LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LR_WIP_DEMAND.SHIPPING_METHOD_CODE;
          LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LR_WIP_DEMAND.PLANNED_ARRIVAL_DATE;
          LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LR_WIP_DEMAND.REQUEST_SHIP_DATE;
          LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LR_WIP_DEMAND.PROMISE_SHIP_DATE;
          LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LR_WIP_DEMAND.SCHEDULE_SHIP_DATE;
          LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LR_WIP_DEMAND.ORIGINAL_DEMAND_ID;
          LT_DEMAND_TEMP.ZONE_ID                        := LR_WIP_DEMAND.ZONE_ID;
          LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LR_WIP_DEMAND.ORIG_SHIPPING_METHOD_CODE;
          LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LR_WIP_DEMAND.INTRANSIT_LEAD_TIME;
          LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LR_WIP_DEMAND.ORIG_INTRANSIT_LEAD_TIME;
          LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LR_WIP_DEMAND.ATP_OVERRIDE_FLAG;
          LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LR_WIP_DEMAND.IMPLEMENT_FIRM;
          LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LR_WIP_DEMAND.IMPLEMENT_EARLIEST_DATE;
          LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LR_WIP_DEMAND.IMPLEMENT_ARRIVAL_DATE;
          LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LR_WIP_DEMAND.UNBUCKETED_DEMAND_DATE;
          LT_DEMAND_TEMP.ATO_LINE_ID                    := LR_WIP_DEMAND.ATO_LINE_ID;
          LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LR_WIP_DEMAND.TOP_MODEL_LINE_ID;
          LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LR_WIP_DEMAND.PARENT_MODEL_LINE_ID;
          LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LR_WIP_DEMAND.STD_MANDATORY_COMP_FLAG;
          LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LR_WIP_DEMAND.OLD_REFRESH_NUMBER;
          LT_DEMAND_TEMP.SHIP_METHOD                    := LR_WIP_DEMAND.SHIP_METHOD;
          LT_DEMAND_TEMP.SHIP_CALENDAR                  := LR_WIP_DEMAND.SHIP_CALENDAR;
          LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LR_WIP_DEMAND.RECEIVING_CALENDAR;
          LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LR_WIP_DEMAND.INTRANSIT_CALENDAR;
          LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LR_WIP_DEMAND.SHIP_TO_LOCATION_ID;
          LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LR_WIP_DEMAND.ORIGINAL_QUANTITY;
          LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LR_WIP_DEMAND.FINAL_USE_PRIORITY;
          LT_DEMAND_TEMP.FINAL_USE_DATE                 := LR_WIP_DEMAND.FINAL_USE_DATE;
          LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LR_WIP_DEMAND.ARRIVAL_SET_NAME;
          LT_DEMAND_TEMP.SHIP_SET_NAME                  := LR_WIP_DEMAND.SHIP_SET_NAME;
          LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LR_WIP_DEMAND.SOURCE_PHANTOM_ID;
          LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LR_WIP_DEMAND.PRIMARY_COMPONENT_ID;
          LT_DEMAND_TEMP.ATP_SESSION_ID                 := LR_WIP_DEMAND.ATP_SESSION_ID;
          LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LR_WIP_DEMAND.IMPLEMENT_SHIP_DATE;
          LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LR_WIP_DEMAND.PLANNED_SHIP_DATE;
          LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LR_WIP_DEMAND.PRIOR_ALLOCATION_QTY;
          LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LR_WIP_DEMAND.MANUAL_ALLOCATION_QTY;
          LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LR_WIP_DEMAND.MANUAL_ALLOCATION_DATE;
          LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LR_WIP_DEMAND.FIRM_ALLOCATION_FLAG;
          LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LR_WIP_DEMAND.ASSET_SERIAL_NUMBER;
          LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LR_WIP_DEMAND.ASSET_ITEM_ID;
          LT_DEMAND_TEMP.EXPIRATION_DATE                := LR_WIP_DEMAND.EXPIRATION_DATE;
          LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LR_WIP_DEMAND.SALES_ORDER_LINE_SPLIT;
          LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LR_WIP_DEMAND.PLANNED_INBOUND_DUE_DATE;
          LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LR_WIP_DEMAND.FILL_KILL_FLAG;
          LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LR_WIP_DEMAND.DEFINITION_LEVEL_USED;
          LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LR_WIP_DEMAND.DEMAND_FULFILLMENT_LEAD_TIME;
          LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LR_WIP_DEMAND.COMPONENT_SCALING_TYPE;
          LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LR_WIP_DEMAND.COMPONENT_YIELD_FACTOR;
          LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LR_WIP_DEMAND.SPLIT_FROM_DEMAND_ID;
          LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LR_WIP_DEMAND.PREV_SUBST_ITEM;
          LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LR_WIP_DEMAND.PREV_SUBST_ORG;
          LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LR_WIP_DEMAND.ITEM_TYPE_ID;
          LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LR_WIP_DEMAND.ITEM_TYPE_VALUE;
          LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LR_WIP_DEMAND.REPAIR_LINE_ID;
          LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LR_WIP_DEMAND.OTM_ARRIVAL_DATE;
          LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LR_WIP_DEMAND.WIP_ENTITY_NAME;
          LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LR_WIP_DEMAND.MIN_REM_SHELF_LIFE_DAYS;
          LT_DEMAND_TEMP.REVISED_DMD_DATE               := LR_WIP_DEMAND.REVISED_DMD_DATE;
          LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LR_WIP_DEMAND.REVISED_DMD_PRIORITY;
          LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LR_WIP_DEMAND.TOP_MODEL_ITEM_ID;
          LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LR_WIP_DEMAND.PARENT_MODEL_ITEM_ID;
          LT_DEMAND_TEMP.DAYS_LATE                      := LR_WIP_DEMAND.DAYS_LATE;
          LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LR_WIP_DEMAND.ORIG_FIRM_DATE;
          LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LR_WIP_DEMAND.ORIG_FIRM_QUANTITY;
          LT_DEMAND_TEMP.OBJECT_TYPE                    := LR_WIP_DEMAND.OBJECT_TYPE;
          LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LR_WIP_DEMAND.MAINTENANCE_OBJECT_SOURCE;
          --LN_D_COUNT := LN_D_COUNT + 1;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_WJ_MD',
                '***ERROR*** INSERT WIP DEMANDS 003 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' ITEM_ID=' ||
                LR_WIP_DEMAND.INVENTORY_ITEM_ID || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                SQLERRM);
          
        END;
      
        --若不是MPS物料则需要用供应去满足
      
        --若不是优先计算的则直接用计划单去满足
      
        --写入供应数据
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                        := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID                := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
          LV_SUPPLIES_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
          LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := LN_SOURCE_ORG_ID;
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := P_ASSY_DEMAND_COMP_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME); --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                       LN_SUB_FULL_LEAD_TIME);
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                                       LN_SUB_FULL_LEAD_TIME -
                                                                       LN_SUB_PREPROCE_LEAD_TIME);
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_WIP_ENTITY_ID;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
          LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
          LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
          LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
          LV_SUPPLIES_TEMP.UPDATED                 := 2;
          LV_SUPPLIES_TEMP.STATUS                  := 0;
          LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_WJ_MS',
                '***ERROR*** INSERT WIP SUPPLIES 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
      
        --写入PEGGING数据
        BEGIN
          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
        
          LT_PEGGING_TEMP                        := NULL;
          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
          LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
          LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY; --单位用量
          LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_WIP_DEMAND.USING_ASSEMBLY_DEMAND_DATE);
          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_WIP_DEMAND.ASSEMBLY_DEMAND_COMP_DATE); --可能要修改
          LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
          LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_WIP_DEMAND.ORGANIZATION_ID;
          LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
          LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
          LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
          LT_PEGGING_TEMP.PROJECT_ID             := LR_WIP_DEMAND.PROJECT_ID;
          LT_PEGGING_TEMP.TASK_ID                := LR_WIP_DEMAND.TASK_ID;
          LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
          LT_PEGGING_TEMP.DEMAND_CLASS           := LR_WIP_DEMAND.DEMAND_CLASS;
          LT_PEGGING_TEMP.UPDATED                := 0;
          LT_PEGGING_TEMP.STATUS                 := 2;
          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_WJ_MFP',
                '***ERROR*** INSERT WIP FULL PEGGINGS 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
      
        LT_DEMAND_TEMP.LOW_LEVEL_CODE         := LN_LOW_LEVEL_CODE;
        LT_DEMAND_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_DEMAND_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
        LT_DEMAND_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
        LT_DEMAND_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
        LT_DEMAND_TEMP.ALLOCATED_QUANTITY     := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
        LT_DEMAND_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_DEMAND_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_WIP_DEMAND.ASSEMBLY_DEMAND_COMP_DATE);
        LT_DEMAND_TEMP.ITEM_TYPE              := LV_ITEM_TYPE;
        LT_DEMAND_TEMP.ITEM_NAME              := LV_ITEM_NAME;
        LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE := LN_MAKE_BUY_CODE;
        LT_DEMAND_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY;
        INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
      
        --若为制造件 则需要把需求拓展到最下层
        IF P_BOM_FLAG = 'Y' THEN
          --Added by V1.018
          IF LN_LOW_LEVEL_CODE < 1000 THEN
            INSERT_BOM_EXPLOSION(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                 P_PLAN_ID               => P_PLAN_ID,
                                 P_ORGANIZATION_ID       => LR_WIP_DEMAND.ORGANIZATION_ID,
                                 P_ASSY_ITEM_ID          => LR_WIP_DEMAND.INVENTORY_ITEM_ID,
                                 P_ASSY_ITEM_QTY         => LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY,
                                 P_BOM_VER_DATE          => P_ASSY_DEMAND_DATE,
                                 P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                 P_END_PEGGING_ID        => P_END_PEGGING_ID,
                                 P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                            LN_SUB_POST_LEAD_TIME -
                                                                            LN_SUB_FULL_LEAD_TIME),
                                 P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                            LN_SUB_POST_LEAD_TIME -
                                                                            LN_SUB_FULL_LEAD_TIME),
                                 P_END_ORIGINATION_TYPE  => P_END_ORIGINATION_TYPE,
                                 P_ORGI_USAGE            => LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY,--Added by v1.027 初始单位用量
                                 P_D_COUNT               => LN_D_COUNT,
                                 P_S_COUNT               => LN_S_COUNT,
                                 P_P_COUNT               => LN_P_COUNT);
          END IF;
        END IF;
      END IF;
    END LOOP;
  
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  END;
  /***********************************************************************************
   NAME: INSERT_WIP_DEMANDS
   DESCRIPTION:INSERT工单部分需求--支持一个工单供应多个需求
  ***********************************************************************************/
  PROCEDURE INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        NUMBER,
                               P_PLAN_ID               NUMBER,
                               P_ORGANIZATION_ID       NUMBER,
                               P_WIP_ENTITY_ID         NUMBER,
                               P_ASSY_ITEM_ID          NUMBER,
                               P_PRV_PEGGING_ID        NUMBER,
                               P_END_PEGGING_ID        NUMBER,
                               P_ASSY_DEMAND_COMP_DATE DATE,
                               P_ASSY_DEMAND_DATE      DATE,
                               P_END_ORIGINATION_TYPE  NUMBER,
                               P_LEVEL_FLAG            NUMBER,
                               P_PLAN_QTY              NUMBER,
                               P_ACCESS_FLAG           VARCHAR DEFAULT 'N',
                               P_BOM_FLAG              VARCHAR2 DEFAULT 'Y',
                               P_ONLY_PEGGING_FLAG     VARCHAR2 DEFAULT 'N',
                               P_PRIOR_FLAG            VARCHAR2 DEFAULT 'N',
                               P_ORGI_USAGE            IN NUMBER DEFAULT 1,--Added by V1.027
                               P_D_COUNT               IN OUT NUMBER,
                               P_S_COUNT               IN OUT NUMBER,
                               P_P_COUNT               IN OUT NUMBER) IS
  
    CURSOR LC_WIP_DEMAND IS
      select CMD.*
        from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_DEMANDS_SJ_T CMD
       where CMS.plan_id = -1
         and CMS.sr_instance_id = p_SR_INSTANCE_ID
         and CMS.organization_id = P_ORGANIZATION_ID
         AND NVL(CMS.DJ_USED_FLAG, 'N') = 'N' --排除已经分配过的工单
         AND CMD.plan_id = -1
         AND CMD.ORIGINATION_TYPE IN (2, 3)
         and CMD.sr_instance_id = CMS.sr_instance_id
         AND CMD.WIP_ENTITY_ID = CMS.DISPOSITION_ID
         AND CMS.DISPOSITION_ID = P_WIP_ENTITY_ID;
  
    CURSOR LC_RDJ_SUPPLY(P_INVENTORY_ITEM_ID NUMBER, P_WIP_ENTITY_ID NUMBER) IS
      SELECT *
        FROM CUX.CUX_MSC_RDJ_SUPPLIES_T
       WHERE 1 = 1
         AND INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
         AND WIP_ENTITY_ID = P_WIP_ENTITY_ID
         AND SIGN(REMAIN_QTY) = 1
       ORDER BY SEQUENCE_ID;
    LV_PRIOR_FLAG             VARCHAR2(1);
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_PLAN_QTY               NUMBER;
    LN_USED_QTY               NUMBER;
    LN_MAKE_BUY_CODE          NUMBER;
    LV_ITEM_TYPE              VARCHAR2(200);
    LV_ITEM_NAME              VARCHAR2(200);
    LN_LOW_LEVEL_CODE         NUMBER;
    LN_SOURCE_ORG_ID          NUMBER;
    LN_REQUIRED_QTY           NUMBER;
    LN_TOTAL_PLAN_QTY         NUMBER;
    LT_PEGGING_TEMP           CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP            CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP          CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
  
    FOR LR_WIP_DEMAND IN LC_WIP_DEMAND LOOP
    
      --判断此工作单需求物料是否为需要优先供应满足物料
    
      IF GET_MPS_FLAG(LR_WIP_DEMAND.ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) = 'N' THEN
        --先计算每个物料本次需要的数量
      
        LN_REQUIRED_QTY := P_PLAN_QTY * LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY;
      
        IF LN_REQUIRED_QTY <= LR_WIP_DEMAND.ATTRIBUTE4 THEN
          LN_PLAN_QTY := 0;
        
          UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
             SET CMD.ATTRIBUTE4 = CMD.ATTRIBUTE4 - LN_REQUIRED_QTY
           WHERE CMD.plan_id = -1
             AND CMD.sr_instance_id = LR_WIP_DEMAND.sr_instance_id
             AND CMD.DEMAND_ID = LR_WIP_DEMAND.DEMAND_ID;
        ELSE
          LN_PLAN_QTY       := LN_REQUIRED_QTY - LR_WIP_DEMAND.ISSUED_QUANTITY;
          LN_TOTAL_PLAN_QTY := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY - TO_NUMBER(NVL(LR_WIP_DEMAND.ATTRIBUTE5, '0'));
          UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
             SET CMD.ATTRIBUTE4 = 0, --剩余ISSUED数量
                 CMD.ATTRIBUTE5 = NVL(CMD.ATTRIBUTE5, 0) + LN_PLAN_QTY --总分配数量
           WHERE CMD.plan_id = -1
             AND CMD.sr_instance_id = LR_WIP_DEMAND.sr_instance_id
             AND CMD.DEMAND_ID = LR_WIP_DEMAND.DEMAND_ID;
        
        END IF;
      
        IF LN_PLAN_QTY > 0 THEN
          --分配数量大于0则开始写供需
          LV_PRIOR_FLAG := 'N';
          IF P_ONLY_PEGGING_FLAG = 'Y' THEN
            LV_PRIOR_FLAG := 'Y';
          ELSE
            IF P_PRIOR_FLAG = 'Y' THEN
              LV_PRIOR_FLAG := 'Y';
            ELSE
              IF P_ACCESS_FLAG = 'N' THEN
              
                IF P_LEVEL_FLAG = 1 THEN
                  BEGIN
                    SELECT DISTINCT 'Y'
                      INTO LV_PRIOR_FLAG
                      FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL, CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
                     WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                       AND CMGH.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID
                       AND CMGL.INVENTORY_ITEM_ID = LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LV_PRIOR_FLAG := 'N';
                    WHEN OTHERS THEN
                      LV_PRIOR_FLAG := 'N';
                  END;
                END IF;
              
                IF P_LEVEL_FLAG = 2 THEN
                  BEGIN
                    SELECT DISTINCT 'Y'
                      INTO LV_PRIOR_FLAG
                      FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL, CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                     WHERE CMGD.LINE_ID = CMGL.LINE_ID
                       AND CMGL.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID
                       AND CMGD.INVENTORY_ITEM_ID = LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LV_PRIOR_FLAG := 'N';
                    WHEN OTHERS THEN
                      LV_PRIOR_FLAG := 'N';
                  END;
                END IF;
              
              ELSE
                BEGIN
                  SELECT DISTINCT 'Y'
                    INTO LV_PRIOR_FLAG
                    FROM CUX.CUX_MSC_WIP_ITEM_RANGE CMWT
                   WHERE 1 = 1
                     AND CMWT.WIP_ENTITY_ID = LR_WIP_DEMAND.WIP_ENTITY_ID
                     AND CMWT.LEVEL_NUMBER = P_LEVEL_FLAG
                     AND CMWT.INVENTORY_ITEM_ID = LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LV_PRIOR_FLAG := 'N';
                  WHEN OTHERS THEN
                    LV_PRIOR_FLAG := 'N';
                END;
              END IF;
            END IF;
          END IF;
          BEGIN
            SELECT GET_SOURCE_ORG(P_PLAN_ID,
                                  P_SR_INSTANCE_ID,
                                  LR_WIP_DEMAND.ORGANIZATION_ID,
                                  LR_WIP_DEMAND.INVENTORY_ITEM_ID)
              INTO LN_SOURCE_ORG_ID
              FROM DUAL;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SOURCE_ORG_ID := -1;
          END;
        
          IF LN_SOURCE_ORG_ID = -1 THEN
            LN_SOURCE_ORG_ID := LR_WIP_DEMAND.ORGANIZATION_ID;
          END IF;
        
          BEGIN
            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                   MSI.PLANNING_MAKE_BUY_CODE,
                   MSI.ATTRIBUTE1,
                   MSI.ITEM_NAME,
                   MSI.LOW_LEVEL_CODE
              INTO LN_SUB_PREPROCE_LEAD_TIME,
                   LN_SUB_POST_LEAD_TIME,
                   LN_SUB_FULL_LEAD_TIME,
                   LN_SUB_FIXED_LEAD_TIME,
                   LN_SUB_VARIA_LEAD_TIME,
                   LN_MAKE_BUY_CODE,
                   LV_ITEM_TYPE,
                   LV_ITEM_NAME,
                   LN_LOW_LEVEL_CODE
              FROM MSC_SYSTEM_ITEMS MSI
             WHERE MSI.plan_id = P_PLAN_ID
               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
               AND MSI.ORGANIZATION_ID = LR_WIP_DEMAND.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = LR_WIP_DEMAND.INVENTORY_ITEM_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SUB_PREPROCE_LEAD_TIME := 0;
              LN_SUB_POST_LEAD_TIME     := 0;
              LN_SUB_FULL_LEAD_TIME     := 0;
              LN_SUB_FIXED_LEAD_TIME    := 0;
              LN_SUB_VARIA_LEAD_TIME    := 0;
          END;
          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
          --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
          LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
        
          IF P_ONLY_PEGGING_FLAG = 'Y' THEN
            FOR LR_SUPPLY_RDJ IN LC_RDJ_SUPPLY(LR_WIP_DEMAND.INVENTORY_ITEM_ID, P_WIP_ENTITY_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_RDJ_SUPPLIES_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.SUPPLY_ROW_ID = LR_SUPPLY_RDJ.SUPPLY_ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_RDJ_SUPPLIES_T CMS
                   SET CMS.REMAIN_QTY = 0
                 WHERE CMS.SUPPLY_ROW_ID = LR_SUPPLY_RDJ.SUPPLY_ROW_ID;
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_SUPPLY_RDJ.DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.SUPPLY_QTY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := LR_SUPPLY_RDJ.DEMAND_DATE;
                LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_RDJ.SUPPLY_DATE; --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_RDJ.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LR_SUPPLY_RDJ.TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LR_SUPPLY_RDJ.TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LR_SUPPLY_RDJ.DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := NULL;
                LT_PEGGING_TEMP.TASK_ID                := NULL;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT WIP PEGGINGS 007 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              IF LN_PLAN_QTY <= 0 THEN
                LT_CUX_MSC_DEMANDS_PLAN_NEW(LN_D_COUNT).ATTRIBUTE1 := 'Y';
                LN_D_COUNT := LN_D_COUNT + 1;
                EXIT;
              END IF;
            END LOOP;
          
          ELSE
          
            --先写入一笔工作单需求
            IF LR_WIP_DEMAND.ATTRIBUTE2 IS NOT NULL THEN
              LN_DEMAND_ID := LR_WIP_DEMAND.ATTRIBUTE2;
            ELSE
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
            
              UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                 SET CMD.ATTRIBUTE2 = LN_DEMAND_ID --产生的DEMAND表的ID
               WHERE CMD.plan_id = -1
                 AND CMD.sr_instance_id = LR_WIP_DEMAND.sr_instance_id
                 AND CMD.DEMAND_ID = LR_WIP_DEMAND.DEMAND_ID;
            END IF;
          
            --写入DEMAND表
            BEGIN
              LT_DEMAND_TEMP                                := NULL;
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := LR_WIP_DEMAND.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := LR_WIP_DEMAND.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LR_WIP_DEMAND.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := LR_WIP_DEMAND.ORIGINATION_TYPE; --工作单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := LR_WIP_DEMAND.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LR_WIP_DEMAND.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := LR_WIP_DEMAND.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := LR_WIP_DEMAND.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LR_WIP_DEMAND.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := LR_WIP_DEMAND.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := LR_WIP_DEMAND.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LR_WIP_DEMAND.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := LR_WIP_DEMAND.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
              LT_DEMAND_TEMP.PROJECT_ID                     := LR_WIP_DEMAND.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := LR_WIP_DEMAND.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := LR_WIP_DEMAND.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LR_WIP_DEMAND.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LR_WIP_DEMAND.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LR_WIP_DEMAND.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := LR_WIP_DEMAND.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := LR_WIP_DEMAND.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := LR_WIP_DEMAND.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LR_WIP_DEMAND.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := LR_WIP_DEMAND.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := LR_WIP_DEMAND.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := LR_WIP_DEMAND.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := LR_WIP_DEMAND.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := LR_WIP_DEMAND.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := LR_WIP_DEMAND.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := LR_WIP_DEMAND.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LR_WIP_DEMAND.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LR_WIP_DEMAND.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LR_WIP_DEMAND.ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := LR_WIP_DEMAND.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := LR_WIP_DEMAND.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LR_WIP_DEMAND.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := LR_WIP_DEMAND.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_WIP_DEMAND.SUBST_ITEM_FLAG; --替代料标记
              LT_DEMAND_TEMP.ORDER_NUMBER                   := LR_WIP_DEMAND.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := LR_WIP_DEMAND.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LR_WIP_DEMAND.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LR_WIP_DEMAND.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := LR_WIP_DEMAND.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LR_WIP_DEMAND.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := LR_WIP_DEMAND.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := LR_WIP_DEMAND.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := LR_WIP_DEMAND.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LR_WIP_DEMAND.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LR_WIP_DEMAND.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LR_WIP_DEMAND.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LR_WIP_DEMAND.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := LR_WIP_DEMAND.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := LR_WIP_DEMAND.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := LR_WIP_DEMAND.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := LR_WIP_DEMAND.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := LR_WIP_DEMAND.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := LR_WIP_DEMAND.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LR_WIP_DEMAND.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LR_WIP_DEMAND.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := LR_WIP_DEMAND.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LR_WIP_DEMAND.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := LR_WIP_DEMAND.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LR_WIP_DEMAND.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LR_WIP_DEMAND.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := LR_WIP_DEMAND.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LR_WIP_DEMAND.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LR_WIP_DEMAND.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LR_WIP_DEMAND.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LR_WIP_DEMAND.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LR_WIP_DEMAND.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := LR_WIP_DEMAND.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := LR_WIP_DEMAND.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LR_WIP_DEMAND.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := LR_WIP_DEMAND.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LR_WIP_DEMAND.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_WIP_DEMAND.COMP_SEQ_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := LR_WIP_DEMAND.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LR_WIP_DEMAND.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := LR_WIP_DEMAND.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LR_WIP_DEMAND.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LR_WIP_DEMAND.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LR_WIP_DEMAND.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := LR_WIP_DEMAND.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LR_WIP_DEMAND.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LR_WIP_DEMAND.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LR_WIP_DEMAND.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LR_WIP_DEMAND.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := LR_WIP_DEMAND.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LR_WIP_DEMAND.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LR_WIP_DEMAND.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LR_WIP_DEMAND.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LR_WIP_DEMAND.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LR_WIP_DEMAND.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LR_WIP_DEMAND.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LR_WIP_DEMAND.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LR_WIP_DEMAND.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LR_WIP_DEMAND.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := LR_WIP_DEMAND.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LR_WIP_DEMAND.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LR_WIP_DEMAND.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LR_WIP_DEMAND.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LR_WIP_DEMAND.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LR_WIP_DEMAND.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LR_WIP_DEMAND.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LR_WIP_DEMAND.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LR_WIP_DEMAND.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := LR_WIP_DEMAND.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LR_WIP_DEMAND.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LR_WIP_DEMAND.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LR_WIP_DEMAND.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LR_WIP_DEMAND.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := LR_WIP_DEMAND.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := LR_WIP_DEMAND.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LR_WIP_DEMAND.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LR_WIP_DEMAND.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LR_WIP_DEMAND.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LR_WIP_DEMAND.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LR_WIP_DEMAND.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := LR_WIP_DEMAND.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LR_WIP_DEMAND.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := LR_WIP_DEMAND.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LR_WIP_DEMAND.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LR_WIP_DEMAND.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := LR_WIP_DEMAND.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LR_WIP_DEMAND.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LR_WIP_DEMAND.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LR_WIP_DEMAND.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LR_WIP_DEMAND.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LR_WIP_DEMAND.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LR_WIP_DEMAND.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LR_WIP_DEMAND.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LR_WIP_DEMAND.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := LR_WIP_DEMAND.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LR_WIP_DEMAND.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LR_WIP_DEMAND.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LR_WIP_DEMAND.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LR_WIP_DEMAND.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LR_WIP_DEMAND.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LR_WIP_DEMAND.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LR_WIP_DEMAND.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LR_WIP_DEMAND.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LR_WIP_DEMAND.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LR_WIP_DEMAND.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LR_WIP_DEMAND.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LR_WIP_DEMAND.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LR_WIP_DEMAND.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LR_WIP_DEMAND.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LR_WIP_DEMAND.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LR_WIP_DEMAND.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := LR_WIP_DEMAND.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LR_WIP_DEMAND.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LR_WIP_DEMAND.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LR_WIP_DEMAND.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := LR_WIP_DEMAND.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LR_WIP_DEMAND.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LR_WIP_DEMAND.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := LR_WIP_DEMAND.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LR_WIP_DEMAND.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.SUPPLY_DATE                    := LR_WIP_DEMAND.ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.ITEM_TYPE                      := LV_ITEM_TYPE;
              LT_DEMAND_TEMP.ITEM_NAME                      := LV_ITEM_NAME;
              LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE         := LN_MAKE_BUY_CODE;
              LT_DEMAND_TEMP.LOW_LEVEL_CODE                 := LN_LOW_LEVEL_CODE;
              --LN_D_COUNT := LN_D_COUNT + 1;
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_WJ_MD',
                    '***ERROR*** INSERT WIP DEMANDS 003 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' ITEM_ID=' ||
                    LR_WIP_DEMAND.INVENTORY_ITEM_ID || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
                    SQLERRM);
              
            END;
          
            IF LV_PRIOR_FLAG = 'N' THEN
            
              --若不是优先计算的则直接用计划单去满足
              --先判断是否已经写入供应数据
              IF LR_WIP_DEMAND.ATTRIBUTE3 IS NOT NULL THEN
                BEGIN
                  SELECT TRANSACTION_ID
                    INTO LN_TRANSACTION_ID
                    FROM CUX.CUX_MSC_DEMANDS_PLAN_WIP_T
                   WHERE DEMAND_ID = LN_DEMAND_ID
                     AND VENDOR_ID IS NULL
                     AND VENDOR_SITE_ID IS NULL;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LN_TRANSACTION_ID := -1;
                END;
              ELSE
              
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
              
                UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                   SET CMD.ATTRIBUTE3 = 'Y'
                 WHERE CMD.plan_id = -1
                   AND CMD.sr_instance_id = LR_WIP_DEMAND.sr_instance_id
                   AND CMD.DEMAND_ID = LR_WIP_DEMAND.DEMAND_ID;
              
                INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_WIP_T
                  (DEMAND_ID, VENDOR_ID, VENDOR_SITE_ID, TRANSACTION_ID, TRANSACTION_QTY)
                VALUES
                  (LN_DEMAND_ID, NULL, NULL, LN_TRANSACTION_ID, LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY);
                --写入供应数据
                BEGIN
                  LV_SUPPLIES_TEMP                        := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID                := P_PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := LN_SOURCE_ORG_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := P_ASSY_DEMAND_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_WIP_ENTITY_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                  LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                  LV_SUPPLIES_TEMP.UPDATED                 := 2;
                  LV_SUPPLIES_TEMP.STATUS                  := 0;
                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_WJ_MS',
                        '***ERROR*** INSERT WIP SUPPLIES 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_PLAN_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_WIP_DEMAND.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_WIP_DEMAND.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_WIP_DEMAND.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_WIP_DEMAND.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_WJ_MFP',
                      '***ERROR*** INSERT WIP FULL PEGGINGS 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                      ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              LT_DEMAND_TEMP.ATTRIBUTE1           := NULL;
              LT_DEMAND_TEMP.PEGGING_ID           := LN_PEGGING_ID;
              LT_DEMAND_TEMP.END_ORIGINATION_TYPE := P_END_ORIGINATION_TYPE;
              LT_DEMAND_TEMP.PREV_PEGGING_ID      := P_PRV_PEGGING_ID;
              LT_DEMAND_TEMP.END_PEGGING_ID       := P_END_PEGGING_ID;
              LT_DEMAND_TEMP.ALLOCATED_QUANTITY   := LN_PLAN_QTY;
              LT_DEMAND_TEMP.TRANSACTION_ID       := LN_TRANSACTION_ID;
              LT_DEMAND_TEMP.END_ITEM_USAGE       := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            
              --若为制造件 则需要把需求拓展到最下层
              IF P_BOM_FLAG = 'Y' THEN
                --Added by V1.018
                IF LN_LOW_LEVEL_CODE < 1000 THEN
                  INSERT_BOM_EXPLOSION(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                       P_PLAN_ID               => P_PLAN_ID,
                                       P_ORGANIZATION_ID       => LR_WIP_DEMAND.ORGANIZATION_ID, --LN_SOURCE_ORG_ID,
                                       P_ASSY_ITEM_ID          => LR_WIP_DEMAND.INVENTORY_ITEM_ID,
                                       P_ASSY_ITEM_QTY         => LN_PLAN_QTY,
                                       P_BOM_VER_DATE          => P_ASSY_DEMAND_DATE,
                                       P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                       P_END_PEGGING_ID        => P_END_PEGGING_ID,
                                       P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                                  LN_SUB_POST_LEAD_TIME -
                                                                                  LN_SUB_FULL_LEAD_TIME),
                                       P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                                  LN_SUB_POST_LEAD_TIME -
                                                                                  LN_SUB_FULL_LEAD_TIME),
                                       P_END_ORIGINATION_TYPE  => P_END_ORIGINATION_TYPE,
                                       P_ORGI_USAGE            => LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE,--初始单位用量--Added by v1.027
                                       P_D_COUNT               => LN_D_COUNT,
                                       P_S_COUNT               => LN_S_COUNT,
                                       P_P_COUNT               => LN_P_COUNT);
                END IF;
              END IF;
            
            ELSE
              --PCB 错阶的下阶需要优先考虑的物料
            
              --冲减现有量
              FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
                
                  LN_USED_QTY := LN_PLAN_QTY;
                  LN_PLAN_QTY := 0;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                END IF;
              
                --写入供应数据
                IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                  
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                    LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                    LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.REMAIN_QTY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.REMAIN_QTY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                    LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                    LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                    LV_SUPPLIES_TEMP.UPDATED                 := 2;
                    LV_SUPPLIES_TEMP.STATUS                  := 0;
                    LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT WIP SUPPLIES 006 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                
                END IF;
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_OH.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := NULL;
                  LT_PEGGING_TEMP.TASK_ID                := NULL;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT WIP PEGGINGS 007 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
                IF LN_PLAN_QTY <= 0 THEN
                  LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
                  LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                  INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                  EXIT;
                END IF;
              END LOOP;
            
              --若现有量不能满足需求则用工单的副需求去满足
              IF LN_PLAN_QTY > 0 THEN
                --冲减对应的工单，按照工单的开工日期，工单ID排序
                FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  END IF;
                  IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP SUPPLIES 008 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RDJ.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RDJ.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RDJ.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT WIP PEGGINGS 009 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
                    LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用在途部分去满足
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  END IF;
                
                  IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP SUPPLIES 010 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT WIP PEGGINGS 011 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
                    LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PO部分去满足
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  END IF;
                
                  IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP SUPPLIES 012 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY* P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT WIP PEGGINGS 013 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
                    LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PR部分去满足
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_WIP_DEMAND.INVENTORY_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  END IF;
                
                  IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP SUPPLIES 014 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT WIP PEGGINGS 015 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
                    LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              IF LN_PLAN_QTY > 0 THEN
                --最后仍不能满足 用计划单去满足
                --此处不计算供应商资料
                IF LR_WIP_DEMAND.ATTRIBUTE3 IS NOT NULL THEN
                  BEGIN
                    SELECT TRANSACTION_ID
                      INTO LN_TRANSACTION_ID
                      FROM CUX.CUX_MSC_DEMANDS_PLAN_WIP_T
                     WHERE DEMAND_ID = LN_DEMAND_ID
                       AND VENDOR_ID IS NULL
                       AND VENDOR_SITE_ID IS NULL;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LN_TRANSACTION_ID := -1;
                  END;
                ELSE
                
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                     SET CMD.ATTRIBUTE3 = 'Y'
                   WHERE CMD.plan_id = -1
                     AND CMD.sr_instance_id = LR_WIP_DEMAND.sr_instance_id
                     AND CMD.DEMAND_ID = LR_WIP_DEMAND.DEMAND_ID;
                
                  INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_WIP_T
                    (DEMAND_ID, VENDOR_ID, VENDOR_SITE_ID, TRANSACTION_ID, TRANSACTION_QTY)
                  VALUES
                    (LN_DEMAND_ID,
                     NULL,
                     NULL,
                     LN_TRANSACTION_ID,
                     LN_PLAN_QTY
                     --LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY
                     );
                  --写入供应数据
                  BEGIN
                    LV_SUPPLIES_TEMP                        := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID                := P_PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := LN_SOURCE_ORG_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := P_ASSY_DEMAND_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_WIP_ENTITY_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                    LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                    LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_PLAN_QTY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_PLAN_QTY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                    LV_SUPPLIES_TEMP.UPDATED                 := 2;
                    LV_SUPPLIES_TEMP.STATUS                  := 0;
                    LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_WJ_MS',
                          '***ERROR*** INSERT WIP SUPPLIES 004 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  END;
                END IF;
              
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_WIP_DEMAND.USING_REQUIREMENT_QUANTITY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_PLAN_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_WIP_DEMAND.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_WIP_DEMAND.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LR_WIP_DEMAND.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LR_WIP_DEMAND.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LR_WIP_DEMAND.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_WJ_MFP',
                        '***ERROR*** INSERT WIP FULL PEGGINGS 005 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
                LT_DEMAND_TEMP.ATTRIBUTE1           := NULL;
                LT_DEMAND_TEMP.PEGGING_ID           := LN_PEGGING_ID;
                LT_DEMAND_TEMP.END_ORIGINATION_TYPE := P_END_ORIGINATION_TYPE;
                LT_DEMAND_TEMP.PREV_PEGGING_ID      := P_PRV_PEGGING_ID;
                LT_DEMAND_TEMP.END_PEGGING_ID       := P_END_PEGGING_ID;
                LT_DEMAND_TEMP.ALLOCATED_QUANTITY   := LN_PLAN_QTY;
                LT_DEMAND_TEMP.TRANSACTION_ID       := LN_TRANSACTION_ID;
                LT_DEMAND_TEMP.END_ITEM_USAGE       := LR_WIP_DEMAND.QUANTITY_PER_ASSEMBLY * P_ORGI_USAGE; --Added P_ORGI_USAGE by v1.027
                INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
              END IF;
            
            END IF;
          END IF;
        END IF;
      END IF;
    END LOOP;
  
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  
  END;

  /***********************************************************************************
   NAME: INSERT_BOM_DEMAND
   DESCRIPTION:INSERT BOM需求
  ***********************************************************************************/
  PROCEDURE INSERT_BOM_DEMAND(P_SR_INSTANCE_ID        NUMBER,
                              P_PLAN_ID               NUMBER,
                              P_ORGANIZATION_ID       NUMBER,
                              P_ASSY_ITEM_ID          NUMBER,
                              P_ASSY_ITEM_QTY         NUMBER,
                              P_BOM_VER_DATE          DATE,
                              P_PRV_PEGGING_ID        NUMBER,
                              P_END_PEGGING_ID        NUMBER,
                              P_ASSY_DEMAND_COMP_DATE DATE,
                              P_ASSY_DEMAND_DATE      DATE,
                              P_END_ORIGINATION_TYPE  NUMBER,
                              P_LEVEL_FLAG            NUMBER,
                              P_ASSY_USED_QTY         OUT NUMBER,
                              P_PCBA_FLAG             IN VARCHAR2 DEFAULT 'N', --Added by V1.008 as calculate sub PCB item qty
                              P_ORGI_USAGE            IN NUMBER DEFAULT 1,--Added by V1.027
                              P_D_COUNT               IN OUT NUMBER,
                              P_S_COUNT               IN OUT NUMBER,
                              P_P_COUNT               IN OUT NUMBER) IS
    CURSOR LC_BOM IS
      select MBC.INVENTORY_ITEM_ID, MBC.USAGE_QUANTITY, MBC.COMPONENT_SEQUENCE_ID, MBC.OPERATION_SEQ_NUM
        from msc_bom_components mbc, msc_boms mb
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and mb.plan_id = P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1);
    --Added by V1.023
    CURSOR LC_SECOND_BOM(P_PLAN_ID         NUMBER,
                         p_SR_INSTANCE_ID  NUMBER,
                         P_ORGANIZATION_ID NUMBER,
                         P_ASSY_ITEM_ID    NUMBER,
                         P_BOM_VER_DATE    DATE) IS
      select MBC.INVENTORY_ITEM_ID, MBC.USAGE_QUANTITY, MBC.COMPONENT_SEQUENCE_ID, MBC.OPERATION_SEQ_NUM
        from msc_bom_components mbc, msc_boms mb
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and mb.plan_id = P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1);
  
    LV_PRIOR_FLAG     VARCHAR2(1);
    LN_DEMAND_ID      NUMBER;
    LN_TRANSACTION_ID NUMBER;
    /*LT_CUX_MSC_DEMANDS_PLAN_NEW  GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
    LT_CUX_MSC_SUPPLIES_PLAN     GT_CUX_MSC_SUPPLIES_PLAN := GT_CUX_MSC_SUPPLIES_PLAN();
    LT_CUX_MSC_FULL_PEGGING_PLAN GT_CUX_MSC_FULL_PEGGING_PLAN := GT_CUX_MSC_FULL_PEGGING_PLAN();*/
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_PLAN_QTY               NUMBER;
    LN_USED_QTY               NUMBER;
    LN_ASSY_USED_QTY          NUMBER;
    LN_MAKE_BUY_CODE          NUMBER;
    LV_ITEM_TYPE              VARCHAR2(200);
    LV_ITEM_NAME              VARCHAR2(200);
    LN_LOW_LEVEL_CODE         NUMBER;
    --Added below by V1.023
    LN_2_PREPROCE_LEAD_TIME NUMBER;
    LN_2_POST_LEAD_TIME     NUMBER;
    LN_2_FULL_LEAD_TIME     NUMBER;
    LN_2_FIXED_LEAD_TIME    NUMBER;
    LN_2_VARIA_LEAD_TIME    NUMBER;
    LD_2_DEMAND_DATE        DATE;
    LN_2_PEGGING_ID         NUMBER;
    --Added above by V1.023
    LT_PEGGING_TEMP  CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP   CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
  
    FOR LR_BOM IN LC_BOM LOOP
      --判断此工作单需求物料是否为需要优先供应满足物料
      IF P_LEVEL_FLAG = 1 THEN
        BEGIN
          SELECT DISTINCT 'Y'
            INTO LV_PRIOR_FLAG
            FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL, CUX.CUX_MSC_GROUP_QTY_HEADER CMGH
           WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
             AND CMGH.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID
             AND CMGL.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_PRIOR_FLAG := 'N';
          WHEN OTHERS THEN
            LV_PRIOR_FLAG := 'N';
        END;
      END IF;
    
      IF P_LEVEL_FLAG = 2 THEN
        BEGIN
          SELECT DISTINCT 'Y'
            INTO LV_PRIOR_FLAG
            FROM CUX.CUX_MSC_GROUP_QTY_LINE CMGL, CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
           WHERE CMGD.LINE_ID = CMGL.LINE_ID
             AND CMGL.INVENTORY_ITEM_ID = P_ASSY_ITEM_ID
             AND CMGD.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_PRIOR_FLAG := 'N';
          WHEN OTHERS THEN
            LV_PRIOR_FLAG := 'N';
        END;
      END IF;
      --Added below by V1.008
    
      IF p_pcba_flag = 'Y' AND LV_PRIOR_FLAG = 'Y' THEN
        CALCULATE_LINE_QTY(GET_HEADER_ID(P_ASSY_ITEM_ID), P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY);
      END IF;
    
      FOR LR_ITEM_DETAIL IN (SELECT CMGL.INVENTORY_ITEM_ID, CMGL.USED_QTY
                               FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                              WHERE CMGL.HEADER_ID = CMGH.HEADER_ID
                                AND CMGH.HEADER_ID = GET_HEADER_ID(P_ASSY_ITEM_ID)
                                AND p_pcba_flag = 'Y'
                                AND CMGL.SUM_FLAG = 'Y'
                                AND NVL(CMGL.USED_QTY, 0) > 0
                                AND LV_PRIOR_FLAG = 'Y'
                             UNION ALL
                             SELECT LR_BOM.INVENTORY_ITEM_ID, P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY
                               FROM DUAL
                              WHERE p_pcba_flag = 'N'
                                 OR LV_PRIOR_FLAG = 'N') LOOP
        --Added above by V1.008
        BEGIN
          SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                 MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                 MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                 MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                 MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                 MSI.PLANNING_MAKE_BUY_CODE,
                 MSI.ATTRIBUTE1,
                 MSI.ITEM_NAME,
                 MSI.LOW_LEVEL_CODE
            INTO LN_SUB_PREPROCE_LEAD_TIME,
                 LN_SUB_POST_LEAD_TIME,
                 LN_SUB_FULL_LEAD_TIME,
                 LN_SUB_FIXED_LEAD_TIME,
                 LN_SUB_VARIA_LEAD_TIME,
                 LN_MAKE_BUY_CODE,
                 LV_ITEM_TYPE,
                 LV_ITEM_NAME,
                 LN_LOW_LEVEL_CODE
            FROM MSC_SYSTEM_ITEMS MSI
           WHERE MSI.plan_id = P_PLAN_ID
             AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
             AND MSI.ORGANIZATION_ID = P_ORGANIZATION_ID
             AND MSI.INVENTORY_ITEM_ID = LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_PREPROCE_LEAD_TIME := 0;
            LN_SUB_POST_LEAD_TIME     := 0;
            LN_SUB_FULL_LEAD_TIME     := 0;
            LN_SUB_FIXED_LEAD_TIME    := 0;
            LN_SUB_VARIA_LEAD_TIME    := 0;
        END;
        LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
        LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
        --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
        LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
        LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
        LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
        --先写入一笔计划单需求
        BEGIN
          SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
        
          LT_DEMAND_TEMP                            := NULL;
          LT_DEMAND_TEMP.DEMAND_ID                  := LN_DEMAND_ID;
          LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY := LR_ITEM_DETAIL.USED_QTY; --P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
          LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE  := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
          LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
          LT_DEMAND_TEMP.DEMAND_TYPE                := 1; --Discrete Demand
          LT_DEMAND_TEMP.ORIGINATION_TYPE           := 1; --计划单需求
          LT_DEMAND_TEMP.DISPOSITION_ID             := NULL;
          LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID     := P_ASSY_ITEM_ID;
          LT_DEMAND_TEMP.PLAN_ID                    := P_PLAN_ID;
          LT_DEMAND_TEMP.ORGANIZATION_ID            := P_ORGANIZATION_ID;
          LT_DEMAND_TEMP.INVENTORY_ITEM_ID          := LR_ITEM_DETAIL.INVENTORY_ITEM_ID; --替代料ID
          LT_DEMAND_TEMP.SR_INSTANCE_ID             := P_SR_INSTANCE_ID;
          LT_DEMAND_TEMP.SHIP_TO_SITE_ID            := 0;
          LT_DEMAND_TEMP.PROMISE_DATE               := NULL;
          LT_DEMAND_TEMP.SELLING_PRICE              := 0;
          LT_DEMAND_TEMP.DMD_LATENESS_COST          := 0;
          LT_DEMAND_TEMP.DMD_SATISFIED_DATE         := NULL;
          LT_DEMAND_TEMP.OP_SEQ_NUM                 := LR_BOM.OPERATION_SEQ_NUM;
          LT_DEMAND_TEMP.UPDATED                    := 2;
          LT_DEMAND_TEMP.STATUS                     := 0;
          LT_DEMAND_TEMP.APPLIED                    := NULL;
          LT_DEMAND_TEMP.DEMAND_CLASS               := NULL;
          LT_DEMAND_TEMP.FIRM_QUANTITY              := NULL;
          LT_DEMAND_TEMP.FIRM_DATE                  := NULL;
          LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY        := NULL;
          LT_DEMAND_TEMP.OLD_DEMAND_DATE            := P_ASSY_DEMAND_DATE;
          LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID     := P_ORGANIZATION_ID;
          LT_DEMAND_TEMP.RESERVATION_ID             := NULL;
          LT_DEMAND_TEMP.PARENT_ID                  := NULL;
          LT_DEMAND_TEMP.LENDING_PROJECT_ID         := NULL;
          LT_DEMAND_TEMP.LENDING_TASK_ID            := NULL;
          LT_DEMAND_TEMP.SUBST_ITEM_FLAG            := 2; --1 替代料 2 主料
          LT_DEMAND_TEMP.ORDER_NUMBER               := NULL;
          LT_DEMAND_TEMP.RESERVED_QUANTITY          := 0;
          LT_DEMAND_TEMP.LAST_UPDATE_DATE           := SYSDATE;
          LT_DEMAND_TEMP.LAST_UPDATED_BY            := FND_GLOBAL.USER_ID;
          LT_DEMAND_TEMP.CREATION_DATE              := SYSDATE;
          LT_DEMAND_TEMP.CREATED_BY                 := FND_GLOBAL.USER_ID;
          LT_DEMAND_TEMP.LAST_UPDATE_LOGIN          := FND_GLOBAL.LOGIN_ID;
          LT_DEMAND_TEMP.REQUEST_ID                 := FND_GLOBAL.CONC_REQUEST_ID;
          LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID     := FND_GLOBAL.PROG_APPL_ID;
          LT_DEMAND_TEMP.PROGRAM_ID                 := FND_GLOBAL.CONC_PROGRAM_ID;
          LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE        := SYSDATE;
          LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY         := NULL;
          IF LV_PRIOR_FLAG = 'Y' THEN
            LT_DEMAND_TEMP.ATTRIBUTE1 := 'Y';
          ELSE
            LT_DEMAND_TEMP.ATTRIBUTE1 := NULL;
          END IF;
          LT_DEMAND_TEMP.WIP_ENTITY_ID                  := NULL;
          LT_DEMAND_TEMP.ISSUED_QUANTITY                := NULL;
          LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := NULL;
          LT_DEMAND_TEMP.REFRESH_NUMBER                 := NULL;
          LT_DEMAND_TEMP.REQUEST_DATE                   := NULL;
          LT_DEMAND_TEMP.WIP_STATUS_CODE                := NULL;
          LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := 1;
          LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := 1;
          LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := NULL;
          LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := NULL;
          LT_DEMAND_TEMP.BUCKET_TYPE                    := 1;
          LT_DEMAND_TEMP.BILL_ID                        := NULL;
          LT_DEMAND_TEMP.PROBABILITY                    := NULL;
          LT_DEMAND_TEMP.FORECAST_SET_ID                := NULL;
          LT_DEMAND_TEMP.GROUP_ID                       := NULL;
          LT_DEMAND_TEMP.SERVICE_LEVEL                  := NULL;
          LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := NULL;
          LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := NULL;
          LT_DEMAND_TEMP.SCENARIO_SET                   := NULL;
          LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := NULL;
          LT_DEMAND_TEMP.SUPPLY_ID                      := NULL;
          LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := NULL;
          LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := NULL;
          LT_DEMAND_TEMP.STOLEN_FLAG                    := NULL;
          LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := NULL;
          LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := NULL;
          LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := NULL;
          LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := NULL;
          LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := NULL;
          LT_DEMAND_TEMP.UNMET_QUANTITY                 := NULL;
          LT_DEMAND_TEMP.RECORD_SOURCE                  := NULL;
          LT_DEMAND_TEMP.LINK_TO_LINE_ID                := NULL;
          LT_DEMAND_TEMP.ERROR_TYPE                     := NULL;
          LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := NULL;
          LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_BOM.COMPONENT_SEQUENCE_ID;
          LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := NULL;
          LT_DEMAND_TEMP.RELEASE_STATUS                 := NULL;
          LT_DEMAND_TEMP.RESCHEDULE_FLAG                := NULL;
          LT_DEMAND_TEMP.LOAD_TYPE                      := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_DATE                 := NULL;
          LT_DEMAND_TEMP.RELEASE_ERRORS                 := NULL;
          LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := NULL;
          LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := NULL;
          LT_DEMAND_TEMP.ORIGINAL_INST_ID               := NULL;
          LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := 0;
          LT_DEMAND_TEMP.SHIP_SET_ID                    := 0;
          LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := NULL;
          LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := NULL;
          LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := NULL;
          LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := NULL;
          LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := NULL;
          LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := NULL;
          LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := NULL;
          LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := NULL;
          LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := NULL;
          LT_DEMAND_TEMP.ZONE_ID                        := NULL;
          LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := NULL;
          LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := 0;
          LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := NULL;
          LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := NULL;
          LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := NULL; --需要更新？
          LT_DEMAND_TEMP.ATO_LINE_ID                    := NULL;
          LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := NULL;
          LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := NULL;
          LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := NULL;
          LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := NULL;
          LT_DEMAND_TEMP.SHIP_METHOD                    := NULL;
          LT_DEMAND_TEMP.SHIP_CALENDAR                  := NULL;
          LT_DEMAND_TEMP.RECEIVING_CALENDAR             := NULL;
          LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := NULL;
          LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := NULL;
          LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := NULL;
          LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := NULL;
          LT_DEMAND_TEMP.FINAL_USE_DATE                 := NULL;
          LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := NULL;
          LT_DEMAND_TEMP.SHIP_SET_NAME                  := NULL;
          LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := NULL;
          LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := NULL; --需要更新？
          LT_DEMAND_TEMP.ATP_SESSION_ID                 := NULL;
          LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := NULL;
          LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_ASSY_DEMAND_DATE;
          LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := 1;
        
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MD',
                '***ERROR*** INSERT BOM DEMAND 018 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        END;
      
        IF LV_PRIOR_FLAG = 'N' THEN
          --若不是优先计算的则直接用计划单去满足
        
          --写入供应数据
          BEGIN
            SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
            LV_SUPPLIES_TEMP                   := NULL;
            LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
            LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
            LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
            LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
          
            LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
            LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                         LN_SUB_POST_LEAD_TIME); --重新计算
            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME);
            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME -
                                                                         LN_SUB_PREPROCE_LEAD_TIME);
          
            LV_SUPPLIES_TEMP.DISPOSITION_ID          := NULL;
            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
            LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
            LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
            LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
            LV_SUPPLIES_TEMP.UPDATED                 := 2;
            LV_SUPPLIES_TEMP.STATUS                  := 0;
            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
            LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
            LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
            LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
            LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***ERROR*** INSERT BOM SUPPLIES 019 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          END;
        
          --写入PEGGING数据
          BEGIN
            SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
          
            LT_PEGGING_TEMP                        := NULL;
            LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
            LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY; --P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
            LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_ITEM_DETAIL.USED_QTY; --P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
            LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_ITEM_DETAIL.USED_QTY; --P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
            LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE;--初始单位用量--Added by v1.027
            LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
            LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
            LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
            LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
            LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
            LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
            LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
            LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
            LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
            LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
            LT_PEGGING_TEMP.PROJECT_ID             := NULL;
            LT_PEGGING_TEMP.TASK_ID                := NULL;
            LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
            LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
            LT_PEGGING_TEMP.UPDATED                := 0;
            LT_PEGGING_TEMP.STATUS                 := 2;
            LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
            LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
            LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
            LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
            LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
            LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
            LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
            INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MFP',
                  '***ERROR*** INSERT BOM PEGGINGS 020 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          END;
          LT_DEMAND_TEMP.LOW_LEVEL_CODE         := LN_LOW_LEVEL_CODE;
          LT_DEMAND_TEMP.PEGGING_ID             := LN_PEGGING_ID;
          LT_DEMAND_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
          LT_DEMAND_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
          LT_DEMAND_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
          LT_DEMAND_TEMP.ALLOCATED_QUANTITY     := LR_ITEM_DETAIL.USED_QTY;
          LT_DEMAND_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
          LT_DEMAND_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
          LT_DEMAND_TEMP.ITEM_TYPE              := LV_ITEM_TYPE;
          LT_DEMAND_TEMP.ITEM_NAME              := LV_ITEM_NAME;
          LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE := LN_MAKE_BUY_CODE;
          LT_DEMAND_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE;--初始单位用量--Added by v1.027
          INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
          --Added below by V1.023
          IF LN_LOW_LEVEL_CODE < 1000 THEN
            LD_2_DEMAND_DATE := GET_ACTUAL_DATE(GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE) - LN_SUB_POST_LEAD_TIME -
                                                LN_SUB_FULL_LEAD_TIME);
            LN_2_PEGGING_ID  := LN_PEGGING_ID;
            FOR LR_SECOND_BOM IN LC_SECOND_BOM(P_PLAN_ID,
                                               p_SR_INSTANCE_ID,
                                               P_ORGANIZATION_ID,
                                               LR_ITEM_DETAIL.INVENTORY_ITEM_ID,
                                               LD_2_DEMAND_DATE) LOOP
              BEGIN
                SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                       MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                       MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                       MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                       MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                       MSI.PLANNING_MAKE_BUY_CODE,
                       MSI.ATTRIBUTE1,
                       MSI.ITEM_NAME,
                       MSI.LOW_LEVEL_CODE
                  INTO LN_2_PREPROCE_LEAD_TIME,
                       LN_2_POST_LEAD_TIME,
                       LN_2_FULL_LEAD_TIME,
                       LN_2_FIXED_LEAD_TIME,
                       LN_2_VARIA_LEAD_TIME,
                       LN_MAKE_BUY_CODE,
                       LV_ITEM_TYPE,
                       LV_ITEM_NAME,
                       LN_LOW_LEVEL_CODE
                  FROM MSC_SYSTEM_ITEMS MSI
                 WHERE MSI.plan_id = P_PLAN_ID
                   AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                   AND MSI.ORGANIZATION_ID = P_ORGANIZATION_ID
                   AND MSI.INVENTORY_ITEM_ID = LR_SECOND_BOM.INVENTORY_ITEM_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_2_PREPROCE_LEAD_TIME := 0;
                  LN_2_POST_LEAD_TIME     := 0;
                  LN_2_FULL_LEAD_TIME     := 0;
                  LN_2_FIXED_LEAD_TIME    := 0;
                  LN_2_VARIA_LEAD_TIME    := 0;
              END;
              LN_2_PREPROCE_LEAD_TIME := NVL(LN_2_PREPROCE_LEAD_TIME, 0);
              LN_2_POST_LEAD_TIME     := NVL(LN_2_POST_LEAD_TIME, 0);
              LN_2_FULL_LEAD_TIME     := NVL(LN_2_FIXED_LEAD_TIME, 0);
              LN_2_FIXED_LEAD_TIME    := NVL(LN_2_FIXED_LEAD_TIME, 0);
              LN_2_VARIA_LEAD_TIME    := NVL(LN_2_VARIA_LEAD_TIME, 0);
            
              --先写入一笔计划单需求
              BEGIN
                SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
              
                LT_DEMAND_TEMP                                := NULL;
                LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY; --P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;
                LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := LD_2_DEMAND_DATE;
                LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := LD_2_DEMAND_DATE;
                LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                LT_DEMAND_TEMP.DISPOSITION_ID                 := NULL;
                LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LT_DEMAND_TEMP.PLAN_ID                        := P_PLAN_ID;
                LT_DEMAND_TEMP.ORGANIZATION_ID                := P_ORGANIZATION_ID;
                LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_SECOND_BOM.INVENTORY_ITEM_ID; --替代料ID
                LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_SR_INSTANCE_ID;
                LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := 0;
                LT_DEMAND_TEMP.PROMISE_DATE                   := NULL;
                LT_DEMAND_TEMP.SELLING_PRICE                  := 0;
                LT_DEMAND_TEMP.DMD_LATENESS_COST              := 0;
                LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := NULL;
                LT_DEMAND_TEMP.OP_SEQ_NUM                     := LR_SECOND_BOM.OPERATION_SEQ_NUM;
                LT_DEMAND_TEMP.UPDATED                        := 2;
                LT_DEMAND_TEMP.STATUS                         := 0;
                LT_DEMAND_TEMP.APPLIED                        := NULL;
                LT_DEMAND_TEMP.DEMAND_CLASS                   := NULL;
                LT_DEMAND_TEMP.FIRM_QUANTITY                  := NULL;
                LT_DEMAND_TEMP.FIRM_DATE                      := NULL;
                LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := NULL;
                LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LD_2_DEMAND_DATE;
                LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_ORGANIZATION_ID;
                LT_DEMAND_TEMP.RESERVATION_ID                 := NULL;
                LT_DEMAND_TEMP.PARENT_ID                      := NULL;
                LT_DEMAND_TEMP.LENDING_PROJECT_ID             := NULL;
                LT_DEMAND_TEMP.LENDING_TASK_ID                := NULL;
                LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --1 替代料 2 主料
                LT_DEMAND_TEMP.ORDER_NUMBER                   := NULL;
                LT_DEMAND_TEMP.RESERVED_QUANTITY              := 0;
                LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := NULL;
                LT_DEMAND_TEMP.ATTRIBUTE1                     := NULL;
                LT_DEMAND_TEMP.WIP_ENTITY_ID                  := NULL;
                LT_DEMAND_TEMP.ISSUED_QUANTITY                := NULL;
                LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := NULL;
                LT_DEMAND_TEMP.REFRESH_NUMBER                 := NULL;
                LT_DEMAND_TEMP.REQUEST_DATE                   := NULL;
                LT_DEMAND_TEMP.WIP_STATUS_CODE                := NULL;
                LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := 1;
                LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := 1;
                LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := NULL;
                LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := NULL;
                LT_DEMAND_TEMP.BUCKET_TYPE                    := 1;
                LT_DEMAND_TEMP.BILL_ID                        := NULL;
                LT_DEMAND_TEMP.PROBABILITY                    := NULL;
                LT_DEMAND_TEMP.FORECAST_SET_ID                := NULL;
                LT_DEMAND_TEMP.GROUP_ID                       := NULL;
                LT_DEMAND_TEMP.SERVICE_LEVEL                  := NULL;
                LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := NULL;
                LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := NULL;
                LT_DEMAND_TEMP.SCENARIO_SET                   := NULL;
                LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := NULL;
                LT_DEMAND_TEMP.SUPPLY_ID                      := NULL;
                LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := NULL;
                LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := NULL;
                LT_DEMAND_TEMP.STOLEN_FLAG                    := NULL;
                LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := NULL;
                LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := NULL;
                LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := NULL;
                LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := NULL;
                LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := NULL;
                LT_DEMAND_TEMP.UNMET_QUANTITY                 := NULL;
                LT_DEMAND_TEMP.RECORD_SOURCE                  := NULL;
                LT_DEMAND_TEMP.LINK_TO_LINE_ID                := NULL;
                LT_DEMAND_TEMP.ERROR_TYPE                     := NULL;
                LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := NULL;
                LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_SECOND_BOM.COMPONENT_SEQUENCE_ID;
                LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := NULL;
                LT_DEMAND_TEMP.RELEASE_STATUS                 := NULL;
                LT_DEMAND_TEMP.RESCHEDULE_FLAG                := NULL;
                LT_DEMAND_TEMP.LOAD_TYPE                      := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_DATE                 := NULL;
                LT_DEMAND_TEMP.RELEASE_ERRORS                 := NULL;
                LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := NULL;
                LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := NULL;
                LT_DEMAND_TEMP.ORIGINAL_INST_ID               := NULL;
                LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := 0;
                LT_DEMAND_TEMP.SHIP_SET_ID                    := 0;
                LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := NULL;
                LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := NULL;
                LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := NULL;
                LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := NULL;
                LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := NULL;
                LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := NULL;
                LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := NULL;
                LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := NULL;
                LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := NULL;
                LT_DEMAND_TEMP.ZONE_ID                        := NULL;
                LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := NULL;
                LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := 0;
                LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := NULL;
                LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := NULL;
                LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := NULL; --需要更新？
                LT_DEMAND_TEMP.ATO_LINE_ID                    := NULL;
                LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := NULL;
                LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := NULL;
                LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := NULL;
                LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := NULL;
                LT_DEMAND_TEMP.SHIP_METHOD                    := NULL;
                LT_DEMAND_TEMP.SHIP_CALENDAR                  := NULL;
                LT_DEMAND_TEMP.RECEIVING_CALENDAR             := NULL;
                LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := NULL;
                LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := NULL;
                LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := NULL;
                LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := NULL;
                LT_DEMAND_TEMP.FINAL_USE_DATE                 := NULL;
                LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := NULL;
                LT_DEMAND_TEMP.SHIP_SET_NAME                  := NULL;
                LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := NULL;
                LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := NULL; --需要更新？
                LT_DEMAND_TEMP.ATP_SESSION_ID                 := NULL;
                LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := NULL;
                LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LD_2_DEMAND_DATE;
                LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := 1;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MD',
                      '***ERROR*** INSERT BOM DEMAND 018 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
            
              --写入供应数据
              BEGIN
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                LV_SUPPLIES_TEMP                   := NULL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SECOND_BOM.INVENTORY_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LD_2_DEMAND_DATE;
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LD_2_DEMAND_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_2_DEMAND_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_2_DEMAND_DATE - LN_2_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_2_DEMAND_DATE - LN_2_POST_LEAD_TIME -
                                                                             LN_2_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_2_DEMAND_DATE - LN_2_POST_LEAD_TIME -
                                                                             LN_2_FULL_LEAD_TIME -
                                                                             LN_2_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := NULL;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT BOM SUPPLIES 019 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_2_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_2_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SECOND_BOM.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_2_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := NULL;
                LT_PEGGING_TEMP.TASK_ID                := NULL;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINGS 020 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              LT_DEMAND_TEMP.LOW_LEVEL_CODE         := LN_LOW_LEVEL_CODE;
              LT_DEMAND_TEMP.PEGGING_ID             := LN_PEGGING_ID;
              LT_DEMAND_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
              LT_DEMAND_TEMP.PREV_PEGGING_ID        := LN_2_PEGGING_ID;
              LT_DEMAND_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
              LT_DEMAND_TEMP.ALLOCATED_QUANTITY     := LR_ITEM_DETAIL.USED_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
              LT_DEMAND_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
              LT_DEMAND_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_2_DEMAND_DATE);
              LT_DEMAND_TEMP.ITEM_TYPE              := LV_ITEM_TYPE;
              LT_DEMAND_TEMP.ITEM_NAME              := LV_ITEM_NAME;
              LT_DEMAND_TEMP.PLANNING_MAKE_BUY_CODE := LN_MAKE_BUY_CODE;
              LT_DEMAND_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY * LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            END LOOP;
          END IF;
          --Added above by V1.023
        ELSE
          --需要优先做供应匹配的
          LT_DEMAND_TEMP.PEGGING_ID := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
          INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
        
          --LN_PLAN_QTY := P_ASSY_ITEM_QTY * LR_BOM.USAGE_QUANTITY;--Commented by V1.008
          LN_PLAN_QTY := LR_ITEM_DETAIL.USED_QTY; --Added by V1.008
        
          --冲减现有量
          FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ITEM_DETAIL.INVENTORY_ITEM_ID) LOOP
            LN_USED_QTY := 0;
            IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
            
              LN_USED_QTY := LN_PLAN_QTY;
              LN_PLAN_QTY := 0;
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                 SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
            
            ELSE
            
              LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
              LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
            END IF;
          
            LN_ASSY_USED_QTY := NVL(LN_ASSY_USED_QTY, 0) + LN_USED_QTY / LR_BOM.USAGE_QUANTITY;
            IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
              --写入供应数据
              BEGIN
              
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              
                LV_SUPPLIES_TEMP                   := NULL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                             LN_SUB_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT BOM SUPPLIES 021 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
            
            ELSE
              LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
            
            END IF;
            --写入PEGGING数据
            BEGIN
              SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
            
              LT_PEGGING_TEMP                        := NULL;
              LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
              LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
              LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
              LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
              LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
              LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_DATE);
              LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
              LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
              LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
              LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
              LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
              LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
              LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
              LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
              LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
              LT_PEGGING_TEMP.PROJECT_ID             := NULL;
              LT_PEGGING_TEMP.TASK_ID                := NULL;
              LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
              LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
              LT_PEGGING_TEMP.UPDATED                := 0;
              LT_PEGGING_TEMP.STATUS                 := 2;
              LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
              LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
              LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
              LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
              LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
              LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MFP',
                    '***ERROR*** INSERT BOM PEGGINGS 022 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            END;
            IF LN_PLAN_QTY <= 0 THEN
              EXIT;
            END IF;
          END LOOP;
        
          --若现有量不能满足需求则用工单的副需求去满足
          IF LN_PLAN_QTY > 0 THEN
            --冲减对应的工单，按照工单的开工日期，工单ID排序
            FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ITEM_DETAIL.INVENTORY_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
              END IF;
              LN_ASSY_USED_QTY := NVL(LN_ASSY_USED_QTY, 0) + LN_USED_QTY / LR_BOM.USAGE_QUANTITY;
            
              IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 023 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
              
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY* P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RDJ.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RDJ.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RDJ.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINGS 024 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用在途部分去满足
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ITEM_DETAIL.INVENTORY_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
              END IF;
            
              LN_ASSY_USED_QTY := NVL(LN_ASSY_USED_QTY, 0) + LN_USED_QTY / LR_BOM.USAGE_QUANTITY;
              IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY* P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用PO部分去满足
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ITEM_DETAIL.INVENTORY_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
              END IF;
            
              LN_ASSY_USED_QTY := NVL(LN_ASSY_USED_QTY, 0) + LN_USED_QTY / LR_BOM.USAGE_QUANTITY;
              IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
              
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用PR部分去满足
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID, P_ORGANIZATION_ID, LR_ITEM_DETAIL.INVENTORY_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
              END IF;
            
              LN_ASSY_USED_QTY := NVL(LN_ASSY_USED_QTY, 0) + LN_USED_QTY / LR_BOM.USAGE_QUANTITY;
            
              IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
              
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                END;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
              
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ITEM_DETAIL.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          IF LN_PLAN_QTY > 0 THEN
            --最后仍不能满足 用计划单去满足
            --需要加入供应商资料，待以后加入
          
            ALLOCATION_QTY(P_PLAN_ID           => P_PLAN_ID,
                           p_SR_INSTANCE_ID    => p_SR_INSTANCE_ID,
                           P_ORGANIZATION_ID   => P_ORGANIZATION_ID,
                           P_INVENTORY_ITEM_ID => LR_ITEM_DETAIL.INVENTORY_ITEM_ID,
                           P_COMPONENT_SEQ_ID  => NULL, --LR_BOM.COMPONENT_SEQUENCE_ID,
                           P_ALLOCATION_QTY    => LN_PLAN_QTY);
          
            FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                     CMAB.MSC_VENDOR_ID,
                                     CMAB.MSC_VENDOR_SITE_ID,
                                     CMAB.CURRENT_ALLOCATION_QTY
                                FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                               WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                 AND CMAB.CURRENT_ALLOCATION_QTY > 0
                              --AND CMBR.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                              UNION ALL
                              SELECT LR_ITEM_DETAIL.INVENTORY_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                FROM DUAL
                               WHERE 1 = 1
                                    --AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                 AND NOT EXISTS
                               (SELECT 1
                                        FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                       WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                         AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
            
              BEGIN
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                LV_SUPPLIES_TEMP                   := NULL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_ASSY_DEMAND_COMP_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                             LN_SUB_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := NULL;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT BOM SUPPLIES 031 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LR_ITEM_DETAIL.USED_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * P_ORGI_USAGE; --单位用量--Changed by V1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_ASSY_DEMAND_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_PRV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := NULL;
                LT_PEGGING_TEMP.TASK_ID                := NULL;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 031 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              END;
            END LOOP;
          END IF;
        
        END IF;
      END LOOP;
    END LOOP;
  
    P_D_COUNT       := LN_D_COUNT;
    P_S_COUNT       := LN_S_COUNT;
    P_P_COUNT       := LN_P_COUNT;
    P_ASSY_USED_QTY := LN_ASSY_USED_QTY;
  END;
  /***********************************************************************************
   NAME: GET_MPS_FLAG
   DESCRIPTION:得到物料是否是MPS计划物料
   RETURN VALUE:Y 表示是MPS计划物料 N表示不是MPS计划物料
  ***********************************************************************************/
  FUNCTION GET_MPS_FLAG(P_ORGANIZATION_ID NUMBER, P_INVENTORY_ITEM_ID NUMBER) RETURN VARCHAR2 IS
    LV_MPS_ITEM_FLAG VARCHAR2(1);
  BEGIN
  
    BEGIN
      SELECT 'Y'
        INTO LV_MPS_ITEM_FLAG
        FROM CUX.CUX_MSC_MPS_RANGE CMM
       WHERE CMM.ORGANIZATION_ID = P_ORGANIZATION_ID
         AND CMM.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_MPS_ITEM_FLAG := 'N';
      WHEN OTHERS THEN
        LV_MPS_ITEM_FLAG := 'N';
    END;
  
    RETURN NVL(LV_MPS_ITEM_FLAG, 'N');
  END GET_MPS_FLAG;

  /***********************************************************************************
   NAME: GET_SOURCE_ORG
   DESCRIPTION:得到物料是否从其他ORG制造
   RETURN VALUE:-1 表示不是从其他组织制造 >0时表示从其他组织制造
  ***********************************************************************************/
  FUNCTION GET_SOURCE_ORG(P_PLAN_ID           NUMBER,
                          P_SR_INSTANCE_ID    NUMBER,
                          P_ORGANIZATION_ID   NUMBER,
                          P_INVENTORY_ITEM_ID NUMBER) RETURN NUMBER IS
    LN_SOURCE_ORG_ID NUMBER;
  BEGIN
    BEGIN
      SELECT SOURCE_ORGANIZATION_ID
        INTO LN_SOURCE_ORG_ID
        FROM CUX.CUX_MSC_SOURCE_ORG_RANGE CMSO
       WHERE CMSO.ASSIGNMENT_SET_ID = GV_ASSIGNMENT_SET_ID
         AND CMSO.ORGANIZATION_ID = P_ORGANIZATION_ID
         AND CMSO.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_SOURCE_ORG_ID := -1;
      WHEN OTHERS THEN
        LN_SOURCE_ORG_ID := -1;
    END;
  
    IF LN_SOURCE_ORG_ID < 0 THEN
      BEGIN
        SELECT CMSO.SOURCE_ORGANIZATION_ID
          INTO LN_SOURCE_ORG_ID
          FROM CUX.CUX_MSC_SOURCE_ORG_RANGE CMSO, MSC_ITEM_CATEGORIES mic
         WHERE CMSO.ASSIGNMENT_SET_ID = GV_ASSIGNMENT_SET_ID
           AND CMSO.ORGANIZATION_ID = MIC.ORGANIZATION_ID
           AND MIC.CATEGORY_SET_ID = 13 --库存
           AND MIC.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
           AND MIC.ORGANIZATION_ID = P_ORGANIZATION_ID
           AND MIC.CATEGORY_SET_ID = CMSO.CATEGORY_SET_ID
           AND MIC.CATEGORY_NAME = CMSO.CATEGORY_NAME
           AND MIC.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_SOURCE_ORG_ID := -1;
        WHEN OTHERS THEN
          LN_SOURCE_ORG_ID := -1;
      END;
    END IF;
  
    RETURN NVL(LN_SOURCE_ORG_ID, -1);
  END GET_SOURCE_ORG;

  /***********************************************************************************
   NAME: UPDATE_SUB_RATE
   DESCRIPTION:同步替代料的相关信息
  ***********************************************************************************/
  PROCEDURE UPDATE_SUB_RATE(errbuf                OUT VARCHAR2,
                            retcode               OUT VARCHAR2,
                            p_SR_INSTANCE_ID      NUMBER,
                            P_ORG_GOUP            VARCHAR2,
                            P_SOURCE_ASSGN_SET_ID NUMBER,
                            P_ASSGN_SET_ID        NUMBER) IS
    LV_ERROR_CODE    VARCHAR2(20);
    LV_ERROR_MESSAGE VARCHAR2(4000);
    LE_EXCEPTION EXCEPTION;
    LN_REQUEST_ID    NUMBER;
    LN_ASSIGNMENT_ID NUMBER;
    lv_dblink        msc_apps_instances.m2a_dblink%type;
    LV_SQL           VARCHAR2(4000);
  BEGIN
    BEGIN
      SELECT MAX(mai.m2a_dblink) INTO lv_dblink FROM msc_apps_instances mai WHERE mai.instance_id = p_SR_INSTANCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        lv_dblink := NULL;
    END;
    IF lv_dblink IS NOT NULL THEN
      lv_dblink := '@' || lv_dblink;
    END IF;
    BEGIN
      SELECT FND_GLOBAL.CONC_REQUEST_ID INTO LN_REQUEST_ID FROM DUAL;
    EXCEPTION
      WHEN OTHERS THEN
        LN_REQUEST_ID := -9999;
    END;
    --确定ORG的范围
    LOG(LN_REQUEST_ID, 'GET_ORG_RANGE', '获取ORG范围 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
  
    LV_SQL := 'INSERT INTO CUX.CUX_MSC_ORG_RANGE' || CHR(10) || '        (ORGANIZATION_ID, ORG_ID)' || CHR(10) ||
              '        SELECT mio.organization_id, OOD.OPERATING_UNIT' || CHR(10) ||
              '          from msc_instance_orgs mio, msc_apps_instances mai, ORG_ORGANIZATION_DEFINITIONS' || lv_dblink ||
              ' OOD ' || CHR(10) || '         WHERE mio.org_group is not null' || CHR(10) ||
              '           and mio.sr_instance_id = mai.instance_id' || CHR(10) ||
              '           AND MIO.ORGANIZATION_ID = OOD.ORGANIZATION_ID' || CHR(10) ||
              '           and mai.apps_ver >= 3' || CHR(10) || '           and mio.enabled_flag = 1' || CHR(10) ||
              '           AND (MIO.ORG_GROUP = ''' || P_ORG_GOUP || ''' or ''' || P_ORG_GOUP || '''= ''-999'')' ||
              CHR(10) || '           AND MIO.SR_INSTANCE_ID = ' || p_SR_INSTANCE_ID;
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'GET_ORG_RANGE',
            '***ERROR*** Insert CUX_MSC_ORG_RANGE 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    LV_SQL := 'DELETE FROM CUX.CUX_MSC_ORG_RANGE_ERP' || lv_dblink;
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'DEL_ERP_ORG_RANGE',
            '***ERROR*** DELETE ERP端 CUX_MSC_ORG_RANGE_ERP 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    LV_SQL := 'INSERT INTO CUX.CUX_MSC_ORG_RANGE_ERP' || lv_dblink || CHR(10) || 'SELECT * FROM CUX.CUX_MSC_ORG_RANGE';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INS_ERP_ORG_RANGE',
            '***ERROR*** INSERT ERP端 CUX_MSC_ORG_RANGE_ERP 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    LOG(LN_REQUEST_ID, 'GET_MAX_ASSGN_ID', '获取最大的ASSGINMENT_ID ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      SELECT MAX(MRA.SR_ASSIGNMENT_ID) INTO LN_ASSIGNMENT_ID FROM MSC_SR_ASSIGNMENTS MRA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_ASSIGNMENT_ID := 0;
        LOG(LN_REQUEST_ID,
            'GET_MAX_ASSGN_ID',
            '***ERROR***获取最大的ASSGINMENT_ID失败 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    END;
  
    LOG(LN_REQUEST_ID,
        'DELETE_ASSGN_SET',
        '删除跨组织来源补充规则控制集 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE MSC.MSC_SR_ASSIGNMENTS MSA WHERE MSA.ASSIGNMENT_SET_ID = P_ASSGN_SET_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'DELETE_ASSGN_SET',
            '***ERROR*** 删除跨组织来源补充规则控制集出现错误 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        RAISE LE_EXCEPTION;
    END;
  
    LOG(LN_REQUEST_ID,
        'INSERT_ASSGN_SET',
        'INSERT跨组织来源补充规则控制集 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO MSC_SR_ASSIGNMENTS
        (assignment_id,
         sr_assignment_id,
         sr_assignment_instance_id,
         assignment_set_id,
         assignment_type,
         sourcing_rule_id,
         sourcing_rule_type,
         organization_id,
         sr_instance_id,
         inventory_item_id,
         partner_id,
         ship_to_site_id,
         category_set_id,
         category_name,
         deleted_flag,
         refresh_number,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by,
         last_update_login,
         request_id,
         program_application_id,
         program_id,
         program_update_date,
         attribute_category,
         collected_flag,
         region_id,
         allocation_rule_id,
         item_type_id,
         item_type_value)
        select MSC_SR_ASSIGNMENTS_S.Nextval,
               a.sr_assignment_id + LN_ASSIGNMENT_ID,
               a.sr_assignment_instance_id,
               P_ASSGN_SET_ID,
               a.assignment_type,
               a.sourcing_rule_id,
               a.sourcing_rule_type,
               a.organization_id,
               a.sr_instance_id,
               a.inventory_item_id,
               a.partner_id,
               a.ship_to_site_id,
               a.category_set_id,
               a.category_name,
               a.deleted_flag,
               a.refresh_number,
               a.last_update_date,
               a.last_updated_by,
               a.creation_date,
               a.created_by,
               a.last_update_login,
               a.request_id,
               a.program_application_id,
               a.program_id,
               a.program_update_date,
               a.attribute_category,
               a.collected_flag,
               a.region_id,
               a.allocation_rule_id,
               a.item_type_id,
               a.item_type_value
          from MSC_SR_ASSIGNMENTS a
         WHERE EXISTS (SELECT e.ASSIGNMENT_ID
                  from MSC_SR_ASSIGNMENTS    e, --ASSIGNMENTS
                       MSC_SOURCING_RULES    b, --sourcing 头 table 
                       msc.MSC_SR_SOURCE_ORG c, --sourcing 明细表
                       MSC_SR_RECEIPT_ORG    d, ---sourcing组织和有效性表
                       MSC_SYSTEM_ITEMS      MSI--Added by V1.029
                 where e.sourcing_rule_id = b.sourcing_rule_id
                   and c.sr_receipt_id = d.SR_RECEIPT_ID
                   and b.SOURCING_RULE_ID = d.SOURCING_RULE_ID
                   and e.ASSIGNMENT_ID = a.ASSIGNMENT_ID
                   and c.source_type <> 3 --3,Buy From
                   and e.ASSIGNMENT_SET_ID = P_SOURCE_ASSGN_SET_ID --原表的assignment_set_id
                   --Added below by v1.029
                   AND E.ORGANIZATION_ID = MSI.ORGANIZATION_ID
                   AND E.INVENTORY_ITEM_ID = MSI.INVENTORY_ITEM_ID
                   AND MSI.PLAN_ID = -1
                   AND MSI.SR_INSTANCE_ID = 1
                   AND MSI.PLANNING_MAKE_BUY_CODE = 1 --制造件
                   --Added above by v1.029
                );
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_ASSGN_SET',
            '***ERROR*** INSERT跨组织来源补充规则控制集出现错误 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        RAISE LE_EXCEPTION;
    END;
    
    --INSERT跨组织采购件部分
    --Added by V1.029
    DELETE CUX.CUX_MSC_ITEM_TRAN_ORG;
    
    INSERT INTO CUX.CUX_MSC_ITEM_TRAN_ORG
  (INVENTORY_ITEM_ID, ORGANIZATION_ID, SOURCE_ORGANIZATION_ID)
  SELECT DISTINCT E.INVENTORY_ITEM_ID, E.ORGANIZATION_ID, C.SOURCE_ORGANIZATION_ID
    from MSC_SR_ASSIGNMENTS    e, --ASSIGNMENTS
         MSC_SOURCING_RULES    b, --sourcing 头 table 
         msc.MSC_SR_SOURCE_ORG c, --sourcing 明细表
         MSC_SR_RECEIPT_ORG    d, ---sourcing组织和有效性表
         MSC_SYSTEM_ITEMS      MSI
   where e.sourcing_rule_id = b.sourcing_rule_id
     and c.sr_receipt_id = d.SR_RECEIPT_ID
     and b.SOURCING_RULE_ID = d.SOURCING_RULE_ID
     and c.source_type <> 3 --3,Buy From
     AND E.ASSIGNMENT_SET_ID = P_SOURCE_ASSGN_SET_ID
     AND E.ORGANIZATION_ID = MSI.ORGANIZATION_ID
     AND E.INVENTORY_ITEM_ID = MSI.INVENTORY_ITEM_ID
     AND MSI.PLAN_ID = -1
     AND MSI.SR_INSTANCE_ID = 1
     AND MSI.PLANNING_MAKE_BUY_CODE = 2; --采购件

  
    DELETE CUX.CUX_MSC_SOURCE_ORG_RANGE WHERE ASSIGNMENT_SET_ID = P_ASSGN_SET_ID;
  
    --将跨组织信息写入临时表
    INSERT INTO CUX.CUX_MSC_SOURCE_ORG_RANGE
      (ASSIGNMENT_SET_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, CATEGORY_SET_ID, CATEGORY_NAME, SOURCE_ORGANIZATION_ID)
      SELECT MAS.ASSIGNMENT_SET_ID,
             MSA.ORGANIZATION_ID,
             MSA.INVENTORY_ITEM_ID,
             MSA.CATEGORY_SET_ID,
             MSA.CATEGORY_NAME,
             MSSO.SOURCE_ORGANIZATION_ID
        FROM MSC_ASSIGNMENT_SETS MAS, MSC_SR_ASSIGNMENTS MSA, MSC_SR_RECEIPT_ORG MSRO, MSC_SR_SOURCE_ORG MSSO
       WHERE MAS.SR_INSTANCE_ID = 1
         AND MAS.ASSIGNMENT_SET_ID = MSA.ASSIGNMENT_SET_ID
         AND MAS.SR_INSTANCE_ID = MSA.SR_INSTANCE_ID
         AND MAS.ASSIGNMENT_SET_ID = P_ASSGN_SET_ID
         AND MSA.SR_INSTANCE_ID = MSRO.SR_INSTANCE_ID
         AND MSA.SOURCING_RULE_ID = MSRO.SOURCING_RULE_ID
         AND TRUNC(SYSDATE) BETWEEN MSRO.EFFECTIVE_DATE AND NVL(MSRO.DISABLE_DATE, TRUNC(SYSDATE + 1))
         AND MSRO.SR_RECEIPT_ID = MSSO.SR_RECEIPT_ID
         AND MSSO.SOURCE_TYPE = 1 --TRANSFER FROM
         AND MSRO.SR_INSTANCE_ID = MSSO.SR_INSTANCE_ID;
  
    --更新ITEM属性
    LOG(LN_REQUEST_ID, 'UPDATE_ITEM_ATTR', '更新ITEM属性 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    UPDATE_ITEM_ATTRIBUTES(LV_ERROR_CODE, LV_ERROR_MESSAGE, P_SR_INSTANCE_ID);
  
    --清除临时表数据
    LOG(LN_REQUEST_ID, 'DEL_BOM_TMP_TABLE', '清除BOM临时表数据 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_BOM_SUB_TMP CMB
       WHERE CMB.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_BOM_TMP_TABLE', '***ERROR*** DELETE BOM TMP TABLE 出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --将BIC表中的替代信息同步到临时表
    LOG(LN_REQUEST_ID, 'INSERT_BOM_TMP_TABLE', '同步替代料主料信息 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
  
    LV_SQL := 'insert into CUX.CUX_MSC_BOM_SUB_TMP' || CHR(10) ||
              '(ORGANIZATION_ID, ASSEMBLY_ITEM_ID, OPERATION_SEQ_NUM, COMPONENT_ITEM_ID, COMPONENT_ITEM_RETE)' ||
              CHR(10) || 'select bbom.ORGANIZATION_ID,' || CHR(10) || 'bbom.ASSEMBLY_ITEM_ID,' || CHR(10) ||
              'bic.OPERATION_SEQ_NUM,' || CHR(10) || 'bic.COMPONENT_ITEM_ID,' || CHR(10) || 'TO_NUMBER(bic.ATTRIBUTE8)' ||
              CHR(10) || 'from bom_bill_of_materials' || lv_dblink || ' bbom, bom_inventory_components' || lv_dblink ||
              ' bic, CUX.CUX_MSC_ORG_RANGE_ERP' || lv_dblink || ' CMO' || CHR(10) || 'where bic.ATTRIBUTE8 is not null' ||
              CHR(10) || 'and sysdate between bic.EFFECTIVITY_DATE and nvl(bic.DISABLE_DATE, sysdate + 1)' || CHR(10) ||
              'and bbom.bill_sequence_id = bic.bill_sequence_id' || CHR(10) ||
              'and bbom.ORGANIZATION_ID = CMO.ORGANIZATION_ID';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_BOM_TMP_TABLE',
            '***ERROR*** 插入存在替代料的主料信息进入TMP表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --将替代料表BSC中的替代信息同步到临时表
    LOG(LN_REQUEST_ID, 'INSERT_BOM_TMP_TABLE', '同步替代料信息 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LV_SQL := 'INSERT INTO CUX.CUX_MSC_BOM_SUB_TMP' || CHR(10) ||
              '(ORGANIZATION_ID,ASSEMBLY_ITEM_ID,OPERATION_SEQ_NUM,COMPONENT_ITEM_ID,' || CHR(10) ||
              'COMPONENT_ITEM_RETE,SUBSTITUTE_ITEM_ID,SUBSTITUTE_ITEM_TYPE,SUBSTITUTE_ITEM_RATE)' || CHR(10) ||
              'select bbom.ORGANIZATION_ID,bbom.ASSEMBLY_ITEM_ID,bic.OPERATION_SEQ_NUM,bic.COMPONENT_ITEM_ID,' ||
              CHR(10) ||
              'TO_NUMBER(bic.ATTRIBUTE8),bsc.substitute_component_id,bsc.attribute1,TO_NUMBER(bsc.attribute8)' ||
              CHR(10) || 'from bom_bill_of_materials' || lv_dblink || '     bbom,bom_inventory_components' || lv_dblink ||
              '  bic,' || CHR(10) || 'BOM_SUBSTITUTE_COMPONENTS' || lv_dblink || ' bsc,CUX.CUX_MSC_ORG_RANGE_ERP' ||
              lv_dblink || ' CMO' || CHR(10) ||
              'where (bsc.ATTRIBUTE8 is not null OR BSC.ATTRIBUTE1 IN (''1'', ''2'', ''3'', ''Y'', ''N''))' || CHR(10) ||
              'and sysdate between bic.EFFECTIVITY_DATE and nvl(bic.DISABLE_DATE, sysdate + 1)' || CHR(10) ||
              'and bbom.bill_sequence_id = bic.bill_sequence_id' || CHR(10) ||
              'and bic.component_sequence_id = bsc.component_sequence_id' || CHR(10) || 'and NVL(BSC.ACD_TYPE, 1) <> 3' ||
              CHR(10) || 'and bbom.ORGANIZATION_ID = CMO.ORGANIZATION_ID';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_BOM_TMP_TABLE',
            '***ERROR*** 插入替代料信息进入TMP表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --将MSC中的COMPONENT_SEQUENCE_ID 更新到临时表中的MSC_BILL_SEQ_ID字段
    LOG(LN_REQUEST_ID, 'UPDATE_BOM_TMP', '更新TMP表中的BILL SEQ ID  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      update CUX.CUX_MSC_BOM_SUB_TMP CM
         set MSC_SJ_BILL_SEQ_ID =
             (select mbc.component_sequence_id
                from msc_boms mb, msc_bom_components mbc, msc_item_id_lid mi, msc_item_id_lid mi1
               where mb.sr_instance_id = p_SR_INSTANCE_ID
                 and mb.plan_id = -1
                 and mb.sr_instance_id = mbc.sr_instance_id
                 and mb.bill_sequence_id = mbc.bill_sequence_id
                 and mb.plan_id = mbc.plan_id
                 and mb.organization_id = mbc.organization_id
                 and mb.sr_instance_id = mi.sr_instance_id
                 and cm.organization_id = mb.organization_id
                 and mb.assembly_item_id = mi.inventory_item_id
                 and mi.sr_inventory_item_id = cm.assembly_item_id
                 and mbc.sr_instance_id = mi1.sr_instance_id
                 and mbc.inventory_item_id = mi1.inventory_item_id
                 and mi1.sr_inventory_item_id = cm.component_item_id
                 and cm.operation_seq_num = mbc.operation_seq_num)
       WHERE CM.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_BOM_TMP', '***ERROR*** 更新TMP表中的BILL SEQ ID出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --将MSC中的替代料ID更新到临时表中的MSC_SUB_ITEM_ID字段
    LOG(LN_REQUEST_ID, 'UPDATE_BOM_TMP', '更新TMP表中的替代料ID  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      update CUX.CUX_MSC_BOM_SUB_TMP CM
         set MSC_SJ_SUB_ITEM_ID =
             (SELECT MCS.SUBSTITUTE_ITEM_ID
                FROM MSC_COMPONENT_SUBSTITUTES MCS, msc_item_id_lid mii
               WHERE MCS.PLAN_ID = -1
                 AND MCS.ORGANIZATION_ID = CM.organization_id
                 AND MCS.Component_Sequence_Id = CM.MSC_SJ_BILL_SEQ_ID
                 AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                 AND MII.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                 AND MCS.SUBSTITUTE_ITEM_ID = MII.INVENTORY_ITEM_ID
                 AND MII.SR_INVENTORY_ITEM_ID = CM.SUBSTITUTE_ITEM_ID)
       WHERE CM.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_BOM_TMP', '***ERROR*** 更新TMP表中的替代料ID出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除BOM收集中组件表的DFF8的数据
    LOG(LN_REQUEST_ID, 'DEL_BOM_DFF', '清除BOM收集数据主料的DFF  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE msc_bom_components MBC
         SET ATTRIBUTE8 = NULL
       WHERE MBC.PLAN_ID = -1
         AND MBC.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MBC.ORGANIZATION_ID in (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_BOM_DFF', '***ERROR*** 清除BOM主料的DFF出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新BOM收集中组件表的DFF
    LOG(LN_REQUEST_ID, 'UPDATE_BOM_DFF', '更新BOM收集数据主料的DFF  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE msc_bom_components MBC
         SET ATTRIBUTE8 =
             (SELECT CM1.COMPONENT_ITEM_RETE
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM1
               WHERE CM1.MSC_SJ_BILL_SEQ_ID = MBC.COMPONENT_SEQUENCE_ID
                 AND CM1.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                 AND CM1.SUBSTITUTE_ITEM_ID IS NULL)
       WHERE MBC.PLAN_ID = -1
         AND MBC.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND EXISTS (SELECT 1
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM, CUX.CUX_MSC_ORG_RANGE CMO
               WHERE CM.MSC_SJ_BILL_SEQ_ID = MBC.COMPONENT_SEQUENCE_ID
                 AND CM.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                 AND CM.ORGANIZATION_ID = CMO.ORGANIZATION_ID
                 AND MBC.ORGANIZATION_ID = CMO.ORGANIZATION_ID
                 AND CM.SUBSTITUTE_ITEM_ID IS NULL);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_BOM_DFF', '***ERROR*** 更新BOM主料的DFF出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除BOM收集中替代料表的DFF数据
    LOG(LN_REQUEST_ID, 'DEL_SUB_BOM_DFF', '清除BOM收集表替代料的DFF  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE MSC_COMPONENT_SUBSTITUTES MCS
         SET ATTRIBUTE1 = NULL, ATTRIBUTE8 = NULL
       WHERE MCS.PLAN_ID = -1
         AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MCS.ORGANIZATION_ID in (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        retcode := 2;
        LOG(LN_REQUEST_ID, 'DEL_SUB_BOM_DFF', '***ERROR*** 清除BOM替代料的DFF出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新BOM收集中替代料表的DFF
    LOG(LN_REQUEST_ID, 'UPDATE_SUB_BOM_DFF', '更新BOM收集表替代料的DFF  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE MSC_COMPONENT_SUBSTITUTES MCS
         SET (ATTRIBUTE1, ATTRIBUTE8) =
             (SELECT CM1.SUBSTITUTE_ITEM_TYPE, CM1.SUBSTITUTE_ITEM_RATE
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM1
               WHERE 1 = 1
                 AND CM1.SUBSTITUTE_ITEM_ID IS NOT NULL
                 AND CM1.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM1.MSC_SJ_SUB_ITEM_ID = MCS.SUBSTITUTE_ITEM_ID
                 AND CM1.MSC_SJ_BILL_SEQ_ID = MCS.COMPONENT_SEQUENCE_ID)
       WHERE MCS.PLAN_ID = -1
         AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND EXISTS (SELECT 1
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM, CUX.CUX_MSC_ORG_RANGE CMO
               WHERE 1 = 1
                 AND CM.SUBSTITUTE_ITEM_ID IS NOT NULL
                 AND CM.ORGANIZATION_ID = CMO.ORGANIZATION_ID
                 AND CMO.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM.MSC_SJ_SUB_ITEM_ID = MCS.SUBSTITUTE_ITEM_ID
                 AND CM.MSC_SJ_BILL_SEQ_ID = MCS.COMPONENT_SEQUENCE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        retcode := 2;
        LOG(LN_REQUEST_ID, 'UPDATE_SUB_BOM_DFF', '***ERROR*** 更新BOM替代料的DFF出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除替代组头表数据
    LOG(LN_REQUEST_ID, 'DEL_SUB_GRP', '清除替代组头表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CBS;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_SUB_GRP', '***ERROR*** 清除替代组头表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --同步替代组头表数据到ASCP
    LOG(LN_REQUEST_ID, 'INSERT_SUB_GRP', '同步替代组头表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
  
    LV_SQL := 'insert into CUX.CUX_MSC_BOM_SUB_GRP_HEADERS' || CHR(10) ||
              ' (GROUP_ID,ORGANIZATION_ID,GROUP_NAME,GROUP_DESCRIPTION,REVISION,STATUS_CODE,' || CHR(10) ||
              'SCOPE,EFFECTIVITY_DATE,DISABLE_DATE,REMARK,SUBSTITUTE_CLASS,ORG_ID,' || CHR(10) ||
              'OWNED_ORGANIZATION_ID,CREATED_BY,CREATION_DATE,LAST_UPDATED_BY,' || CHR(10) ||
              'LAST_UPDATE_LOGIN,LAST_UPDATE_DATE,ATTRIBUTE_CATEGORY,ATTRIBUTE1,' || CHR(10) ||
              'ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,' || CHR(10) ||
              'ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10,ATTRIBUTE11,ATTRIBUTE12,' || CHR(10) ||
              'ATTRIBUTE13,ATTRIBUTE14,ATTRIBUTE15)' || CHR(10) ||
              'SELECT CBS.GROUP_ID,CBS.ORGANIZATION_ID,CBS.GROUP_NAME,CBS.GROUP_DESCRIPTION,CBS.REVISION,' || CHR(10) ||
              'CBS.STATUS_CODE,CBS.SCOPE,CBS.EFFECTIVITY_DATE,CBS.DISABLE_DATE,CBS.REMARK,CBS.SUBSTITUTE_CLASS,' ||
              CHR(10) || 'CBS.ORG_ID,CBS.OWNED_ORGANIZATION_ID,CBS.CREATED_BY,CBS.CREATION_DATE,CBS.LAST_UPDATED_BY,' ||
              CHR(10) ||
              'CBS.LAST_UPDATE_LOGIN,CBS.LAST_UPDATE_DATE,CBS.ATTRIBUTE_CATEGORY,CBS.ATTRIBUTE1,CBS.ATTRIBUTE2,' ||
              CHR(10) || 'CBS.ATTRIBUTE3,CBS.ATTRIBUTE4,CBS.ATTRIBUTE5,CBS.ATTRIBUTE6,CBS.ATTRIBUTE7,CBS.ATTRIBUTE8,' ||
              CHR(10) ||
              'CBS.ATTRIBUTE9,CBS.ATTRIBUTE10,CBS.ATTRIBUTE11,CBS.ATTRIBUTE12,CBS.ATTRIBUTE13,CBS.ATTRIBUTE14,CBS.ATTRIBUTE15' ||
              CHR(10) || 'FROM CUX.CUX_BOM_SUBSTITUTE_GRP_HEADERS' || lv_dblink || ' CBS';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'INSERT_SUB_GRP', '***ERROR*** 同步替代组头表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除替代组明细表数据
    LOG(LN_REQUEST_ID, 'DEL_SUB_GRP_D', '清除替代组明细表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_BOM_SUB_GRP_LINES CBS;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_SUB_GRP_D', '***ERROR*** 清除替代组明细表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --同步替代组明细表数据到ASCP
    LOG(LN_REQUEST_ID, 'INSERT_SUB_GRP_D', '同步替代组明细表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LV_SQL := 'insert into CUX.CUX_MSC_BOM_SUB_GRP_LINES' || CHR(10) ||
              '(GROUP_ELEMENT_ID,GROUP_ID,ORGANIZATION_ID,LINE_NO,ITEM_NUMBER,' || CHR(10) ||
              'EFFECTIVE_DATE,DISABLE_DATE,REMARK,ORG_ID,INVENTORY_ITEM_ID,' || CHR(10) ||
              'OWNER_ORGANIZATION_ID,CREATED_BY,CREATION_DATE,LAST_UPDATED_BY,' || CHR(10) ||
              'LAST_UPDATE_LOGIN,LAST_UPDATE_DATE,ATTRIBUTE_CATEGORY,ATTRIBUTE1,' || CHR(10) ||
              'ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,' || CHR(10) ||
              'ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10,ATTRIBUTE11,ATTRIBUTE12,' || CHR(10) ||
              'ATTRIBUTE13,ATTRIBUTE14,ATTRIBUTE15)' || CHR(10) ||
              'SELECT CBS.GROUP_ELEMENT_ID,CBS.GROUP_ID,CBS.ORGANIZATION_ID,CBS.LINE_NO,' || CHR(10) ||
              'CBS.ITEM_NUMBER,CBS.EFFECTIVE_DATE,CBS.DISABLE_DATE,CBS.REMARK,CBS.ORG_ID,' || CHR(10) ||
              'CBS.INVENTORY_ITEM_ID,CBS.OWNER_ORGANIZATION_ID,CBS.CREATED_BY,CBS.CREATION_DATE,' || CHR(10) ||
              'CBS.LAST_UPDATED_BY,CBS.LAST_UPDATE_LOGIN,CBS.LAST_UPDATE_DATE,CBS.ATTRIBUTE_CATEGORY,' || CHR(10) ||
              'CBS.ATTRIBUTE1,CBS.ATTRIBUTE2,CBS.ATTRIBUTE3,CBS.ATTRIBUTE4,CBS.ATTRIBUTE5,' || CHR(10) ||
              'CBS.ATTRIBUTE6,CBS.ATTRIBUTE7,CBS.ATTRIBUTE8,CBS.ATTRIBUTE9,CBS.ATTRIBUTE10,' || CHR(10) ||
              'CBS.ATTRIBUTE11,CBS.ATTRIBUTE12,CBS.ATTRIBUTE13,CBS.ATTRIBUTE14,CBS.ATTRIBUTE15' || CHR(10) ||
              'FROM CUX.CUX_BOM_SUBSTITUTE_GRP_LINES' || lv_dblink || '  CBS';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'INSERT_SUB_GRP_D', '***ERROR*** 同步替代组明细表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除招标比例表
    LOG(LN_REQUEST_ID, 'DEL_PO_BID', '清除招标比例表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO CMAB
       WHERE CMAB.ORG_ID IN (SELECT DISTINCT CMO.ORG_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_PO_BID', '***ERROR*** 清除招标比例表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --同步招标比例表
    LOG(LN_REQUEST_ID, 'INSERT_PO_BID', '同步招标比例表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LV_SQL := 'INSERT INTO CUX.CUX_MSC_ASCP_BID_ACCUM_INFO' || CHR(10) ||
              'SELECT SOURCE_TYPE,HEADER_ID,ORG_ID,BID_NO,GLOBAL_FLAG,ORGANIZATION_ID,REVISION,' || CHR(10) ||
              'SUBSTITUTE_CLASS,SUBSTITUTE_GROUP_ID,CURRENCY_CODE,SOURCER_ID,STATUS_CODE,BID_QUANTITY,' || CHR(10) ||
              'HEADER_CUMULATED_PLANNED_QTY,HEADER_CUMULATED_PR_QTY,HEADER_CUMULATED_PO_QTY,' || CHR(10) ||
              'PROPORTION_INBOUND,LINE_ID,LINE_NO,INVENTORY_ITEM_ID,VENDOR_ID,VENDOR_SITE_ID,PO_UOM,' || CHR(10) ||
              'UNIT_PRICE,BID_PERCENTAGE,INBOUND_PERCENTAGE,BID_ALLOCATED_QTY,RESPONSIBILITY_LEAD_TIME,' || CHR(10) ||
              'PROCESS_LEAD_TIME,INBOUND_LEAD_TIME,ASN_LEAD_TIME,FIXED_LOT_MULTIPLIER,MIN_ORDER_QUANTITY,' || CHR(10) ||
              'CAPACITY,INSPETION_REQUIRED,LINE_CUMULATED_PLANNED_QTY,LINE_ACTUAL_PLANNED_QTY,LINE_PLANNED_DIFF_QTY,' ||
              CHR(10) ||
              'LINE_ACTUAL_PLANNED_PERCENTAGE,LINE_PLANNED_DIFF_PERCENTAGE,LINE_CUMULATED_PR_QTY,LINE_ACTUAL_PR_QTY,' ||
              CHR(10) ||
              'LINE_PR_DIFF_QTY,LINE_ACTUAL_PR_PERCENTAGE,LINE_PR_DIFF_PERCENTAGE,LINE_CUMULATED_PO_QUANTITY,' ||
              CHR(10) || 'LINE_ACTUAL_PO_QTY,LINE_PO_DIFF_QTY,LINE_ACTUAL_PO_PERCENTAGE,LINE_PO_DIFF_PERCENTAGE,' ||
              CHR(10) || 'LINE_CURRENT_PLANNED_QTY,LINE_CURRENT_PR_QTY,LINE_CURRENT_PO_QTY,LINE_CURRENT_ASN_QTY,' ||
              CHR(10) || 'LINE_CURRENT_RCV_QTY,CREATE_DATE,CURRENT_ALLOCATION_QTY,EFFECTIVE_DATE,DISABLE_DATE,' ||
              CHR(10) || 'NULL,NULL,NULL,NULL                                     ' || CHR(10) ||
              'FROM CUX_MSC_BID_ACCUMULATED_INFO_V' || lv_dblink || '  CMAB' || CHR(10) ||
              'WHERE CMAB.ORG_ID IN (SELECT DISTINCT CMO.ORG_ID FROM CUX.CUX_MSC_ORG_RANGE_ERP' || lv_dblink || ' CMO)';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'INSERT_PO_BID', '***ERROR*** 同步招标比例表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除替代组跨阶替代信息表
    LOG(LN_REQUEST_ID, 'DEL_BOM_CROSS', '清除错阶表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CBC;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'DEL_BOM_CROSS', '***ERROR*** 清除错阶表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --同步替代组跨阶替代信息表到ASCP
    LOG(LN_REQUEST_ID, 'INSERT_BOM_CROSS', '同步错阶表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LV_SQL := 'insert into CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB' || CHR(10) ||
              '(GRP_CLOSS_LEVEL_SUBSTITUTE_ID,GROUP_ELEMENT_ID,LINE_NO,COMPONENT_ITEM_ID,SUB_COMPONENT_ITEM_ID,' ||
              CHR(10) || 'EFFECTIVE_DATE,DISABLE_DATE,REMARK,ORG_ID,ORGANIZATION_ID,OWNER_ORGANIZATION_ID,CREATED_BY,' ||
              CHR(10) ||
              'CREATION_DATE,LAST_UPDATED_BY,LAST_UPDATE_LOGIN,LAST_UPDATE_DATE,ATTRIBUTE_CATEGORY,ATTRIBUTE1,' ||
              CHR(10) ||
              'ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,ATTRIBUTE9,ATTRIBUTE10,' ||
              CHR(10) || 'ATTRIBUTE11,ATTRIBUTE12,ATTRIBUTE13,ATTRIBUTE14,ATTRIBUTE15)' || CHR(10) ||
              'SELECT CBC.GRP_CLOSS_LEVEL_SUBSTITUTE_ID,CBC.GROUP_ELEMENT_ID,CBC.LINE_NO,CBC.COMPONENT_ITEM_ID,' ||
              CHR(10) ||
              'CBC.SUB_COMPONENT_ITEM_ID,CBC.EFFECTIVE_DATE,CBC.DISABLE_DATE,CBC.REMARK,CBC.ORG_ID,CBC.ORGANIZATION_ID,' ||
              CHR(10) ||
              'CBC.OWNER_ORGANIZATION_ID,CBC.CREATED_BY,CBC.CREATION_DATE,CBC.LAST_UPDATED_BY,CBC.LAST_UPDATE_LOGIN,' ||
              CHR(10) ||
              'CBC.LAST_UPDATE_DATE,CBC.ATTRIBUTE_CATEGORY,CBC.ATTRIBUTE1,CBC.ATTRIBUTE2,CBC.ATTRIBUTE3,CBC.ATTRIBUTE4,' ||
              CHR(10) ||
              'CBC.ATTRIBUTE5,CBC.ATTRIBUTE6,CBC.ATTRIBUTE7,CBC.ATTRIBUTE8,CBC.ATTRIBUTE9,CBC.ATTRIBUTE10,CBC.ATTRIBUTE11,' ||
              CHR(10) || 'CBC.ATTRIBUTE12,CBC.ATTRIBUTE13,CBC.ATTRIBUTE14,CBC.ATTRIBUTE15' || CHR(10) ||
              'FROM CUX.CUX_BOM_CROSS_LEVEL_SUBSTITUTE' || lv_dblink || ' CBC';
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'INSERT_BOM_CROSS', '***ERROR*** 同步错阶表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新客制表中的MSC栏位
    LOG(LN_REQUEST_ID, 'UPDATE_PO_BID', '更新招标比例表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE CUX.CUX_MSC_ASCP_BID_ACCUM_INFO CMAB
         SET CMAB.MSC_INVENTORY_ITEM_ID =
             (SELECT MII.INVENTORY_ITEM_ID
                FROM MSC_ITEM_ID_LID MII
               WHERE MII.SR_INVENTORY_ITEM_ID = CMAB.INVENTORY_ITEM_ID
                 AND MII.SR_INSTANCE_ID = p_SR_INSTANCE_ID),
             CMAB.MSC_VENDOR_ID        =
             (SELECT MTI.TP_ID
                FROM MSC_TP_ID_LID MTI
               WHERE MTI.SR_TP_ID = CMAB.VENDOR_ID
                 AND MTI.PARTNER_TYPE = 1
                 AND MTI.SR_INSTANCE_ID = p_SR_INSTANCE_ID),
             CMAB.MSC_VENDOR_SITE_ID   =
             (SELECT MTSI.TP_SITE_ID
                FROM MSC_TP_SITE_ID_LID MTSI
               WHERE MTSI.SR_TP_SITE_ID = CMAB.VENDOR_SITE_ID
                 AND MTSI.PARTNER_TYPE = 1
                 AND MTSI.SR_INSTANCE_ID = p_SR_INSTANCE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_PO_BID', '***ERROR*** 更新招标比例表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    LOG(LN_REQUEST_ID, 'UPDATE_SUB_GRP_D', '更新替代组明细表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE CUX.CUX_MSC_BOM_SUB_GRP_LINES CMBS
         SET CMBS.MSC_ITEM_ID =
             (SELECT MII.INVENTORY_ITEM_ID
                FROM MSC_ITEM_ID_LID MII
               WHERE MII.SR_INVENTORY_ITEM_ID = CMBS.INVENTORY_ITEM_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_SUB_GRP_D', '***ERROR*** 更新替代组明细表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
    LOG(LN_REQUEST_ID, 'UPDATE_BOM_CROSS', '更新错阶表  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMBC
         SET CMBC.MSC_COMPONENT_ITEM_ID =
             (SELECT MII.INVENTORY_ITEM_ID
                FROM MSC_ITEM_ID_LID MII
               WHERE MII.SR_INVENTORY_ITEM_ID = CMBC.COMPONENT_ITEM_ID),
             CMBC.MSC_SUB_COMP_ITEM_ID =
             (SELECT MII.INVENTORY_ITEM_ID
                FROM MSC_ITEM_ID_LID MII
               WHERE MII.SR_INVENTORY_ITEM_ID = CMBC.SUB_COMPONENT_ITEM_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID, 'UPDATE_BOM_CROSS', '***ERROR*** 更新错阶表出现错误: ' || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      retcode := 2;
  END UPDATE_SUB_RATE;

  /***********************************************************************************
   NAME: UPDATE_PLAN_SUB_RATE
   DESCRIPTION:将替代料DFF信息同步至MSC BOM相关的表
  ***********************************************************************************/
  PROCEDURE UPDATE_PLAN_SUB_RATE(retcode OUT VARCHAR2, P_REQUEST_ID NUMBER, p_SR_INSTANCE_ID NUMBER, P_PLAN_ID NUMBER) IS
    LE_EXCEPTION EXCEPTION;
  BEGIN
    --将MSC中的COMPONENT_SEQUENCE_ID 更新到临时表中的MSC_BILL_SEQ_ID字段
    LOG(P_REQUEST_ID,
        'UPDATE_BOM_PLAN',
        '更新计划的BOM TMP表BILL SEQ ID字段  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      update CUX.CUX_MSC_BOM_SUB_TMP CM
         set MSC_BILL_SEQ_ID =
             (select mbc.component_sequence_id
                from msc_boms mb, msc_bom_components mbc, msc_item_id_lid mi, msc_item_id_lid mi1
               where mb.sr_instance_id = p_SR_INSTANCE_ID
                 and mb.plan_id = P_PLAN_ID
                 and mb.sr_instance_id = mbc.sr_instance_id
                 and mb.bill_sequence_id = mbc.bill_sequence_id
                 and mb.plan_id = mbc.plan_id
                 and mb.organization_id = mbc.organization_id
                 and mb.sr_instance_id = mi.sr_instance_id
                 and cm.organization_id = mb.organization_id
                 and mb.assembly_item_id = mi.inventory_item_id
                 and mi.sr_inventory_item_id = cm.assembly_item_id
                 and mbc.sr_instance_id = mi1.sr_instance_id
                 and mbc.inventory_item_id = mi1.inventory_item_id
                 and mi1.sr_inventory_item_id = cm.component_item_id
                 and cm.operation_seq_num = mbc.operation_seq_num)
       WHERE CM.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'UPDATE_BOM_PLAN',
            '***ERROR*** 更新计划的BOM TMP表BILL SEQ ID字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --将MSC中的替代料ID更新到临时表中的MSC_SUB_ITEM_ID字段
    LOG(P_REQUEST_ID,
        'UPDATE_BOM_PLAN',
        '更新计划的BOM TMP表替代料ID字段  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      update CUX.CUX_MSC_BOM_SUB_TMP CM
         set MSC_SUB_ITEM_ID =
             (SELECT MCS.SUBSTITUTE_ITEM_ID
                FROM MSC_COMPONENT_SUBSTITUTES MCS, msc_item_id_lid mii
               WHERE MCS.PLAN_ID = -1
                 AND MCS.ORGANIZATION_ID = CM.organization_id
                 AND MCS.Component_Sequence_Id = CM.MSC_SJ_BILL_SEQ_ID
                 AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                 AND MII.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                 AND MCS.SUBSTITUTE_ITEM_ID = MII.INVENTORY_ITEM_ID
                 AND MII.SR_INVENTORY_ITEM_ID = CM.SUBSTITUTE_ITEM_ID)
       WHERE CM.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'UPDATE_BOM_PLAN',
            '***ERROR*** 更新计划的BOM TMP表替代料ID字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除BOM计划中组件表的DFF8的数据
    LOG(P_REQUEST_ID, 'DEL_BOM_PLAN', '清除计划的BOM TMP表主料DFF字段  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE msc_bom_components MBC
         SET ATTRIBUTE8 = NULL
       WHERE MBC.PLAN_ID = P_PLAN_ID
         AND MBC.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MBC.ORGANIZATION_ID in (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'DEL_BOM_PLAN',
            '***ERROR*** 清除计划的BOM TMP表主料DFF字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新BOM收集中组件表的DFF
    LOG(P_REQUEST_ID,
        'UPDATE_BOM_PLAN',
        '更新计划的BOM TMP表主料DFF字段  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE msc_bom_components MBC
         SET ATTRIBUTE8 =
             (SELECT CM1.COMPONENT_ITEM_RETE
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM1
               WHERE CM1.MSC_SJ_BILL_SEQ_ID = MBC.COMPONENT_SEQUENCE_ID
                 AND CM1.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                 AND CM1.SUBSTITUTE_ITEM_ID IS NULL)
       WHERE MBC.PLAN_ID = P_PLAN_ID
         AND MBC.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND EXISTS (SELECT 1
                FROM CUX.CUX_MSC_BOM_SUB_TMP CM, CUX.CUX_MSC_ORG_RANGE CMO
               WHERE CM.MSC_SJ_BILL_SEQ_ID = MBC.COMPONENT_SEQUENCE_ID
                 AND CM.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                 AND CM.ORGANIZATION_ID = CMO.ORGANIZATION_ID
                 AND CMO.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                 AND CM.SUBSTITUTE_ITEM_ID IS NULL);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'UPDATE_BOM_PLAN',
            '***ERROR*** 更新计划的BOM TMP表主料DFF字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --清除BOM收集中替代料表的DFF数据
    LOG(P_REQUEST_ID,
        'DEL_BOM_PLAN',
        '清除计划的BOM TMP表替代料料DFF字段  ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE MSC_COMPONENT_SUBSTITUTES MCS
         SET ATTRIBUTE1 = NULL, ATTRIBUTE8 = NULL
       WHERE MCS.PLAN_ID = P_PLAN_ID
         AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MCS.ORGANIZATION_ID in (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'DEL_BOM_PLAN',
            '***ERROR*** 清除计划的BOM TMP表替代料料DFF字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新BOM收集中替代料表的DFF
    LOG(P_REQUEST_ID,
        'UPDATE_BOM_PLAN',
        '更新计划的BOM TMP表替代料料DFF字段 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE MSC_COMPONENT_SUBSTITUTES MCS
         SET (ATTRIBUTE1, ATTRIBUTE8) =
             (SELECT CM1.SUBSTITUTE_ITEM_TYPE, CM1.SUBSTITUTE_ITEM_RATE
                FROM cux.CUX_MSC_BOM_SUB_TMP CM1
               WHERE 1 = 1
                 AND CM1.SUBSTITUTE_ITEM_ID IS NOT NULL
                 AND CM1.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM1.MSC_SJ_SUB_ITEM_ID = MCS.SUBSTITUTE_ITEM_ID
                 AND CM1.MSC_SJ_BILL_SEQ_ID = MCS.COMPONENT_SEQUENCE_ID)
       WHERE MCS.PLAN_ID = P_PLAN_ID
         AND MCS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND EXISTS (SELECT 1
                FROM cux.CUX_MSC_BOM_SUB_TMP CM, CUX.CUX_MSC_ORG_RANGE CMO
               WHERE 1 = 1
                 AND CM.SUBSTITUTE_ITEM_ID IS NOT NULL
                 AND CM.ORGANIZATION_ID = CMO.ORGANIZATION_ID
                 AND CMO.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM.ORGANIZATION_ID = MCS.ORGANIZATION_ID
                 AND CM.MSC_SJ_SUB_ITEM_ID = MCS.SUBSTITUTE_ITEM_ID
                 AND CM.MSC_SJ_BILL_SEQ_ID = MCS.COMPONENT_SEQUENCE_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(P_REQUEST_ID,
            'UPDATE_BOM_PLAN',
            '***ERROR*** 更新计划的BOM TMP表替代料料DFF字段出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      retcode := 2;
  END UPDATE_PLAN_SUB_RATE;

  /***********************************************************************************
   NAME: CALCULATE_PCBA_PROCESS
   DESCRIPTION:处理PCBA自然替代部分
  ***********************************************************************************/
  PROCEDURE CALCULATE_PCBA_PROCESS(p_SR_INSTANCE_ID NUMBER,
                                   P_PLAN_ID        NUMBER,
                                   P_LEVEL_CODE     NUMBER,
                                   PO_ERROR_CODE    OUT VARCHAR2) IS
  
    LT_CUX_MSC_DEMANDS_PLAN GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
  
    CURSOR LC_PCBA IS
      SELECT CMD.*
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD, MSC.MSC_ITEM_CATEGORIES MIC
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.INVENTORY_ITEM_ID = MIC.INVENTORY_ITEM_ID
         AND CMD.ORGANIZATION_ID = MIC.ORGANIZATION_ID
         AND MIC.CATEGORY_SET_ID = 13 --库存
         AND MIC.CATEGORY_NAME = '3.12.0' --PCBA
         AND MIC.ENABLED_FLAG = 'Y'
            --AND CMD.ITEM_NAME LIKE 'TD%'
         AND CMD.LOW_LEVEL_CODE = P_LEVEL_CODE
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
            --AND CMD.ALLOCATED_QUANTITY > 0
         AND NVL(MIC.DISABLE_DATE, SYSDATE + 1) > TRUNC(SYSDATE)
       ORDER BY CMD.LOW_LEVEL_CODE,
                CMD.INVENTORY_ITEM_ID,
                CMD.USING_ASSEMBLY_DEMAND_DATE,
                CMD.SUPPLY_DATE,
                CMD.DEMAND_PRIORITY,
                CMD.TRANSACTION_ID;
  
    CURSOR LC_ZR_SUB(P_BILL_ID          NUMBER,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
            --AND MBC.BILL_SEQUENCE_ID = /*GET_BILL_ID(-1, p_SR_INSTANCE_ID, P_COMPONENT_SEQ_ID) --*/P_BILL_ID 
         and DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = \*GET_BILL_ID(P_PLAN_ID, p_SR_INSTANCE_ID, P_COMPONENT_SEQ_ID)--*\P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /* WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_PCB_RESIDUE IS
      SELECT CACP.*
        FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGH, CUX.CUX_MSC_GROUP_QTY_LINE CMGL, CUX.CUX_ASCP_CHANGE_PEG_TEMP CACP
       WHERE CMGH.ZIRAN_FLAG = 'M'
         AND CMGH.HEADER_ID = CMGL.HEADER_ID
         AND CMGL.INVENTORY_ITEM_ID = CACP.INVENTORY_ITEM_ID;
  
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE               VARCHAR2(10);
    LN_USED_QTY                 NUMBER := 0;
    LN_PLAN_QTY                 NUMBER := 0;
    LN_D_COUNT                  NUMBER := 1;
    LN_S_COUNT                  NUMBER := 1;
    LN_P_COUNT                  NUMBER := 1;
    LN_PCBA_TOTAL               NUMBER := 0;
    LN_PCB_TOTAL                NUMBER := 0;
    LN_DEMAND_ID                NUMBER;
    LN_TRANSACTION_ID           NUMBER;
    LN_PEGGING_ID               NUMBER;
    LN_SOURCE_ORG_ID            NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME   NUMBER;
    LN_SUB_POST_LEAD_TIME       NUMBER;
    LN_SUB_FULL_LEAD_TIME       NUMBER;
    LN_SUB_FIXED_LEAD_TIME      NUMBER;
    LN_SUB_VARIA_LEAD_TIME      NUMBER;
    LN_PCBA_S_ID                NUMBER;
    LN_PCBA_D_ID                NUMBER;
    LN_PCBA_P_ID                NUMBER;
    LN_TOTAL_QTY                NUMBER;
    LN_RESIDUE_QTY              NUMBER;
    LN_SUB_TOTAL_QTY            NUMBER;
    LN_TOTAL_PLAN_QTY           NUMBER;
    LN_TOTAL_DEMAND_QTY         NUMBER;
    LN_ASSY_USED_QTY            NUMBER;
    LN_CROSS_HEADER_ID          NUMBER;
    LN_RESIDUE_PEGGING_ID       NUMBER;
    LN_RESIDUE_TRANSACTION_ID   NUMBER;
    LN_PCB_PREV_PEGGING_ID      NUMBER;
    LN_PCB_END_PEGGING_ID       NUMBER;
    LN_PCB_END_ORIGINATION_TYPE NUMBER;
    LN_PCB_ORG_ID               NUMBER;
    LD_PCB_DEMAND_DATE          DATE;
    LD_PCB_SUPPLY_DATE          DATE;
    LN_RESIDUE_TRANC_QTY        NUMBER;
    LD_PCB_NEW_SCHEDULE_DATE    DATE;
    LD_PCB_OLD_SCHEDULE_DATE    DATE;
    LD_PCB_NEED_BY_DATE         DATE;
    LD_PCB_NEW_DOCK_DATE        DATE;
    LD_PCB_NEW_WIP_START_DATE   DATE;
    LD_PCB_NEW_PLACEMENT_DATE   DATE;
    LN_PCB_PER_QTY              NUMBER;
    LN_PCB_ITEM_ID              NUMBER;
    LN_PCB_DEMAND_ID            NUMBER;
    LN_COMPLETED_QTY            NUMBER;
    LV_WIP_PROCESS_FLAG         VARCHAR2(10);
    LV_PROCESS_FLAG             VARCHAR2(1);
    LN_PCBA_PEGGING_ID          NUMBER;
    LN_RDJ_PEGGING_ID           NUMBER;
    LD_USING_ASSY_D_DATE        DATE;
    LV_INSERT_SUPPLY_FLAG       VARCHAR2(10);
    LV_SUB_ITEM_TYPE            VARCHAR2(20);
    LN_LEVEL1_QTY               NUMBER;
    LN_LEVEL2_QTY               NUMBER;
    LN_LEVEL3_QTY               NUMBER;
    LV_BOM_FLAG                 VARCHAR2(1); --Added by V1.018
    LN_USAGE_QTY                NUMBER;
    LN_PCBA_COUNT               NUMBER := 0;
    LV_NO_PCBA_SUB_FLAG         VARCHAR2(1);
    LN_SUM                      NUMBER;
    LT_PEGGING_TEMP             CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP              CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP            CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
  
    DELETE CUX.CUX_MSC_WIP_PROCESS_RANGE;
    DELETE CUX.CUX_MSC_WIP_ITEM_RANGE;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'PCBA_COUNT', 'LOW LEVEL CODE：' || P_LEVEL_CODE);
    BEGIN
      SELECT COUNT(*)
        INTO LN_SUM
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD, MSC.MSC_ITEM_CATEGORIES MIC
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.INVENTORY_ITEM_ID = MIC.INVENTORY_ITEM_ID
         AND CMD.ORGANIZATION_ID = MIC.ORGANIZATION_ID
         AND MIC.CATEGORY_SET_ID = 13 --库存
         AND MIC.CATEGORY_NAME = '3.12.0' --PCBA
         AND MIC.ENABLED_FLAG = 'Y'
            --AND CMD.ITEM_NAME LIKE 'TD%'
         AND CMD.LOW_LEVEL_CODE = P_LEVEL_CODE
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
            --AND CMD.ALLOCATED_QUANTITY > 0
         AND NVL(MIC.DISABLE_DATE, SYSDATE + 1) > TRUNC(SYSDATE);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_SUM := 0;
    END;
    OPEN LC_PCBA;
    LOOP
      FETCH LC_PCBA bulk collect
        into LT_CUX_MSC_DEMANDS_PLAN LIMIT 5000;
    
      for r in 1 .. LT_CUX_MSC_DEMANDS_PLAN.count loop
        LN_PCBA_COUNT := LN_PCBA_COUNT + 1;
        BEGIN
          SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY
            INTO LV_PROCESS_FLAG, LN_PLAN_QTY
            FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
           WHERE CMD.PLAN_ID = P_PLAN_ID
             AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
             AND CMD.PEGGING_ID = LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_PROCESS_FLAG := 'Y';
        END;
      
        IF LV_PROCESS_FLAG = 'N' THEN
          LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                      'PCBA_COUNT',
                      '总记录数：' || NVL(LN_SUM, 0) || '  DEMAND_ID = ' || LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID ||
                      '  PCBA记录：' || LN_PCBA_COUNT);
        
          LN_PCBA_TOTAL := 0;
          LN_PCB_TOTAL  := 0;
          IF GV_LOG_FLAG = 'Y' THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** PCBA 000 DEMAND_ID ' || LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID);
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** PCBA 001 料号 ' ||
                GET_ITEM_NAME(P_PLAN_ID,
                              p_SR_INSTANCE_ID,
                              LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                              LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** PCBA 002 总需分配数量 ' || LN_PLAN_QTY);
          END IF;
          --LN_PLAN_QTY := LT_CUX_MSC_DEMANDS_PLAN(r).ALLOCATED_QUANTITY;
          --先计算自然替代跟主料总的可供应量
          LN_TOTAL_QTY := 0;
        
          /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
          DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
          DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
          /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
          LV_NO_PCBA_SUB_FLAG := 'N'; --Added by V1.022
          FOR LR_ZR_SUB IN LC_ZR_SUB(LT_CUX_MSC_DEMANDS_PLAN(r).BILL_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).END_ITEM_USAGE) LOOP
            BEGIN
              SELECT GET_SOURCE_ORG(P_PLAN_ID,
                                    P_SR_INSTANCE_ID,
                                    LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                    LR_ZR_SUB.SUBSTITUTE_ITEM_ID)
                INTO LN_SOURCE_ORG_ID
                FROM DUAL;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                LN_SOURCE_ORG_ID := -1;
            END;
          
            SELECT DECODE(LN_SOURCE_ORG_ID, -1, NULL, LN_SOURCE_ORG_ID) INTO LN_SOURCE_ORG_ID FROM DUAL;
          
            SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
          
            BEGIN
              INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
                (HEADER_ID, ORGANIZATION_ID, SOURCE_ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
              VALUES
                (LN_CROSS_HEADER_ID,
                 LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                 LN_SOURCE_ORG_ID,
                 LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
                 LR_ZR_SUB.ZR_SUB_FLAG);
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***ERROR*** INSERT PCBA SUPPLIES 0052 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            END;
          
            --Added below by V1.022
            IF LR_ZR_SUB.ZR_SUB_FLAG = 'Y' THEN
              LV_NO_PCBA_SUB_FLAG := 'Y';
            --END IF; --Commented by V1.028
            --Added above by V1.022
          
            --Insert PCB主料--Added SUM FLAG by V1.008
            BEGIN
              INSERT INTO CUX.CUX_MSC_GROUP_QTY_LINE
                (HEADER_ID, LINE_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, PER_QTY, SUM_FLAG)
                select LN_CROSS_HEADER_ID,
                       CUX.CUX_MSC_GROUP_QTY_LINE_S.NEXTVAL,
                       NVL(LN_SOURCE_ORG_ID, LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID),
                       mbc.Inventory_Item_Id,
                       MBC.USAGE_QUANTITY,
                       'Y'
                  from msc_bom_components mbc, msc_boms mb, MSC.MSC_ITEM_CATEGORIES MIC
                 where mb.plan_id = mbc.plan_id
                   and mb.sr_instance_id = mbc.sr_instance_id
                   and mb.organization_id = mbc.organization_id
                   and mb.bill_sequence_id = mbc.bill_sequence_id
                   and mb.plan_id = P_PLAN_ID
                   and mb.sr_instance_id = p_SR_INSTANCE_ID
                   and mbc.inventory_item_id = mic.inventory_item_id
                   and mbc.organization_id = mic.organization_id
                   and mic.category_set_id = 13
                   and mbc.sr_instance_id = mic.sr_instance_id
                   and mic.category_name = '1.21.0'
                   and mb.organization_id = NVL(LN_SOURCE_ORG_ID, LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID)
                   and mb.assembly_item_id = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                   and GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE) between
                       mbc.effectivity_date and
                       nvl(mbc.disable_date, GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE));
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***ERROR*** INSERT PCBA SUPPLIES 0052 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            END;
            --Insert PCB替代料--Added by V1.008
            BEGIN
              INSERT INTO CUX.CUX_MSC_GROUP_QTY_LINE
                (HEADER_ID, LINE_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, PER_QTY, SUM_FLAG, HEADER_ZIRAN_FLAG)
                select LN_CROSS_HEADER_ID,
                       CUX.CUX_MSC_GROUP_QTY_LINE_S.NEXTVAL,
                       NVL(LN_SOURCE_ORG_ID, LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID),
                       MCS.SUBSTITUTE_ITEM_ID,
                       MBC.USAGE_QUANTITY,
                       'Y',
                       DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N')
                  from MSC_COMPONENT_SUBSTITUTES MCS, msc_bom_components mbc, msc_boms mb, MSC.MSC_ITEM_CATEGORIES MIC
                 where mb.plan_id = mbc.plan_id
                   and mb.sr_instance_id = mbc.sr_instance_id
                   and mb.organization_id = mbc.organization_id
                   and mb.bill_sequence_id = mbc.bill_sequence_id
                   and MCS.plan_id = -1
                   AND MCS.PLAN_ID = MBC.PLAN_ID
                   AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                   AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                   AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                   AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID
                   and mb.sr_instance_id = p_SR_INSTANCE_ID
                   and mbc.inventory_item_id = mic.inventory_item_id
                   and mbc.organization_id = mic.organization_id
                   and mic.category_set_id = 13
                   and mbc.sr_instance_id = mic.sr_instance_id
                   and mic.category_name = '1.21.0'
                   and mb.organization_id = NVL(LN_SOURCE_ORG_ID, LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID)
                   and mb.assembly_item_id = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                   and GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE) between
                       mbc.effectivity_date and
                       nvl(mbc.disable_date, GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE));
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***ERROR*** INSERT PCBA SUPPLIES 0052 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            END;
          END IF; --Added by V1.028
          END LOOP;
        
          CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID,
                              LV_NO_PCBA_SUB_FLAG --Added by V1.022
                              ); --计算成套量
          --计算自然替代跟普通替代 主料成套量不能满足部分
          --按照比例分配
          CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                                   p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                   P_ORGANIZATION_ID => LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                   P_PLAN_QTY        => LN_PLAN_QTY,
                                   P_ALLOT_FLAG      => 'N',
                                   PO_ERROR_CODE     => LV_ERROR_CODE);
          IF LV_ERROR_CODE = 2 THEN
            RAISE LE_EXCEPTION;
          END IF;
        
          BEGIN
            SELECT SUM(NVL(CMGQ.USED_QTY, 0)) INTO LN_TOTAL_QTY FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_TOTAL_QTY := 0;
          END;
        
          IF LN_TOTAL_QTY >= LN_PLAN_QTY THEN
            LN_RESIDUE_QTY := 0;
          ELSE
            LN_RESIDUE_QTY := LN_PLAN_QTY - LN_TOTAL_QTY;
          END IF;
        
          IF LN_TOTAL_QTY > 0 THEN
          
            FOR LR_ZR_SUB IN LC_ZR_SUB(LT_CUX_MSC_DEMANDS_PLAN(r).BILL_ID,
                                       LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID,
                                       LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID,
                                       LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                       LT_CUX_MSC_DEMANDS_PLAN(r).END_ITEM_USAGE) LOOP
            
              --得到此替代料总的可用量
              BEGIN
                SELECT SUM(NVL(CMGQ.USED_QTY, 0)),
                       SUM(NVL(CMGQ.LEVEL1_QTY, 0)),
                       SUM(NVL(CMGQ.LEVEL2_QTY, 0)),
                       SUM(NVL(CMGQ.LEVEL3_QTY, 0))
                  INTO LN_SUB_TOTAL_QTY, LN_LEVEL1_QTY, LN_LEVEL2_QTY, LN_LEVEL3_QTY
                  FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_SUB_TOTAL_QTY := 0;
                  LN_LEVEL1_QTY    := 0;
                  LN_LEVEL2_QTY    := 0;
                  LN_LEVEL3_QTY    := 0;
              END;
              IF GV_LOG_FLAG = 'Y' THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***Note*** PCBA 003 分配料号 ' ||
                    GET_ITEM_NAME(P_PLAN_ID,
                                  p_SR_INSTANCE_ID,
                                  LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                  LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
                SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
                  INTO LV_SUB_ITEM_TYPE
                
                  FROM DUAL;
              
                LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** PCBA 003 料号类型 ' || LV_SUB_ITEM_TYPE);
              
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***Note*** PCBA 004 库存数量齐套数 ' || NVL(LN_LEVEL1_QTY, 0));
              
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***Note*** PCBA 005 在途数量齐套数 ' || NVL(LN_LEVEL2_QTY, 0));
              
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***Note*** PCBA 006 剩余加计划单齐套数 ' || NVL(LN_LEVEL3_QTY, 0));
              
                LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** PCBA 007 分配数量 ' || LN_SUB_TOTAL_QTY);
              END IF;
              BEGIN
                SELECT GET_SOURCE_ORG(P_PLAN_ID,
                                      P_SR_INSTANCE_ID,
                                      LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                      LR_ZR_SUB.SUBSTITUTE_ITEM_ID)
                  INTO LN_SOURCE_ORG_ID
                  FROM DUAL;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_SOURCE_ORG_ID := -1;
              END;
            
              IF LN_SUB_TOTAL_QTY > 0 THEN
              
                BEGIN
                  SELECT CMF.END_ITEM_USAGE
                    INTO LN_USAGE_QTY
                    FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
                   WHERE PEGGING_ID = LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID
                     AND PLAN_ID = P_PLAN_ID
                     AND SR_INSTANCE_ID = P_SR_INSTANCE_ID;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LN_USAGE_QTY := NULL;
                END;
              
                BEGIN
                  SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                         MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                         MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                         MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                         MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
                    INTO LN_SUB_PREPROCE_LEAD_TIME,
                         LN_SUB_POST_LEAD_TIME,
                         LN_SUB_FULL_LEAD_TIME,
                         LN_SUB_FIXED_LEAD_TIME,
                         LN_SUB_VARIA_LEAD_TIME
                    FROM MSC_SYSTEM_ITEMS MSI
                   WHERE MSI.plan_id = P_PLAN_ID
                     AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                     AND MSI.ORGANIZATION_ID = LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID
                     AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LN_SUB_PREPROCE_LEAD_TIME := 0;
                    LN_SUB_POST_LEAD_TIME     := 0;
                    LN_SUB_FULL_LEAD_TIME     := 0;
                    LN_SUB_FIXED_LEAD_TIME    := 0;
                    LN_SUB_VARIA_LEAD_TIME    := 0;
                END;
              
                LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
                LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
                --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
                LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
              
                LN_TOTAL_PLAN_QTY   := LEAST(LN_SUB_TOTAL_QTY, LN_PLAN_QTY);
                LN_TOTAL_DEMAND_QTY := LN_TOTAL_PLAN_QTY;
              
                LN_PLAN_QTY := LN_PLAN_QTY - LN_TOTAL_PLAN_QTY;
              
                IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
                  --1为替代料 2为主料
                  --写入减少原需求供应追溯
                  --WRITE NEED
                  p_change_pegging(p_plan_id        => P_PLAN_ID,
                                   p_sr_instance_id => P_SR_INSTANCE_ID,
                                   p_pegging_id     => LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID,
                                   p_chang_qty      => LN_TOTAL_PLAN_QTY,
                                   p_flag           => 'Y',
                                   P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--Added by V1.027
                                   P_PCBA_FLAG      => 'Y' --Added by V1.008
                                   );
                  --写入一条替代料的需求
                  BEGIN
                    SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
                  
                    LT_DEMAND_TEMP                                := NULL;
                    LT_DEMAND_TEMP.ORDER_PRIORITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_PRIORITY;
                    LT_DEMAND_TEMP.FORECAST_MAD                   := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_MAD;
                    LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                    LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_DESIGNATOR_ID;
                    LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
                    LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .ASSEMBLY_DEMAND_COMP_DATE);
                    LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE);
                    LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                    LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                    LT_DEMAND_TEMP.DEMAND_PRIORITY                := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_PRIORITY;
                    LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_PRIORITY;
                    LT_DEMAND_TEMP.FORECAST_PRIORITY              := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_PRIORITY;
                    LT_DEMAND_TEMP.PLANNING_GROUP                 := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNING_GROUP;
                    LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LT_CUX_MSC_DEMANDS_PLAN(r).DAILY_DEMAND_RATE;
                    LT_DEMAND_TEMP.UNIT_NUMBER                    := LT_CUX_MSC_DEMANDS_PLAN(r).UNIT_NUMBER;
                    LT_DEMAND_TEMP.DISPOSITION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                    LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_ITEM_ID;
                    LT_DEMAND_TEMP.PLAN_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_DEMAND_TEMP.ORGANIZATION_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
                    LT_DEMAND_TEMP.PROJECT_ID                     := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                    LT_DEMAND_TEMP.TASK_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                    LT_DEMAND_TEMP.CUSTOMER_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_ID;
                    LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_SITE_ID;
                    LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                    LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_SITE_ID;
                    LT_DEMAND_TEMP.PROMISE_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_DATE;
                    LT_DEMAND_TEMP.SELLING_PRICE                  := LT_CUX_MSC_DEMANDS_PLAN(r).SELLING_PRICE;
                    LT_DEMAND_TEMP.DMD_LATENESS_COST              := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_LATENESS_COST;
                    LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_SATISFIED_DATE;
                    LT_DEMAND_TEMP.OP_SEQ_NUM                     := LT_CUX_MSC_DEMANDS_PLAN(r).OP_SEQ_NUM;
                    LT_DEMAND_TEMP.UPDATED                        := LT_CUX_MSC_DEMANDS_PLAN(r).UPDATED;
                    LT_DEMAND_TEMP.STATUS                         := LT_CUX_MSC_DEMANDS_PLAN(r).STATUS;
                    LT_DEMAND_TEMP.APPLIED                        := LT_CUX_MSC_DEMANDS_PLAN(r).APPLIED;
                    LT_DEMAND_TEMP.DEMAND_CLASS                   := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                    LT_DEMAND_TEMP.FIRM_QUANTITY                  := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_QUANTITY;
                    LT_DEMAND_TEMP.FIRM_DATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_DATE;
                    LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_QUANTITY;
                    LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_DATE;
                    LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_ORGANIZATION_ID;
                    LT_DEMAND_TEMP.RESERVATION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVATION_ID;
                    LT_DEMAND_TEMP.PARENT_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_ID;
                    LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_PROJECT_ID;
                    LT_DEMAND_TEMP.LENDING_TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_TASK_ID;
                    LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
                    LT_DEMAND_TEMP.ORDER_NUMBER                   := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_NUMBER;
                    LT_DEMAND_TEMP.RESERVED_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVED_QUANTITY;
                    LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                    LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                    LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                    LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                    LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                    LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                    LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                    LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE_CATEGORY;
                    LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
                    LT_DEMAND_TEMP.ATTRIBUTE2                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE2;
                    LT_DEMAND_TEMP.ATTRIBUTE3                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE3;
                    LT_DEMAND_TEMP.ATTRIBUTE4                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE4;
                    LT_DEMAND_TEMP.ATTRIBUTE5                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE5;
                    LT_DEMAND_TEMP.ATTRIBUTE6                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE6;
                    LT_DEMAND_TEMP.ATTRIBUTE7                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE7;
                    LT_DEMAND_TEMP.ATTRIBUTE8                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE8;
                    LT_DEMAND_TEMP.ATTRIBUTE9                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE9;
                    LT_DEMAND_TEMP.ATTRIBUTE10                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE10;
                    LT_DEMAND_TEMP.ATTRIBUTE11                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE11;
                    LT_DEMAND_TEMP.ATTRIBUTE12                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE12;
                    LT_DEMAND_TEMP.ATTRIBUTE13                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE13;
                    LT_DEMAND_TEMP.ATTRIBUTE14                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE14;
                    LT_DEMAND_TEMP.ATTRIBUTE15                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE15;
                    LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_ID;
                    LT_DEMAND_TEMP.ISSUED_QUANTITY                := LT_CUX_MSC_DEMANDS_PLAN(r).ISSUED_QUANTITY;
                    LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).REPETITIVE_SCHEDULE_ID;
                    LT_DEMAND_TEMP.REFRESH_NUMBER                 := LT_CUX_MSC_DEMANDS_PLAN(r).REFRESH_NUMBER;
                    LT_DEMAND_TEMP.REQUEST_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_DATE;
                    LT_DEMAND_TEMP.WIP_STATUS_CODE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_STATUS_CODE;
                    LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_SUPPLY_TYPE;
                    LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_ORG_INSTANCE_ID;
                    LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_ID;
                    LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LT_CUX_MSC_DEMANDS_PLAN(r).CONFIDENCE_PERCENTAGE;
                    LT_DEMAND_TEMP.BUCKET_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).BUCKET_TYPE;
                    LT_DEMAND_TEMP.BILL_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).BILL_ID;
                    LT_DEMAND_TEMP.PROBABILITY                    := LT_CUX_MSC_DEMANDS_PLAN(r).PROBABILITY;
                    LT_DEMAND_TEMP.FORECAST_SET_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_SET_ID;
                    LT_DEMAND_TEMP.GROUP_ID                       := LT_CUX_MSC_DEMANDS_PLAN(r).GROUP_ID;
                    LT_DEMAND_TEMP.SERVICE_LEVEL                  := LT_CUX_MSC_DEMANDS_PLAN(r).SERVICE_LEVEL;
                    LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_BY_DUE_DATE;
                    LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LT_CUX_MSC_DEMANDS_PLAN(r).TARGET_SAFETY_STOCK;
                    LT_DEMAND_TEMP.SCENARIO_SET                   := LT_CUX_MSC_DEMANDS_PLAN(r).SCENARIO_SET;
                    LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_SOURCE_TYPE;
                    LT_DEMAND_TEMP.SUPPLY_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).SUPPLY_ID;
                    LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .ORIGINAL_SYSTEM_REFERENCE;
                    LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .ORIGINAL_SYSTEM_LINE_REFERENCE;
                    LT_DEMAND_TEMP.STOLEN_FLAG                    := LT_CUX_MSC_DEMANDS_PLAN(r).STOLEN_FLAG;
                    LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .OLD_USING_REQUIREMENT_QUANTITY;
                    LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .OLD_USING_ASSEMBLY_DEMAND_DATE;
                    LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .OLD_ASSEMBLY_DEMAND_COMP_DATE;
                    LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LT_CUX_MSC_DEMANDS_PLAN(r).CUMMULATIVE_PROBABILITY;
                    LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ITEM_ID;
                    LT_DEMAND_TEMP.UNMET_QUANTITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).UNMET_QUANTITY;
                    LT_DEMAND_TEMP.RECORD_SOURCE                  := LT_CUX_MSC_DEMANDS_PLAN(r).RECORD_SOURCE;
                    LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LINK_TO_LINE_ID;
                    LT_DEMAND_TEMP.ERROR_TYPE                     := LT_CUX_MSC_DEMANDS_PLAN(r).ERROR_TYPE;
                    LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_SYNCHRONIZATION_FLAG;
                    LT_DEMAND_TEMP.COMP_SEQ_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID;
                    LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_PER_ASSEMBLY;
                    LT_DEMAND_TEMP.RELEASE_STATUS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_STATUS;
                    LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LT_CUX_MSC_DEMANDS_PLAN(r).RESCHEDULE_FLAG;
                    LT_DEMAND_TEMP.LOAD_TYPE                      := LT_CUX_MSC_DEMANDS_PLAN(r).LOAD_TYPE;
                    LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ORG_ID;
                    LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_INSTANCE_ID;
                    LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_DATE;
                    LT_DEMAND_TEMP.RELEASE_ERRORS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_ERRORS;
                    LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LT_CUX_MSC_DEMANDS_PLAN(r).ORG_FIRM_FLAG;
                    LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ORG_ID;
                    LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_INST_ID;
                    LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_ID;
                    LT_DEMAND_TEMP.SHIP_SET_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_ID;
                    LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_DATE_TYPE_CODE;
                    LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_ARRIVAL_DATE;
                    LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).LATEST_ACCEPTABLE_DATE;
                    LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).SHIPPING_METHOD_CODE;
                    LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_ARRIVAL_DATE;
                    LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_SHIP_DATE;
                    LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_SHIP_DATE;
                    LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_SHIP_DATE;
                    LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_DEMAND_ID;
                    LT_DEMAND_TEMP.ZONE_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).ZONE_ID;
                    LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .ORIG_SHIPPING_METHOD_CODE;
                    LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_LEAD_TIME;
                    LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_INTRANSIT_LEAD_TIME;
                    LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_OVERRIDE_FLAG;
                    LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_FIRM;
                    LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_EARLIEST_DATE;
                    LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ARRIVAL_DATE;
                    LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).UNBUCKETED_DEMAND_DATE;
                    LT_DEMAND_TEMP.ATO_LINE_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATO_LINE_ID;
                    LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_LINE_ID;
                    LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_LINE_ID;
                    LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LT_CUX_MSC_DEMANDS_PLAN(r).STD_MANDATORY_COMP_FLAG;
                    LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_REFRESH_NUMBER;
                    LT_DEMAND_TEMP.SHIP_METHOD                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_METHOD;
                    LT_DEMAND_TEMP.SHIP_CALENDAR                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_CALENDAR;
                    LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).RECEIVING_CALENDAR;
                    LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_CALENDAR;
                    LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_LOCATION_ID;
                    LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_QUANTITY;
                    LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_PRIORITY;
                    LT_DEMAND_TEMP.FINAL_USE_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_DATE;
                    LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_NAME;
                    LT_DEMAND_TEMP.SHIP_SET_NAME                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_NAME;
                    LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_PHANTOM_ID;
                    LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIMARY_COMPONENT_ID;
                    LT_DEMAND_TEMP.ATP_SESSION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_SESSION_ID;
                    LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_SHIP_DATE;
                    LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_SHIP_DATE;
                    LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIOR_ALLOCATION_QTY;
                    LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_QTY;
                    LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_DATE;
                    LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_ALLOCATION_FLAG;
                    LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_SERIAL_NUMBER;
                    LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_ITEM_ID;
                    LT_DEMAND_TEMP.EXPIRATION_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).EXPIRATION_DATE;
                    LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_SPLIT;
                    LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_INBOUND_DUE_DATE;
                    LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LT_CUX_MSC_DEMANDS_PLAN(r).FILL_KILL_FLAG;
                    LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LT_CUX_MSC_DEMANDS_PLAN(r).DEFINITION_LEVEL_USED;
                    LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .DEMAND_FULFILLMENT_LEAD_TIME;
                    LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_SCALING_TYPE;
                    LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_YIELD_FACTOR;
                    LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).SPLIT_FROM_DEMAND_ID;
                    LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ITEM;
                    LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ORG;
                    LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_ID;
                    LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_VALUE;
                    LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).REPAIR_LINE_ID;
                    LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).OTM_ARRIVAL_DATE;
                    LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_NAME;
                    LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LT_CUX_MSC_DEMANDS_PLAN(r).MIN_REM_SHELF_LIFE_DAYS;
                    LT_DEMAND_TEMP.REVISED_DMD_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_DATE;
                    LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_PRIORITY;
                    LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_ITEM_ID;
                    LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_ITEM_ID;
                    LT_DEMAND_TEMP.DAYS_LATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).DAYS_LATE;
                    LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_DATE;
                    LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_QUANTITY;
                    LT_DEMAND_TEMP.OBJECT_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).OBJECT_TYPE;
                    LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                     .MAINTENANCE_OBJECT_SOURCE;
                    LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MD',
                          '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || CHR(10) || dbms_utility.format_error_backtrace() || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                
                ELSE
                  BEGIN
                    SELECT ALLOCATED_QUANTITY
                      INTO LN_TOTAL_DEMAND_QTY
                      FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
                     WHERE CMD.PLAN_ID = P_PLAN_ID
                       AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                       AND CMD.PEGGING_ID = LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LN_TOTAL_DEMAND_QTY := 0;
                  END;
                  p_change_pegging(p_plan_id        => P_PLAN_ID,
                                   p_sr_instance_id => P_SR_INSTANCE_ID,
                                   p_pegging_id     => LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID,
                                   p_chang_qty      => LN_TOTAL_PLAN_QTY,
                                   p_flag           => 'N',
                                   P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--Added by V1.027
                                   P_PCBA_FLAG      => 'Y' --Added by V1.008
                                   );
                  LN_DEMAND_ID := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID;
                END IF;
              
                --冲减现有量
                FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                                 LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                 LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                
                  IF LR_SUPPLY_OH.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                  
                    --LN_PLAN_QTY := 0;
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                  
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                  END IF;
                
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                    
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                      LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                      LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                      LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                      LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                      LV_SUPPLIES_TEMP.UPDATED                 := 2;
                      LV_SUPPLIES_TEMP.STATUS                  := 0;
                      LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  IF LN_TOTAL_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                END LOOP;
              
                --若现有量不能满足需求则用工单的副需求去满足
                IF LN_TOTAL_PLAN_QTY > 0 THEN
                  --冲减对应的工单，按照工单的开工日期，工单ID排序
                  FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                     LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                     LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                      LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                      --LN_PLAN_QTY := 0;
                    
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                      --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    END IF;
                  
                    LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  
                    IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                    
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      
                        UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                           SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                         WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                      
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME -
                                                                                      LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                    
                    END IF;
                  
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    IF LN_TOTAL_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                --用在途部分去满足
                IF LN_TOTAL_PLAN_QTY > 0 THEN
                  FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                     LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                     LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                    
                      LN_USED_QTY       := LN_TOTAL_PLAN_QTY;
                      LN_TOTAL_PLAN_QTY := 0;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY       := LR_SUPPLY_RCV.REMAIN_QTY;
                      LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    END IF;
                  
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME -
                                                                                      LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || CHR(10) || SQLERRM);
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                      END;
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                    
                    END IF;
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY); --单位用量
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                    IF LN_TOTAL_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                IF LN_TOTAL_PLAN_QTY > 0 THEN
                  --若此PCBA从其他组织生产则去用来源组织的库存跟工单去满足
                  IF LN_SOURCE_ORG_ID < 0 THEN
                    --在本组织生产部分
                    --若现有量不能满足需求则用工单的产出需求去满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      --冲减对应的工单，按照工单的开工日期，工单ID排序
                      FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID,
                                                       LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                       LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                        LN_USED_QTY := 0;
                        IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                        
                          LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                          --LN_PLAN_QTY := 0;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        
                        ELSE
                        
                          LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                          --LN_PLAN_QTY := LN_PLAN_QTY -
                          --               LR_SUPPLY_DJ.REMAIN_QTY;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = 0
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        END IF;
                        LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                        --写入供应数据
                        LV_INSERT_SUPPLY_FLAG := 'N';
                        IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                          LV_INSERT_SUPPLY_FLAG := 'Y';
                          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        
                          --写入WIP处理表
                          SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                                 .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                            INTO LD_USING_ASSY_D_DATE
                            FROM DUAL;
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                            VALUES
                              (LR_SUPPLY_DJ.ROW_ID,
                               LR_SUPPLY_DJ.DISPOSITION_ID,
                               LN_TRANSACTION_ID,
                               GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --写入WIP优先处理表
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                              (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                              SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                 AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --更新工作单需求的ISSUED_QTY
                          LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                        
                          --更新实际ISSUED数量
                          BEGIN
                            UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                               SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                             where 1 = 1
                               AND CMD.plan_id = -1
                               AND CMD.ORIGINATION_TYPE IN (2, 3)
                               and CMD.sr_instance_id = p_SR_INSTANCE_ID
                               AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                        ELSE
                          LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                          --删除MPS与非标准工单提前写入写入部分
                          IF LR_SUPPLY_DJ.order_type = 7 THEN
                          
                            BEGIN
                              SELECT 'N', MFP.PEGGING_ID
                                INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                                FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                               WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                                 AND MFP.PLAN_ID = P_PLAN_ID
                                 AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                                 AND MFP.DEMAND_ID = -1;
                            EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                LV_WIP_PROCESS_FLAG := 'Y';
                            END;
                          
                            IF LV_WIP_PROCESS_FLAG = 'N' THEN
                            
                              p_change_pegging(p_plan_id        => P_PLAN_ID,
                                               p_sr_instance_id => P_SR_INSTANCE_ID,
                                               p_pegging_id     => LN_RDJ_PEGGING_ID,
                                               p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                               p_flag           => 'N');
                            
                              LV_INSERT_SUPPLY_FLAG := 'Y';
                            
                              SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                            
                              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                 SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                               WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                            
                              SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                                     .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                                INTO LD_USING_ASSY_D_DATE
                                FROM DUAL;
                            
                              --写入WIP处理表
                              BEGIN
                                INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                                VALUES
                                  (LR_SUPPLY_DJ.ROW_ID,
                                   LR_SUPPLY_DJ.DISPOSITION_ID,
                                   LN_TRANSACTION_ID,
                                   GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                              --写入WIP优先处理表
                              BEGIN
                                INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                                  (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                                  SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                    FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                   WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                     AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                              --更新工作单需求的ISSUED_QTY
                              LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) +
                                                  NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                              BEGIN
                                UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                                   SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY -
                                                        LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                                 where 1 = 1
                                   AND CMD.plan_id = -1
                                   AND CMD.ORIGINATION_TYPE IN (2, 3)
                                   and CMD.sr_instance_id = p_SR_INSTANCE_ID
                                   AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                            END IF;
                          
                          END IF;
                        
                        END IF;
                      
                        IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                          BEGIN
                            LV_SUPPLIES_TEMP                           := NULL;
                            LV_SUPPLIES_TEMP.PLAN_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                            LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                            LV_SUPPLIES_TEMP.ORGANIZATION_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                            LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .ASSEMBLY_DEMAND_COMP_DATE);
                            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                          .USING_ASSEMBLY_DEMAND_DATE;
                            LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                            LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                            LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME); --重新计算
                            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME -
                                                                                           LN_SUB_FULL_LEAD_TIME);
                            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME -
                                                                                           LN_SUB_FULL_LEAD_TIME -
                                                                                           LN_SUB_PREPROCE_LEAD_TIME);
                            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                            LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                            LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                            LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                            LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                            LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                            LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                            LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                            LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                            LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                            LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                            LV_SUPPLIES_TEMP.UPDATED                   := 2;
                            LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                            LV_SUPPLIES_TEMP.STATUS                    := 0;
                            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                            LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                            LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                            LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                            LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                            LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                            LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                            LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                            LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                            LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                          
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT PCBA SUPPLIES 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                  ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                            
                          END;
                        END IF;
                      
                        --写入PEGGING数据
                        BEGIN
                          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                        
                          LT_PEGGING_TEMP                        := NULL;
                          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                          LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                          LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                          LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                          LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                          LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                          LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                          LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                          LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                          LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                          LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                          LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                          LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                          LT_PEGGING_TEMP.UPDATED                := 0;
                          LT_PEGGING_TEMP.STATUS                 := 2;
                          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                        
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MFP',
                                '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                          
                        END;
                        BEGIN
                          SELECT CMW.SUPPLY_DATE
                            INTO LD_USING_ASSY_D_DATE
                            FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                           WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
                        END;
                        --Added below by V1.018
                        IF LR_SUPPLY_DJ.order_type = 7 THEN
                          LV_BOM_FLAG := 'N';
                        ELSE
                          LV_BOM_FLAG := 'Y';
                        END IF;
                        --Added above by V1.018
                        --写入工作单需求及工作单，优先耗用相关的PCB
                        INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                           P_PLAN_ID               => P_PLAN_ID,
                                           P_ORGANIZATION_ID       => LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                           P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                           P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                           P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                           P_END_PEGGING_ID        => LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID,
                                           P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                           P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                           P_END_ORIGINATION_TYPE  => LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE,
                                           P_LEVEL_FLAG            => 1,
                                           P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                           P_PLAN_QTY              => LN_USED_QTY,
                                           P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                           P_D_COUNT               => LN_D_COUNT,
                                           P_S_COUNT               => LN_S_COUNT,
                                           P_P_COUNT               => LN_P_COUNT);
                        IF LN_TOTAL_PLAN_QTY <= 0 THEN
                          EXIT;
                        END IF;
                      
                      END LOOP;
                    END IF;
                  
                    --其余部分写入计划单供应，根据下面的PCB去满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME -
                                                                                      LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                        LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                        LV_SUPPLIES_TEMP.UPDATED                 := 2;
                        LV_SUPPLIES_TEMP.STATUS                  := 0;
                        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 037 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PEGGING数据
                      BEGIN
                        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                      
                        LT_PEGGING_TEMP                        := NULL;
                        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                        LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
                        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
                        LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE);
                        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                        LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                        LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                        LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                        LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                        LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                        LT_PEGGING_TEMP.UPDATED                := 0;
                        LT_PEGGING_TEMP.STATUS                 := 2;
                        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MFP',
                              '***ERROR*** INSERT PCBA PEGGINGS 038 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PCBA下阶计划单需求
                      INSERT_BOM_DEMAND(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                        P_PLAN_ID               => P_PLAN_ID,
                                        P_ORGANIZATION_ID       => LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                        P_ASSY_ITEM_ID          => LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
                                        P_ASSY_ITEM_QTY         => LN_TOTAL_PLAN_QTY,
                                        P_BOM_VER_DATE          => TRUNC(SYSDATE),
                                        P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                        P_END_PEGGING_ID        => LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID,
                                        P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME),
                                        P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME),
                                        P_END_ORIGINATION_TYPE  => LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE,
                                        P_LEVEL_FLAG            => 1,
                                        P_ASSY_USED_QTY         => LN_ASSY_USED_QTY,
                                        P_PCBA_FLAG             => 'Y', --Added by V1.008
                                        P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY ,--初始单位用量--Added by v1.027
                                        P_D_COUNT               => LN_D_COUNT,
                                        P_S_COUNT               => LN_S_COUNT,
                                        P_P_COUNT               => LN_P_COUNT);
                    
                      LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - NVL(LN_ASSY_USED_QTY, 0);
                    END IF;
                  
                  ELSE
                    --需要在原组织写入一笔计划单供应 在来源组织写入一笔计划单需求记录
                    --写入供应数据--计划单
                  
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_PCBA_S_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                        := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID         := LN_PCBA_S_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SOURCE_ORGANIZATION_ID := LN_SOURCE_ORG_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE      := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                 .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE      := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LN_PCBA_S_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := 5; --计划单
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LN_TOTAL_PLAN_QTY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LN_TOTAL_PLAN_QTY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 039 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PCBA_P_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PCBA_P_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID; --需要更新？
                      LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_PCBA_S_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_PCBA_S_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT PCBA PEGGINS 040 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    --写入一条替代料的需求--来源组织
                    BEGIN
                      SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_PCBA_D_ID FROM DUAL;
                    
                      LT_DEMAND_TEMP                                := NULL;
                      LT_DEMAND_TEMP.ORDER_PRIORITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_PRIORITY;
                      LT_DEMAND_TEMP.FORECAST_MAD                   := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_MAD;
                      LT_DEMAND_TEMP.DEMAND_ID                      := LN_PCBA_D_ID;
                      LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_DESIGNATOR_ID;
                      LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
                      LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                       .ASSEMBLY_DEMAND_COMP_DATE);
                      LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                       .USING_ASSEMBLY_DEMAND_DATE);
                      LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                      LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                      LT_DEMAND_TEMP.DEMAND_PRIORITY                := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_PRIORITY;
                      LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_PRIORITY;
                      LT_DEMAND_TEMP.FORECAST_PRIORITY              := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_PRIORITY;
                      LT_DEMAND_TEMP.PLANNING_GROUP                 := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNING_GROUP;
                      LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LT_CUX_MSC_DEMANDS_PLAN(r).DAILY_DEMAND_RATE;
                      LT_DEMAND_TEMP.UNIT_NUMBER                    := LT_CUX_MSC_DEMANDS_PLAN(r).UNIT_NUMBER;
                      LT_DEMAND_TEMP.DISPOSITION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                      LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_ITEM_ID;
                      LT_DEMAND_TEMP.PLAN_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LT_DEMAND_TEMP.ORGANIZATION_ID                := LN_SOURCE_ORG_ID;
                      LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
                      LT_DEMAND_TEMP.PROJECT_ID                     := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                      LT_DEMAND_TEMP.TASK_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                      LT_DEMAND_TEMP.CUSTOMER_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_ID;
                      LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_SITE_ID;
                      LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_SITE_ID;
                      LT_DEMAND_TEMP.PROMISE_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_DATE;
                      LT_DEMAND_TEMP.SELLING_PRICE                  := LT_CUX_MSC_DEMANDS_PLAN(r).SELLING_PRICE;
                      LT_DEMAND_TEMP.DMD_LATENESS_COST              := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_LATENESS_COST;
                      LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_SATISFIED_DATE;
                      LT_DEMAND_TEMP.OP_SEQ_NUM                     := LT_CUX_MSC_DEMANDS_PLAN(r).OP_SEQ_NUM;
                      LT_DEMAND_TEMP.UPDATED                        := LT_CUX_MSC_DEMANDS_PLAN(r).UPDATED;
                      LT_DEMAND_TEMP.STATUS                         := LT_CUX_MSC_DEMANDS_PLAN(r).STATUS;
                      LT_DEMAND_TEMP.APPLIED                        := LT_CUX_MSC_DEMANDS_PLAN(r).APPLIED;
                      LT_DEMAND_TEMP.DEMAND_CLASS                   := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                      LT_DEMAND_TEMP.FIRM_QUANTITY                  := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_QUANTITY;
                      LT_DEMAND_TEMP.FIRM_DATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_DATE;
                      LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_QUANTITY;
                      LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_DATE;
                      LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LT_DEMAND_TEMP.RESERVATION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVATION_ID;
                      LT_DEMAND_TEMP.PARENT_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_ID;
                      LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_PROJECT_ID;
                      LT_DEMAND_TEMP.LENDING_TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_TASK_ID;
                      LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
                      LT_DEMAND_TEMP.ORDER_NUMBER                   := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_NUMBER;
                      LT_DEMAND_TEMP.RESERVED_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVED_QUANTITY;
                      LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                      LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                      LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                      LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                      LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                      LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                      LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                      LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE_CATEGORY;
                      LT_DEMAND_TEMP.ATTRIBUTE1                     := 'Y';
                      LT_DEMAND_TEMP.ATTRIBUTE2                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE2;
                      LT_DEMAND_TEMP.ATTRIBUTE3                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE3;
                      LT_DEMAND_TEMP.ATTRIBUTE4                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE4;
                      LT_DEMAND_TEMP.ATTRIBUTE5                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE5;
                      LT_DEMAND_TEMP.ATTRIBUTE6                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE6;
                      LT_DEMAND_TEMP.ATTRIBUTE7                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE7;
                      LT_DEMAND_TEMP.ATTRIBUTE8                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE8;
                      LT_DEMAND_TEMP.ATTRIBUTE9                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE9;
                      LT_DEMAND_TEMP.ATTRIBUTE10                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE10;
                      LT_DEMAND_TEMP.ATTRIBUTE11                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE11;
                      LT_DEMAND_TEMP.ATTRIBUTE12                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE12;
                      LT_DEMAND_TEMP.ATTRIBUTE13                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE13;
                      LT_DEMAND_TEMP.ATTRIBUTE14                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE14;
                      LT_DEMAND_TEMP.ATTRIBUTE15                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE15;
                      LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_ID;
                      LT_DEMAND_TEMP.ISSUED_QUANTITY                := LT_CUX_MSC_DEMANDS_PLAN(r).ISSUED_QUANTITY;
                      LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).REPETITIVE_SCHEDULE_ID;
                      LT_DEMAND_TEMP.REFRESH_NUMBER                 := LT_CUX_MSC_DEMANDS_PLAN(r).REFRESH_NUMBER;
                      LT_DEMAND_TEMP.REQUEST_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_DATE;
                      LT_DEMAND_TEMP.WIP_STATUS_CODE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_STATUS_CODE;
                      LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_SUPPLY_TYPE;
                      LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_ORG_INSTANCE_ID;
                      LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_ID;
                      LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LT_CUX_MSC_DEMANDS_PLAN(r).CONFIDENCE_PERCENTAGE;
                      LT_DEMAND_TEMP.BUCKET_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).BUCKET_TYPE;
                      LT_DEMAND_TEMP.BILL_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).BILL_ID;
                      LT_DEMAND_TEMP.PROBABILITY                    := LT_CUX_MSC_DEMANDS_PLAN(r).PROBABILITY;
                      LT_DEMAND_TEMP.FORECAST_SET_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_SET_ID;
                      LT_DEMAND_TEMP.GROUP_ID                       := LT_CUX_MSC_DEMANDS_PLAN(r).GROUP_ID;
                      LT_DEMAND_TEMP.SERVICE_LEVEL                  := LT_CUX_MSC_DEMANDS_PLAN(r).SERVICE_LEVEL;
                      LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_BY_DUE_DATE;
                      LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LT_CUX_MSC_DEMANDS_PLAN(r).TARGET_SAFETY_STOCK;
                      LT_DEMAND_TEMP.SCENARIO_SET                   := LT_CUX_MSC_DEMANDS_PLAN(r).SCENARIO_SET;
                      LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_SOURCE_TYPE;
                      LT_DEMAND_TEMP.SUPPLY_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).SUPPLY_ID;
                      LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .ORIGINAL_SYSTEM_REFERENCE;
                      LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .ORIGINAL_SYSTEM_LINE_REFERENCE;
                      LT_DEMAND_TEMP.STOLEN_FLAG                    := LT_CUX_MSC_DEMANDS_PLAN(r).STOLEN_FLAG;
                      LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .OLD_USING_REQUIREMENT_QUANTITY;
                      LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .OLD_USING_ASSEMBLY_DEMAND_DATE;
                      LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .OLD_ASSEMBLY_DEMAND_COMP_DATE;
                      LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .CUMMULATIVE_PROBABILITY;
                      LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ITEM_ID;
                      LT_DEMAND_TEMP.UNMET_QUANTITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).UNMET_QUANTITY;
                      LT_DEMAND_TEMP.RECORD_SOURCE                  := LT_CUX_MSC_DEMANDS_PLAN(r).RECORD_SOURCE;
                      LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LINK_TO_LINE_ID;
                      LT_DEMAND_TEMP.ERROR_TYPE                     := LT_CUX_MSC_DEMANDS_PLAN(r).ERROR_TYPE;
                      LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .ATP_SYNCHRONIZATION_FLAG;
                      LT_DEMAND_TEMP.COMP_SEQ_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID;
                      LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_PER_ASSEMBLY;
                      LT_DEMAND_TEMP.RELEASE_STATUS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_STATUS;
                      LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LT_CUX_MSC_DEMANDS_PLAN(r).RESCHEDULE_FLAG;
                      LT_DEMAND_TEMP.LOAD_TYPE                      := LT_CUX_MSC_DEMANDS_PLAN(r).LOAD_TYPE;
                      LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ORG_ID;
                      LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_INSTANCE_ID;
                      LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_DATE;
                      LT_DEMAND_TEMP.RELEASE_ERRORS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_ERRORS;
                      LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LT_CUX_MSC_DEMANDS_PLAN(r).ORG_FIRM_FLAG;
                      LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ORG_ID;
                      LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_INST_ID;
                      LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_ID;
                      LT_DEMAND_TEMP.SHIP_SET_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_ID;
                      LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_DATE_TYPE_CODE;
                      LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_ARRIVAL_DATE;
                      LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).LATEST_ACCEPTABLE_DATE;
                      LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).SHIPPING_METHOD_CODE;
                      LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_ARRIVAL_DATE;
                      LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_SHIP_DATE;
                      LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_SHIP_DATE;
                      LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_SHIP_DATE;
                      LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_DEMAND_ID;
                      LT_DEMAND_TEMP.ZONE_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).ZONE_ID;
                      LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .ORIG_SHIPPING_METHOD_CODE;
                      LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_LEAD_TIME;
                      LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .ORIG_INTRANSIT_LEAD_TIME;
                      LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_OVERRIDE_FLAG;
                      LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_FIRM;
                      LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .IMPLEMENT_EARLIEST_DATE;
                      LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ARRIVAL_DATE;
                      LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).UNBUCKETED_DEMAND_DATE;
                      LT_DEMAND_TEMP.ATO_LINE_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATO_LINE_ID;
                      LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_LINE_ID;
                      LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_LINE_ID;
                      LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .STD_MANDATORY_COMP_FLAG;
                      LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_REFRESH_NUMBER;
                      LT_DEMAND_TEMP.SHIP_METHOD                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_METHOD;
                      LT_DEMAND_TEMP.SHIP_CALENDAR                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_CALENDAR;
                      LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).RECEIVING_CALENDAR;
                      LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_CALENDAR;
                      LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_LOCATION_ID;
                      LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_QUANTITY;
                      LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_PRIORITY;
                      LT_DEMAND_TEMP.FINAL_USE_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_DATE;
                      LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_NAME;
                      LT_DEMAND_TEMP.SHIP_SET_NAME                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_NAME;
                      LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_PHANTOM_ID;
                      LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIMARY_COMPONENT_ID;
                      LT_DEMAND_TEMP.ATP_SESSION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_SESSION_ID;
                      LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_SHIP_DATE;
                      LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_SHIP_DATE;
                      LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIOR_ALLOCATION_QTY;
                      LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_QTY;
                      LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_DATE;
                      LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_ALLOCATION_FLAG;
                      LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_SERIAL_NUMBER;
                      LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_ITEM_ID;
                      LT_DEMAND_TEMP.EXPIRATION_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).EXPIRATION_DATE;
                      LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_SPLIT;
                      LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .PLANNED_INBOUND_DUE_DATE;
                      LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LT_CUX_MSC_DEMANDS_PLAN(r).FILL_KILL_FLAG;
                      LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LT_CUX_MSC_DEMANDS_PLAN(r).DEFINITION_LEVEL_USED;
                      LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .DEMAND_FULFILLMENT_LEAD_TIME;
                      LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_SCALING_TYPE;
                      LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_YIELD_FACTOR;
                      LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).SPLIT_FROM_DEMAND_ID;
                      LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ITEM;
                      LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ORG;
                      LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_ID;
                      LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_VALUE;
                      LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).REPAIR_LINE_ID;
                      LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).OTM_ARRIVAL_DATE;
                      LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_NAME;
                      LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .MIN_REM_SHELF_LIFE_DAYS;
                      LT_DEMAND_TEMP.REVISED_DMD_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_DATE;
                      LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_PRIORITY;
                      LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_ITEM_ID;
                      LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_ITEM_ID;
                      LT_DEMAND_TEMP.DAYS_LATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).DAYS_LATE;
                      LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_DATE;
                      LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_QUANTITY;
                      LT_DEMAND_TEMP.OBJECT_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).OBJECT_TYPE;
                      LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                       .MAINTENANCE_OBJECT_SOURCE;
                      LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                      INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MD',
                            '***ERROR*** INSERT PCBA DEMANDS 041 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    LN_TOTAL_DEMAND_QTY := LN_TOTAL_PLAN_QTY;
                    --来源组织现有量满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      --冲减现有量
                      FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID, LN_SOURCE_ORG_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                        LN_USED_QTY := 0;
                      
                        IF LR_SUPPLY_OH.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                        
                          LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                          --LN_PLAN_QTY := 0;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                           WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                        
                        ELSE
                        
                          LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                          --LN_PLAN_QTY := LN_PLAN_QTY -
                          --               LR_SUPPLY_OH.REMAIN_QTY;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = 0
                           WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                        
                        END IF;
                        LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                      
                        IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                        
                          --写入供应数据
                          BEGIN
                            SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                          
                            UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                             WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                          
                            LV_SUPPLIES_TEMP                   := NULL;
                            LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                            LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                            LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LN_SOURCE_ORG_ID;
                            LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE;
                          
                            LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME); --重新计算
                            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME -
                                                                                          LN_SUB_FULL_LEAD_TIME);
                            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME -
                                                                                          LN_SUB_FULL_LEAD_TIME -
                                                                                          LN_SUB_PREPROCE_LEAD_TIME);
                          
                            LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                            LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                            LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                            LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                            LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                            LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                            LV_SUPPLIES_TEMP.UPDATED                 := 2;
                            LV_SUPPLIES_TEMP.STATUS                  := 0;
                            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                            LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                            LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                            LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                          
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT PCBA SUPPLIES 042 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                  ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                            
                          END;
                        
                        ELSE
                          LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                        
                        END IF;
                      
                        --写入PEGGING数据
                        BEGIN
                          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                        
                          LT_PEGGING_TEMP                        := NULL;
                          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                          LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                          LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                          LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                          LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                          LT_PEGGING_TEMP.ORGANIZATION_ID        := LN_SOURCE_ORG_ID;
                          LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                          LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PCBA_P_ID;
                          LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DEMAND_ID              := LN_PCBA_D_ID;
                          LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                          LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                          LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                          LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                          LT_PEGGING_TEMP.UPDATED                := 0;
                          LT_PEGGING_TEMP.STATUS                 := 2;
                          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                        
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MFP',
                                '***ERROR*** INSERT PCBA PEGGINS 043 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                          
                        END;
                      
                        IF LN_TOTAL_PLAN_QTY <= 0 THEN
                          EXIT;
                        END IF;
                      END LOOP;
                    END IF;
                  
                    --若现有量不能满足需求则用工单的产出需求去满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      --冲减对应的工单，按照工单的开工日期，工单ID排序
                      FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID, LN_SOURCE_ORG_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                        LN_USED_QTY := 0;
                        IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                        
                          LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                          --LN_PLAN_QTY := 0;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        
                        ELSE
                        
                          LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                          --LN_PLAN_QTY := LN_PLAN_QTY -
                          --              LR_SUPPLY_DJ.REMAIN_QTY;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = 0
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        END IF;
                        LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                        --写入供应数据
                      
                        LV_INSERT_SUPPLY_FLAG := 'N';
                        IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                          LV_INSERT_SUPPLY_FLAG := 'Y';
                          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        
                          --写入WIP处理表
                          SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                                 .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                            INTO LD_USING_ASSY_D_DATE
                            FROM DUAL;
                        
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                            VALUES
                              (LR_SUPPLY_DJ.ROW_ID,
                               LR_SUPPLY_DJ.DISPOSITION_ID,
                               LN_TRANSACTION_ID,
                               GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --写入WIP优先处理表
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                              (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                              SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                 AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --更新工作单需求的ISSUED_QTY
                          LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                        
                          --更新实际ISSUED数量
                          BEGIN
                            UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                               SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                             where 1 = 1
                               AND CMD.plan_id = -1
                               AND CMD.ORIGINATION_TYPE IN (2, 3)
                               and CMD.sr_instance_id = p_SR_INSTANCE_ID
                               AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                        ELSE
                          LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                          --删除MPS与非标准工单提前写入写入部分
                          IF LR_SUPPLY_DJ.order_type = 7 THEN
                          
                            BEGIN
                              SELECT 'N', MFP.PEGGING_ID
                                INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                                FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                               WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                                 AND MFP.PLAN_ID = P_PLAN_ID
                                 AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                                 AND MFP.DEMAND_ID = -1;
                            EXCEPTION
                              WHEN NO_DATA_FOUND THEN
                                LV_WIP_PROCESS_FLAG := 'Y';
                            END;
                          
                            IF LV_WIP_PROCESS_FLAG = 'N' THEN
                            
                              p_change_pegging(p_plan_id        => P_PLAN_ID,
                                               p_sr_instance_id => P_SR_INSTANCE_ID,
                                               p_pegging_id     => LN_RDJ_PEGGING_ID,
                                               p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                               p_flag           => 'N');
                            
                              LV_INSERT_SUPPLY_FLAG := 'Y';
                            
                              SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                            
                              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                 SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                               WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                            
                              --写入WIP处理表
                              SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                                     .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                                INTO LD_USING_ASSY_D_DATE
                                FROM DUAL;
                              BEGIN
                                INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                                VALUES
                                  (LR_SUPPLY_DJ.ROW_ID,
                                   LR_SUPPLY_DJ.DISPOSITION_ID,
                                   LN_TRANSACTION_ID,
                                   GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                              --写入WIP优先处理表
                              BEGIN
                                INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                                  (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                                  SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                    FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                   WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                     AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                              --更新工作单需求的ISSUED_QTY
                              LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) +
                                                  NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                              BEGIN
                                UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                                   SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY -
                                                        LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                                 where 1 = 1
                                   AND CMD.plan_id = -1
                                   AND CMD.ORIGINATION_TYPE IN (2, 3)
                                   and CMD.sr_instance_id = p_SR_INSTANCE_ID
                                   AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                              END;
                            
                            END IF;
                          
                          END IF;
                        
                        END IF;
                      
                        IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                          BEGIN
                            LV_SUPPLIES_TEMP                           := NULL;
                            LV_SUPPLIES_TEMP.PLAN_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                            LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                            LV_SUPPLIES_TEMP.ORGANIZATION_ID           := LN_SOURCE_ORG_ID;
                            LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
                            LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                            LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                            LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME); --重新计算
                            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME -
                                                                                           LN_SUB_FULL_LEAD_TIME);
                            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                          .USING_ASSEMBLY_DEMAND_DATE -
                                                                                           LN_SUB_POST_LEAD_TIME -
                                                                                           LN_SUB_FULL_LEAD_TIME -
                                                                                           LN_SUB_PREPROCE_LEAD_TIME);
                            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                            LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                            LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                            LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                            LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                            LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                            LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                            LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                            LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                            LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                            LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                            LV_SUPPLIES_TEMP.UPDATED                   := 2;
                            LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                            LV_SUPPLIES_TEMP.STATUS                    := 0;
                            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                            LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                            LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                            LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                            LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                            LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                            LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                            LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                            LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                            LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                          
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT PCBA SUPPLIES 044 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                  ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                            
                          END;
                        
                        END IF;
                      
                        --写入PEGGING数据
                        BEGIN
                          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                        
                          LT_PEGGING_TEMP                        := NULL;
                          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                          LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                          LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                          LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                          LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                          LT_PEGGING_TEMP.ORGANIZATION_ID        := LN_SOURCE_ORG_ID;
                          LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                          LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PCBA_P_ID;
                          LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DEMAND_ID              := LN_PCBA_D_ID;
                          LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                          LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                          LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                          LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                          LT_PEGGING_TEMP.UPDATED                := 0;
                          LT_PEGGING_TEMP.STATUS                 := 2;
                          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                        
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MFP',
                                '***ERROR*** INSERT PCBA PEGGINS 045 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                          
                        END;
                      
                        BEGIN
                          SELECT CMW.SUPPLY_DATE
                            INTO LD_USING_ASSY_D_DATE
                            FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                           WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
                        END;
                      
                        --Added below by V1.018
                        IF LR_SUPPLY_DJ.order_type = 7 THEN
                          LV_BOM_FLAG := 'N';
                        ELSE
                          LV_BOM_FLAG := 'Y';
                        END IF;
                        --Added above by V1.018
                      
                        --写入工作单需求及工作单，优先耗用相关的PCB
                        INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                           P_PLAN_ID               => P_PLAN_ID,
                                           P_ORGANIZATION_ID       => LN_SOURCE_ORG_ID,
                                           P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                           P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                           P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                           P_END_PEGGING_ID        => LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID,
                                           P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                           P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                           P_END_ORIGINATION_TYPE  => LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE,
                                           P_LEVEL_FLAG            => 1,
                                           P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                           P_ONLY_PEGGING_FLAG     => 'N',
                                           P_PRIOR_FLAG            => 'N',
                                           P_PLAN_QTY              => LN_USED_QTY,
                                           P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY ,--初始单位用量--Added by v1.027
                                           P_D_COUNT               => LN_D_COUNT,
                                           P_S_COUNT               => LN_S_COUNT,
                                           P_P_COUNT               => LN_P_COUNT);
                      
                        IF LN_TOTAL_PLAN_QTY <= 0 THEN
                          EXIT;
                        END IF;
                      
                      END LOOP;
                    END IF;
                  
                    --若不能满足需求则用工单的副需求去满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                         LN_SOURCE_ORG_ID,
                                                         LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                        LN_USED_QTY := 0;
                        IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                        
                          LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                          --LN_PLAN_QTY := 0;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                           WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                        
                        ELSE
                        
                          LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                          --LN_PLAN_QTY := LN_PLAN_QTY -
                          --               LR_SUPPLY_RDJ.REMAIN_QTY;
                          --更新供应的结余数量
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.REMAIN_QTY = 0
                           WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                        END IF;
                        LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                      
                        IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                        
                          --写入供应数据
                          BEGIN
                            SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                          
                            UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                               SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                             WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                          
                            LV_SUPPLIES_TEMP                   := NULL;
                            LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                            LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                            LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LN_SOURCE_ORG_ID;
                            LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                          
                            LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE);
                            LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME); --重新计算
                            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME -
                                                                                          LN_SUB_FULL_LEAD_TIME);
                            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                         .USING_ASSEMBLY_DEMAND_DATE -
                                                                                          LN_SUB_POST_LEAD_TIME -
                                                                                          LN_SUB_FULL_LEAD_TIME -
                                                                                          LN_SUB_PREPROCE_LEAD_TIME);
                          
                            LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                            LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                            LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                            LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                            LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                            LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                            LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                            LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                            LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                            LV_SUPPLIES_TEMP.UPDATED                  := 2;
                            LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                            LV_SUPPLIES_TEMP.STATUS                   := 0;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                            LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                            LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                            LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                            LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                            LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                          
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT PCBA SUPPLIES 046 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                  ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                            
                          END;
                        
                        ELSE
                          LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                        
                        END IF;
                      
                        --写入PEGGING数据
                        BEGIN
                          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                        
                          LT_PEGGING_TEMP                        := NULL;
                          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                          LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                          LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                          LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                          LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                          LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                          LT_PEGGING_TEMP.ORGANIZATION_ID        := LN_SOURCE_ORG_ID;
                          LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                          LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PCBA_P_ID;
                          LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                          LT_PEGGING_TEMP.DEMAND_ID              := LN_PCBA_D_ID;
                          LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                          LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                          LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                          LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                          LT_PEGGING_TEMP.UPDATED                := 0;
                          LT_PEGGING_TEMP.STATUS                 := 2;
                          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                        
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MFP',
                                '***ERROR*** INSERT PCBA PEGGINS 047 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                          
                        END;
                      
                        IF LN_TOTAL_PLAN_QTY <= 0 THEN
                          EXIT;
                        END IF;
                      
                      END LOOP;
                    END IF;
                  
                    --其余部分写入计划单供应，根据下面的PCB去满足
                    IF LN_TOTAL_PLAN_QTY > 0 THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LN_SOURCE_ORG_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                     .USING_ASSEMBLY_DEMAND_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME -
                                                                                      LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                        LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                        LV_SUPPLIES_TEMP.UPDATED                 := 2;
                        LV_SUPPLIES_TEMP.STATUS                  := 0;
                        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 048 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PEGGING数据
                      BEGIN
                        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                      
                        LT_PEGGING_TEMP                        := NULL;
                        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                        LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
                        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
                        LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE);
                        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                  .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                        LT_PEGGING_TEMP.ORGANIZATION_ID        := LN_SOURCE_ORG_ID;
                        LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                        LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PCBA_P_ID;
                        LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DEMAND_ID              := LN_PCBA_D_ID;
                        LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                        LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                        LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                        LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                        LT_PEGGING_TEMP.UPDATED                := 0;
                        LT_PEGGING_TEMP.STATUS                 := 2;
                        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MFP',
                              '***ERROR*** INSERT PCBA PEGGINGS 049 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PCBA下阶计划单需求
                      INSERT_BOM_DEMAND(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                        P_PLAN_ID               => P_PLAN_ID,
                                        P_ORGANIZATION_ID       => LN_SOURCE_ORG_ID,
                                        P_ASSY_ITEM_ID          => LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
                                        P_ASSY_ITEM_QTY         => LN_TOTAL_PLAN_QTY,
                                        P_BOM_VER_DATE          => TRUNC(SYSDATE),
                                        P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                        P_END_PEGGING_ID        => LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID,
                                        P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME),
                                        P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME),
                                        P_END_ORIGINATION_TYPE  => LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE,
                                        P_LEVEL_FLAG            => 1,
                                        P_ASSY_USED_QTY         => LN_ASSY_USED_QTY,
                                        P_PCBA_FLAG             => 'Y', --Added by V1.008
                                        P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY ,--初始单位用量--Added by v1.027
                                        P_D_COUNT               => LN_D_COUNT,
                                        P_S_COUNT               => LN_S_COUNT,
                                        P_P_COUNT               => LN_P_COUNT);
                    
                      LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - NVL(LN_ASSY_USED_QTY, 0);
                    END IF;
                  END IF;
                END IF;
              END IF;
            
            -- END IF;
            END LOOP;
          
          END IF;
          COMMIT;
        END IF;
        COMMIT; --EY BYF
      END LOOP;
      EXIT WHEN LC_PCBA%NOTFOUND;
    END LOOP;
    CLOSE LC_PCBA;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'PCBA_COUNT', '总处理PCBA记录数：' || LN_PCBA_COUNT);
    --工单有剩余部分写入剩余数据
    FOR LR_SUPPLY_DJ IN (SELECT CMW.SUPPLY_DATE, CMS.*
                           FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW, CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                          WHERE CMS.ROW_ID = CMW.ROW_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1) LOOP
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_DJ.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL;
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE); --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_DJ.INVENTORY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_DJ.ORGANIZATION_ID;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_DJ.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_DJ.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_DJ.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           LR_SUPPLY_DJ.ORGANIZATION_ID,
           LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
           LR_SUPPLY_DJ.NEW_TRANSACTION_ID,
           '',
           LR_SUPPLY_DJ.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      --Added below by V1.018
      IF LR_SUPPLY_DJ.order_type = 7 THEN
        LV_BOM_FLAG := 'N';
      ELSE
        LV_BOM_FLAG := 'Y';
      END IF;
      --Added above by V1.018
      
      --Added by V1.028
      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
      SET    CMS.REMAIN_QTY = 0
      WHERE  CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
    
      INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                         P_PLAN_ID               => P_PLAN_ID,
                         P_ORGANIZATION_ID       => LR_SUPPLY_DJ.ORGANIZATION_ID,
                         P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                         P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                         P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                         P_END_PEGGING_ID        => LN_PEGGING_ID,
                         P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE),
                         P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE),
                         P_END_ORIGINATION_TYPE  => NULL,
                         P_ACCESS_FLAG           => 'Y',
                         P_LEVEL_FLAG => 1,
                         P_BOM_FLAG   => LV_BOM_FLAG, --Added by V1.018
                         P_PLAN_QTY   => LR_SUPPLY_DJ.REMAIN_QTY,
                         P_ORGI_USAGE => 1 ,--初始单位用量--Added by v1.027
                         P_D_COUNT    => LN_D_COUNT,
                         P_S_COUNT    => LN_S_COUNT,
                         P_P_COUNT    => LN_P_COUNT);
    END LOOP;
    COMMIT;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
      /*      LT_CUX_MSC_DEMANDS_PLAN_NEW.delete;
      LT_CUX_MSC_FULL_PEGGING_PLAN.delete;
      LT_CUX_MSC_SUPPLIES_PLAN.delete;*/
  END;

  /***********************************************************************************
   NAME: CALCULATE_SA_PROCESS
   DESCRIPTION:处理SA部分,排除PCBA，错阶替代，PH部分
  ***********************************************************************************/
  PROCEDURE CALCULATE_SA_PROCESS(p_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_ID        NUMBER,
                                 P_LEVEL_CODE     NUMBER,
                                 PO_ERROR_CODE    OUT VARCHAR2) IS
  
    LT_CUX_MSC_DEMANDS_PLAN GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
  
    CURSOR LC_SA IS
      SELECT CMD.*
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
         AND CMD.ITEM_TYPE != 'PH' --排除虚拟件
            --AND CMD.ITEM_NAME LIKE 'TD%'
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND GET_MPS_FLAG(CMD.ORGANIZATION_ID, CMD.INVENTORY_ITEM_ID) = 'N'
         AND CMD.LOW_LEVEL_CODE = P_LEVEL_CODE
         AND CMD.ORIGINATION_TYPE != 12 --MPS需求
         AND NOT EXISTS (SELECT 1 --排除PCBA部分
                FROM MSC.MSC_ITEM_CATEGORIES MIC
               WHERE CMD.INVENTORY_ITEM_ID = MIC.INVENTORY_ITEM_ID
                 AND CMD.ORGANIZATION_ID = MIC.ORGANIZATION_ID
                 AND MIC.CATEGORY_SET_ID = 13 --库存
                 AND MIC.CATEGORY_NAME = '3.12.0' --PCBA
                 AND MIC.ENABLED_FLAG = 'Y'
                 AND NVL(MIC.DISABLE_DATE, SYSDATE + 1) > TRUNC(SYSDATE))
         AND NOT EXISTS (SELECT 1 --排除错阶的制造件
                FROM CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL,
                     CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR
              --msc_bom_components              MBC --add by Ray   20161221 加入父阶错阶判断--Commented by V1.018
               WHERE CMBH.SUBSTITUTE_CLASS = 3
                 AND CMBH.GROUP_ID = CMBL.GROUP_ID
                    /*--Commented by V1.018
                    AND MBC.PLAN_ID = cmd.plan_id
                    and mbc.sr_instance_id = cmd.sr_instance_id
                    and MBC.COMPONENT_SEQUENCE_ID = cmd.comp_seq_id
                    and cmbl.msc_item_id = mbc.using_assembly_id*/
                 AND CMBL.GROUP_ELEMENT_ID = CMCR.GROUP_ELEMENT_ID
                 AND CMBH.STATUS_CODE = 'APPROVED'
                 AND CMCR.MSC_SUB_COMP_ITEM_ID IS NOT NULL
                 AND CMCR.MSC_COMPONENT_ITEM_ID = CMD.INVENTORY_ITEM_ID
                    --Added below by V1.018
                    --所有在当前或者将来生效的错阶里面维护的SA都不在此步处理
                    --此SA的LOW LEVEL CODE必须为999
                 AND CMD.LOW_LEVEL_CODE = 999
                 AND (TRUNC(SYSDATE) >= TRUNC(CMBH.EFFECTIVITY_DATE) OR
                     TRUNC(SYSDATE) <= TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(SYSDATE))))
              --Added above by V1.018
              /*--Commented by V1.018
              AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
                  TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE)))
              AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
                  TRUNC(NVL(CMBL.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE)))*/
              )
       ORDER BY CMD.LOW_LEVEL_CODE,
                CMD.INVENTORY_ITEM_ID,
                CMD.USING_ASSEMBLY_DEMAND_DATE,
                CMD.SUPPLY_DATE,
                CMD.DEMAND_PRIORITY,
                CMD.TRANSACTION_ID;
  
    CURSOR LC_ZR_SUB(P_BILL_ID          NUMBER,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY, MCS.SUBSTITUTE_ITEM_ID, 1 SORT_ODER, 1 SUB_ITEM_TYPE, 'Y' ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                                 AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                                 AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                                 AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                                 AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
            --AND MBC.BILL_SEQUENCE_ID =/*GET_BILL_ID(-1, p_SR_INSTANCE_ID, P_COMPONENT_SEQ_ID) --*/P_BILL_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND mbc.BILL_SEQUENCE_ID = \*GET_BILL_ID(P_PLAN_ID, p_SR_INSTANCE_ID, P_COMPONENT_SEQ_ID) --*\P_BILL_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE             VARCHAR2(10);
    LN_USED_QTY               NUMBER := 0;
    LN_PLAN_QTY               NUMBER := 0;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_TOTAL_QTY              NUMBER;
    LN_SUB_TOTAL_QTY          NUMBER;
    LN_TOTAL_PLAN_QTY         NUMBER;
    LN_TOTAL_DEMAND_QTY       NUMBER;
    LN_CROSS_HEADER_ID        NUMBER;
    LV_PROCESS_FLAG           VARCHAR2(1);
    LN_COMPLETED_QTY          NUMBER;
    LV_WIP_PROCESS_FLAG       VARCHAR2(10);
    LN_PCBA_PEGGING_ID        NUMBER;
    LN_RDJ_PEGGING_ID         NUMBER;
    LD_USING_ASSY_D_DATE      DATE;
    LV_INSERT_SUPPLY_FLAG     VARCHAR2(10);
    LV_SUB_ITEM_TYPE          VARCHAR2(20);
    LN_LEVEL1_QTY             NUMBER;
    LN_LEVEL2_QTY             NUMBER;
    LN_LEVEL3_QTY             NUMBER;
    LV_BOM_FLAG               VARCHAR2(1); --Added by V1.018
    LN_SA_COUNT               NUMBER := 0;
    LN_SA_SUM                 NUMBER;
  
    LT_PEGGING_TEMP  CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP   CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
  
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'SA_COUNT', 'LOW LEVEL CODE：' || P_LEVEL_CODE);
    BEGIN
      SELECT COUNT(*)
        INTO LN_SA_SUM
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
         AND CMD.ITEM_TYPE != 'PH' --排除虚拟件
            --AND CMD.ITEM_NAME LIKE 'TD%'
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND GET_MPS_FLAG(CMD.ORGANIZATION_ID, CMD.INVENTORY_ITEM_ID) = 'N'
         AND CMD.LOW_LEVEL_CODE = P_LEVEL_CODE
         AND CMD.ORIGINATION_TYPE != 12 --MPS需求
         AND NOT EXISTS (SELECT 1 --排除PCBA部分
                FROM MSC.MSC_ITEM_CATEGORIES MIC
               WHERE CMD.INVENTORY_ITEM_ID = MIC.INVENTORY_ITEM_ID
                 AND CMD.ORGANIZATION_ID = MIC.ORGANIZATION_ID
                 AND MIC.CATEGORY_SET_ID = 13 --库存
                 AND MIC.CATEGORY_NAME = '3.12.0' --PCBA
                 AND MIC.ENABLED_FLAG = 'Y'
                 AND NVL(MIC.DISABLE_DATE, SYSDATE + 1) > TRUNC(SYSDATE))
         AND NOT EXISTS (SELECT 1 --排除错阶的制造件
                FROM CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL,
                     CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR
               WHERE CMBH.SUBSTITUTE_CLASS = 3
                 AND CMBH.GROUP_ID = CMBL.GROUP_ID
                 AND CMBL.GROUP_ELEMENT_ID = CMCR.GROUP_ELEMENT_ID
                 AND CMBH.STATUS_CODE = 'APPROVED'
                 AND CMCR.MSC_SUB_COMP_ITEM_ID IS NOT NULL
                 AND CMCR.MSC_COMPONENT_ITEM_ID = CMD.INVENTORY_ITEM_ID
                 AND CMD.LOW_LEVEL_CODE = 999
                 AND (TRUNC(SYSDATE) >= TRUNC(CMBH.EFFECTIVITY_DATE) OR
                     TRUNC(SYSDATE) <= TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(SYSDATE)))));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_SA_SUM := 0;
    END;
  
    DELETE CUX.CUX_MSC_WIP_PROCESS_RANGE;
    DELETE CUX.CUX_MSC_WIP_ITEM_RANGE;
  
    OPEN LC_SA;
    LOOP
      FETCH LC_SA bulk collect
        into LT_CUX_MSC_DEMANDS_PLAN LIMIT 5000;
    
      for r in 1 .. LT_CUX_MSC_DEMANDS_PLAN.count loop
        LN_SA_COUNT := LN_SA_COUNT + 1;
        BEGIN
          SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY
            INTO LV_PROCESS_FLAG, LN_PLAN_QTY
            FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
           WHERE CMD.PLAN_ID = P_PLAN_ID
             AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
             AND CMD.PEGGING_ID = LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_PROCESS_FLAG := 'Y';
        END;
      
        IF LV_PROCESS_FLAG = 'N' THEN
          LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                      'SA_COUNT',
                      '总记录数：' || LN_SA_SUM || '  DEMAND_ID = ' || LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID || '  SA记录：' ||
                      LN_SA_COUNT);
        
          IF GV_LOG_FLAG = 'Y' THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** 制造件 000 DEMAND_ID ' || LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID);
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** 制造件 001 料号 ' ||
                GET_ITEM_NAME(P_PLAN_ID,
                              p_SR_INSTANCE_ID,
                              LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                              LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 002 总需分配数量 ' || LN_PLAN_QTY);
          
          END IF;
          --LN_PLAN_QTY := LT_CUX_MSC_DEMANDS_PLAN(r).ALLOCATED_QUANTITY;
        
          --先计算自然替代与主料总的可供应量
          LN_TOTAL_QTY := 0;
        
          /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
          DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
          DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
        
          /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
        
          FOR LR_ZR_SUB IN LC_ZR_SUB(LT_CUX_MSC_DEMANDS_PLAN(r).bill_id,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).END_ITEM_USAGE) LOOP
          
            SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
          
            INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
              (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
            VALUES
              (LN_CROSS_HEADER_ID,
               LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
               LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
               LR_ZR_SUB.ZR_SUB_FLAG);
          
          END LOOP;
        
          CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
        
          --计算自然替代跟普通替代 主料成套量不能满足部分
          --按照比例分配
          CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                                   p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                   P_ORGANIZATION_ID => LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                   P_PLAN_QTY        => LN_PLAN_QTY,
                                   P_ALLOT_FLAG      => 'N',
                                   PO_ERROR_CODE     => LV_ERROR_CODE);
          IF LV_ERROR_CODE = 2 THEN
            RAISE LE_EXCEPTION;
          END IF;
        
          -- IF NVL(LN_TOTAL_QTY, 0) > 0 THEN
        
          FOR LR_ZR_SUB IN LC_ZR_SUB(LT_CUX_MSC_DEMANDS_PLAN(r).bill_id,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                     LT_CUX_MSC_DEMANDS_PLAN(r).END_ITEM_USAGE) LOOP
            --IF LN_PLAN_QTY > 0 THEN
            --得到此替代料总的可用量
            BEGIN
              SELECT SUM(NVL(CMGQ.USED_QTY, 0))
                INTO LN_SUB_TOTAL_QTY
                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
               WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                LN_SUB_TOTAL_QTY := 0;
            END;
            IF GV_LOG_FLAG = 'Y' THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 制造件 003 分配料号 ' ||
                  GET_ITEM_NAME(P_PLAN_ID,
                                p_SR_INSTANCE_ID,
                                LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
              SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
                INTO LV_SUB_ITEM_TYPE
                FROM DUAL;
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 003 料号类型 ' || LV_SUB_ITEM_TYPE);
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 制造件 004 库存数量齐套数 ' || NVL(LN_LEVEL1_QTY, 0));
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 制造件 005 在途数量齐套数 ' || NVL(LN_LEVEL2_QTY, 0));
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 制造件 006 剩余加计划单齐套数 ' || NVL(LN_LEVEL3_QTY, 0));
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 007 分配数量 ' || LN_SUB_TOTAL_QTY);
            END IF;
            IF LN_SUB_TOTAL_QTY > 0 THEN
            
              BEGIN
                SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                       MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                       MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                       MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                       MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
                  INTO LN_SUB_PREPROCE_LEAD_TIME,
                       LN_SUB_POST_LEAD_TIME,
                       LN_SUB_FULL_LEAD_TIME,
                       LN_SUB_FIXED_LEAD_TIME,
                       LN_SUB_VARIA_LEAD_TIME
                  FROM MSC_SYSTEM_ITEMS MSI
                 WHERE MSI.plan_id = P_PLAN_ID
                   AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                   AND MSI.ORGANIZATION_ID = LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID
                   AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_SUB_PREPROCE_LEAD_TIME := 0;
                  LN_SUB_POST_LEAD_TIME     := 0;
                  LN_SUB_FULL_LEAD_TIME     := 0;
                  LN_SUB_FIXED_LEAD_TIME    := 0;
                  LN_SUB_VARIA_LEAD_TIME    := 0;
              END;
            
              LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
              LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
              --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
              LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
              LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
              LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
            
              LN_TOTAL_PLAN_QTY   := LEAST(LN_SUB_TOTAL_QTY, LN_PLAN_QTY);
              LN_TOTAL_DEMAND_QTY := LN_TOTAL_PLAN_QTY;
            
              LN_PLAN_QTY := LN_PLAN_QTY - LN_TOTAL_PLAN_QTY;
              IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
                --写入减少原需求供应追溯
                --WRITE NEED
                p_change_pegging(p_plan_id        => P_PLAN_ID,
                                 p_sr_instance_id => P_SR_INSTANCE_ID,
                                 p_pegging_id     => LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID,
                                 p_chang_qty      => LN_TOTAL_PLAN_QTY,
                                 P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--Added by V1.027
                                 p_flag           => 'Y');
                --写入一条替代料的需求
                BEGIN
                  SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
                
                  LT_DEMAND_TEMP := NULL;
                  --LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID , 'LN_DEMAND_ID', LN_DEMAND_ID);
                  LT_DEMAND_TEMP.ORDER_PRIORITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_MAD                   := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_MAD;
                  LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                  LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_DESIGNATOR_ID;
                  LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
                  LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .ASSEMBLY_DEMAND_COMP_DATE);
                  LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                  LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                  LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                  LT_DEMAND_TEMP.DEMAND_PRIORITY                := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_PRIORITY;
                  LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_PRIORITY              := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_PRIORITY;
                  LT_DEMAND_TEMP.PLANNING_GROUP                 := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNING_GROUP;
                  LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LT_CUX_MSC_DEMANDS_PLAN(r).DAILY_DEMAND_RATE;
                  LT_DEMAND_TEMP.UNIT_NUMBER                    := LT_CUX_MSC_DEMANDS_PLAN(r).UNIT_NUMBER;
                  LT_DEMAND_TEMP.DISPOSITION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                  LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_ITEM_ID;
                  LT_DEMAND_TEMP.PLAN_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                  LT_DEMAND_TEMP.ORGANIZATION_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                  LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
                  LT_DEMAND_TEMP.PROJECT_ID                     := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                  LT_DEMAND_TEMP.TASK_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                  LT_DEMAND_TEMP.CUSTOMER_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_ID;
                  LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).CUSTOMER_SITE_ID;
                  LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                  LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_SITE_ID;
                  LT_DEMAND_TEMP.PROMISE_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_DATE;
                  LT_DEMAND_TEMP.SELLING_PRICE                  := LT_CUX_MSC_DEMANDS_PLAN(r).SELLING_PRICE;
                  LT_DEMAND_TEMP.DMD_LATENESS_COST              := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_LATENESS_COST;
                  LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).DMD_SATISFIED_DATE;
                  LT_DEMAND_TEMP.OP_SEQ_NUM                     := LT_CUX_MSC_DEMANDS_PLAN(r).OP_SEQ_NUM;
                  LT_DEMAND_TEMP.UPDATED                        := LT_CUX_MSC_DEMANDS_PLAN(r).UPDATED;
                  LT_DEMAND_TEMP.STATUS                         := LT_CUX_MSC_DEMANDS_PLAN(r).STATUS;
                  LT_DEMAND_TEMP.APPLIED                        := LT_CUX_MSC_DEMANDS_PLAN(r).APPLIED;
                  LT_DEMAND_TEMP.DEMAND_CLASS                   := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                  LT_DEMAND_TEMP.FIRM_QUANTITY                  := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_QUANTITY;
                  LT_DEMAND_TEMP.FIRM_DATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_DATE;
                  LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_QUANTITY;
                  LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_DEMAND_DATE;
                  LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_ORGANIZATION_ID;
                  LT_DEMAND_TEMP.RESERVATION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVATION_ID;
                  LT_DEMAND_TEMP.PARENT_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_ID;
                  LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_PROJECT_ID;
                  LT_DEMAND_TEMP.LENDING_TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LENDING_TASK_ID;
                  LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
                  LT_DEMAND_TEMP.ORDER_NUMBER                   := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_NUMBER;
                  LT_DEMAND_TEMP.RESERVED_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).RESERVED_QUANTITY;
                  LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                  LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                  LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                  LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                  LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                  LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE_CATEGORY;
                  LT_DEMAND_TEMP.ATTRIBUTE1                     := 'Y';
                  LT_DEMAND_TEMP.ATTRIBUTE2                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE2;
                  LT_DEMAND_TEMP.ATTRIBUTE3                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE3;
                  LT_DEMAND_TEMP.ATTRIBUTE4                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE4;
                  LT_DEMAND_TEMP.ATTRIBUTE5                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE5;
                  LT_DEMAND_TEMP.ATTRIBUTE6                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE6;
                  LT_DEMAND_TEMP.ATTRIBUTE7                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE7;
                  LT_DEMAND_TEMP.ATTRIBUTE8                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE8;
                  LT_DEMAND_TEMP.ATTRIBUTE9                     := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE9;
                  LT_DEMAND_TEMP.ATTRIBUTE10                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE10;
                  LT_DEMAND_TEMP.ATTRIBUTE11                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE11;
                  LT_DEMAND_TEMP.ATTRIBUTE12                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE12;
                  LT_DEMAND_TEMP.ATTRIBUTE13                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE13;
                  LT_DEMAND_TEMP.ATTRIBUTE14                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE14;
                  LT_DEMAND_TEMP.ATTRIBUTE15                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATTRIBUTE15;
                  LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_ID;
                  LT_DEMAND_TEMP.ISSUED_QUANTITY                := LT_CUX_MSC_DEMANDS_PLAN(r).ISSUED_QUANTITY;
                  LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).REPETITIVE_SCHEDULE_ID;
                  LT_DEMAND_TEMP.REFRESH_NUMBER                 := LT_CUX_MSC_DEMANDS_PLAN(r).REFRESH_NUMBER;
                  LT_DEMAND_TEMP.REQUEST_DATE                   := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_DATE;
                  LT_DEMAND_TEMP.WIP_STATUS_CODE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_STATUS_CODE;
                  LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_SUPPLY_TYPE;
                  LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_ORG_INSTANCE_ID;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_ID;
                  LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LT_CUX_MSC_DEMANDS_PLAN(r).CONFIDENCE_PERCENTAGE;
                  LT_DEMAND_TEMP.BUCKET_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).BUCKET_TYPE;
                  LT_DEMAND_TEMP.BILL_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).BILL_ID;
                  LT_DEMAND_TEMP.PROBABILITY                    := LT_CUX_MSC_DEMANDS_PLAN(r).PROBABILITY;
                  LT_DEMAND_TEMP.FORECAST_SET_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).FORECAST_SET_ID;
                  LT_DEMAND_TEMP.GROUP_ID                       := LT_CUX_MSC_DEMANDS_PLAN(r).GROUP_ID;
                  LT_DEMAND_TEMP.SERVICE_LEVEL                  := LT_CUX_MSC_DEMANDS_PLAN(r).SERVICE_LEVEL;
                  LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_BY_DUE_DATE;
                  LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LT_CUX_MSC_DEMANDS_PLAN(r).TARGET_SAFETY_STOCK;
                  LT_DEMAND_TEMP.SCENARIO_SET                   := LT_CUX_MSC_DEMANDS_PLAN(r).SCENARIO_SET;
                  LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_SOURCE_TYPE;
                  LT_DEMAND_TEMP.SUPPLY_ID                      := LT_CUX_MSC_DEMANDS_PLAN(r).SUPPLY_ID;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_SYSTEM_REFERENCE;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                   .ORIGINAL_SYSTEM_LINE_REFERENCE;
                  LT_DEMAND_TEMP.STOLEN_FLAG                    := LT_CUX_MSC_DEMANDS_PLAN(r).STOLEN_FLAG;
                  LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                   .OLD_USING_REQUIREMENT_QUANTITY;
                  LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                   .OLD_USING_ASSEMBLY_DEMAND_DATE;
                  LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                   .OLD_ASSEMBLY_DEMAND_COMP_DATE;
                  LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LT_CUX_MSC_DEMANDS_PLAN(r).CUMMULATIVE_PROBABILITY;
                  LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ITEM_ID;
                  LT_DEMAND_TEMP.UNMET_QUANTITY                 := LT_CUX_MSC_DEMANDS_PLAN(r).UNMET_QUANTITY;
                  LT_DEMAND_TEMP.RECORD_SOURCE                  := LT_CUX_MSC_DEMANDS_PLAN(r).RECORD_SOURCE;
                  LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).LINK_TO_LINE_ID;
                  LT_DEMAND_TEMP.ERROR_TYPE                     := LT_CUX_MSC_DEMANDS_PLAN(r).ERROR_TYPE;
                  LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_SYNCHRONIZATION_FLAG;
                  LT_DEMAND_TEMP.COMP_SEQ_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).COMP_SEQ_ID;
                  LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LT_CUX_MSC_DEMANDS_PLAN(r).QUANTITY_PER_ASSEMBLY;
                  LT_DEMAND_TEMP.RELEASE_STATUS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_STATUS;
                  LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LT_CUX_MSC_DEMANDS_PLAN(r).RESCHEDULE_FLAG;
                  LT_DEMAND_TEMP.LOAD_TYPE                      := LT_CUX_MSC_DEMANDS_PLAN(r).LOAD_TYPE;
                  LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ORG_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_INSTANCE_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_DATE;
                  LT_DEMAND_TEMP.RELEASE_ERRORS                 := LT_CUX_MSC_DEMANDS_PLAN(r).RELEASE_ERRORS;
                  LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LT_CUX_MSC_DEMANDS_PLAN(r).ORG_FIRM_FLAG;
                  LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_ORG_ID;
                  LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_INST_ID;
                  LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_ID;
                  LT_DEMAND_TEMP.SHIP_SET_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_ID;
                  LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).ORDER_DATE_TYPE_CODE;
                  LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).LATEST_ACCEPTABLE_DATE;
                  LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LT_CUX_MSC_DEMANDS_PLAN(r).SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).REQUEST_SHIP_DATE;
                  LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PROMISE_SHIP_DATE;
                  LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LT_CUX_MSC_DEMANDS_PLAN(r).SCHEDULE_SHIP_DATE;
                  LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_DEMAND_ID;
                  LT_DEMAND_TEMP.ZONE_ID                        := LT_CUX_MSC_DEMANDS_PLAN(r).ZONE_ID;
                  LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_OVERRIDE_FLAG;
                  LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_FIRM;
                  LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_EARLIEST_DATE;
                  LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).UNBUCKETED_DEMAND_DATE;
                  LT_DEMAND_TEMP.ATO_LINE_ID                    := LT_CUX_MSC_DEMANDS_PLAN(r).ATO_LINE_ID;
                  LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LT_CUX_MSC_DEMANDS_PLAN(r).STD_MANDATORY_COMP_FLAG;
                  LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LT_CUX_MSC_DEMANDS_PLAN(r).OLD_REFRESH_NUMBER;
                  LT_DEMAND_TEMP.SHIP_METHOD                    := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_METHOD;
                  LT_DEMAND_TEMP.SHIP_CALENDAR                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_CALENDAR;
                  LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).RECEIVING_CALENDAR;
                  LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LT_CUX_MSC_DEMANDS_PLAN(r).INTRANSIT_CALENDAR;
                  LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_TO_LOCATION_ID;
                  LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LT_CUX_MSC_DEMANDS_PLAN(r).ORIGINAL_QUANTITY;
                  LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_PRIORITY;
                  LT_DEMAND_TEMP.FINAL_USE_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).FINAL_USE_DATE;
                  LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LT_CUX_MSC_DEMANDS_PLAN(r).ARRIVAL_SET_NAME;
                  LT_DEMAND_TEMP.SHIP_SET_NAME                  := LT_CUX_MSC_DEMANDS_PLAN(r).SHIP_SET_NAME;
                  LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).SOURCE_PHANTOM_ID;
                  LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIMARY_COMPONENT_ID;
                  LT_DEMAND_TEMP.ATP_SESSION_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).ATP_SESSION_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LT_CUX_MSC_DEMANDS_PLAN(r).IMPLEMENT_SHIP_DATE;
                  LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_SHIP_DATE;
                  LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LT_CUX_MSC_DEMANDS_PLAN(r).PRIOR_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LT_CUX_MSC_DEMANDS_PLAN(r).MANUAL_ALLOCATION_DATE;
                  LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LT_CUX_MSC_DEMANDS_PLAN(r).FIRM_ALLOCATION_FLAG;
                  LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_SERIAL_NUMBER;
                  LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LT_CUX_MSC_DEMANDS_PLAN(r).ASSET_ITEM_ID;
                  LT_DEMAND_TEMP.EXPIRATION_DATE                := LT_CUX_MSC_DEMANDS_PLAN(r).EXPIRATION_DATE;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LT_CUX_MSC_DEMANDS_PLAN(r).SALES_ORDER_LINE_SPLIT;
                  LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LT_CUX_MSC_DEMANDS_PLAN(r).PLANNED_INBOUND_DUE_DATE;
                  LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LT_CUX_MSC_DEMANDS_PLAN(r).FILL_KILL_FLAG;
                  LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LT_CUX_MSC_DEMANDS_PLAN(r).DEFINITION_LEVEL_USED;
                  LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                   .DEMAND_FULFILLMENT_LEAD_TIME;
                  LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_SCALING_TYPE;
                  LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LT_CUX_MSC_DEMANDS_PLAN(r).COMPONENT_YIELD_FACTOR;
                  LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).SPLIT_FROM_DEMAND_ID;
                  LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ITEM;
                  LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_SUBST_ORG;
                  LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_ID;
                  LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE_VALUE;
                  LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LT_CUX_MSC_DEMANDS_PLAN(r).REPAIR_LINE_ID;
                  LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).OTM_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LT_CUX_MSC_DEMANDS_PLAN(r).WIP_ENTITY_NAME;
                  LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LT_CUX_MSC_DEMANDS_PLAN(r).MIN_REM_SHELF_LIFE_DAYS;
                  LT_DEMAND_TEMP.REVISED_DMD_DATE               := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_DATE;
                  LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LT_CUX_MSC_DEMANDS_PLAN(r).REVISED_DMD_PRIORITY;
                  LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LT_CUX_MSC_DEMANDS_PLAN(r).TOP_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PARENT_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.DAYS_LATE                      := LT_CUX_MSC_DEMANDS_PLAN(r).DAYS_LATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_DATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LT_CUX_MSC_DEMANDS_PLAN(r).ORIG_FIRM_QUANTITY;
                  LT_DEMAND_TEMP.OBJECT_TYPE                    := LT_CUX_MSC_DEMANDS_PLAN(r).OBJECT_TYPE;
                  LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LT_CUX_MSC_DEMANDS_PLAN(r).MAINTENANCE_OBJECT_SOURCE;
                  LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                  INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MD',
                        '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
              ELSE
                BEGIN
                  SELECT ALLOCATED_QUANTITY
                    INTO LN_TOTAL_DEMAND_QTY
                    FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
                   WHERE CMD.PLAN_ID = P_PLAN_ID
                     AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                     AND CMD.PEGGING_ID = LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LN_TOTAL_DEMAND_QTY := 0;
                END;
                p_change_pegging(p_plan_id        => P_PLAN_ID,
                                 p_sr_instance_id => P_SR_INSTANCE_ID,
                                 p_pegging_id     => LT_CUX_MSC_DEMANDS_PLAN(r).PEGGING_ID,
                                 p_chang_qty      => LN_TOTAL_PLAN_QTY,
                                 P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--Added by V1.027
                                 p_flag           => 'N');
                LN_DEMAND_ID := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_ID;
              END IF;
            
              --冲减现有量
              FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                               LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_OH.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                  LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                  --LN_PLAN_QTY := 0;
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                  --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                END IF;
              
                LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
              
                IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                  --写入供应数据
                  BEGIN
                    LV_SUPPLIES_TEMP := NULL;
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                          .USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                 .USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                 .USING_ASSEMBLY_DEMAND_DATE -
                                                                                  LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                 .USING_ASSEMBLY_DEMAND_DATE -
                                                                                  LN_SUB_POST_LEAD_TIME -
                                                                                  LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                 .USING_ASSEMBLY_DEMAND_DATE -
                                                                                  LN_SUB_POST_LEAD_TIME -
                                                                                  LN_SUB_FULL_LEAD_TIME -
                                                                                  LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                    LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                    LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                    LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                    LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                    LV_SUPPLIES_TEMP.UPDATED                 := 2;
                    LV_SUPPLIES_TEMP.STATUS                  := 0;
                    LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                  
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                
                END IF;
              
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
                IF LN_TOTAL_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              END LOOP;
            
              --若现有量不能满足需求则用工单的产出去满足需求
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                --冲减对应的工单，按照工单的开工日期，工单ID排序
                FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID,
                                                 LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                 LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                    --LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_DJ.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                  END IF;
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  --写入供应数据
                  LV_INSERT_SUPPLY_FLAG := 'N';
                  IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                    LV_INSERT_SUPPLY_FLAG := 'Y';
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                  
                    --写入WIP处理表
                    SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                           .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                      INTO LD_USING_ASSY_D_DATE
                      FROM DUAL;
                    BEGIN
                      INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                      VALUES
                        (LR_SUPPLY_DJ.ROW_ID,
                         LR_SUPPLY_DJ.DISPOSITION_ID,
                         LN_TRANSACTION_ID,
                         GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    --写入WIP优先处理表
                    BEGIN
                      INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                        (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                        SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                          FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                         WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                           AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    --更新工作单需求的ISSUED_QTY
                    LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                  
                    --更新实际ISSUED数量
                    BEGIN
                      UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                         SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                       where 1 = 1
                         AND CMD.plan_id = -1
                         AND CMD.ORIGINATION_TYPE IN (2, 3)
                         and CMD.sr_instance_id = p_SR_INSTANCE_ID
                         AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                    --删除MPS与非标准工单提前写入写入部分
                    IF LR_SUPPLY_DJ.order_type = 7 THEN
                    
                      BEGIN
                        SELECT 'N', MFP.PEGGING_ID
                          INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                          FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                         WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                           AND MFP.PLAN_ID = P_PLAN_ID
                           AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                           AND MFP.DEMAND_ID = -1;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                          LV_WIP_PROCESS_FLAG := 'Y';
                      END;
                    
                      IF LV_WIP_PROCESS_FLAG = 'N' THEN
                      
                        p_change_pegging(p_plan_id        => P_PLAN_ID,
                                         p_sr_instance_id => P_SR_INSTANCE_ID,
                                         p_pegging_id     => LN_RDJ_PEGGING_ID,
                                         p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                         p_flag           => 'N');
                      
                        LV_INSERT_SUPPLY_FLAG := 'Y';
                      
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      
                        UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                           SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                         WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                      
                        --写入WIP处理表
                        SELECT LT_CUX_MSC_DEMANDS_PLAN(r)
                               .ASSEMBLY_DEMAND_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                          INTO LD_USING_ASSY_D_DATE
                          FROM DUAL;
                        BEGIN
                          INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                          VALUES
                            (LR_SUPPLY_DJ.ROW_ID,
                             LR_SUPPLY_DJ.DISPOSITION_ID,
                             LN_TRANSACTION_ID,
                             GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MS',
                                '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                        END;
                      
                        --写入WIP优先处理表
                        BEGIN
                          INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                            (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                            SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                              FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                             WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                               AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MS',
                                '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                        END;
                      
                        --更新工作单需求的ISSUED_QTY
                        LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                        BEGIN
                          UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                             SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                           where 1 = 1
                             AND CMD.plan_id = -1
                             AND CMD.ORIGINATION_TYPE IN (2, 3)
                             and CMD.sr_instance_id = p_SR_INSTANCE_ID
                             AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                        EXCEPTION
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MS',
                                '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            LV_ERROR_CODE := 2;
                            RAISE LE_EXCEPTION;
                        END;
                      
                      END IF;
                    
                    END IF;
                  
                  END IF;
                
                  IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                    BEGIN
                      LV_SUPPLIES_TEMP                           := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID                   := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
                      LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                      LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                    .USING_ASSEMBLY_DEMAND_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                      LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                      LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                      LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                      LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                      LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                      LV_SUPPLIES_TEMP.UPDATED                   := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                      LV_SUPPLIES_TEMP.STATUS                    := 0;
                      LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                      LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                      LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                      LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                      LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                      LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP := NULL;
                  
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                
                  BEGIN
                    SELECT CMW.SUPPLY_DATE
                      INTO LD_USING_ASSY_D_DATE
                      FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                     WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
                  END;
                
                  --Added below by V1.018
                  IF LR_SUPPLY_DJ.order_type = 7 THEN
                    LV_BOM_FLAG := 'N';
                  ELSE
                    LV_BOM_FLAG := 'Y';
                  END IF;
                  --Added above by V1.018
                
                  --写入工作单需求及工作单，优先耗用相关的物料
                  INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                     P_PLAN_ID               => P_PLAN_ID,
                                     P_ORGANIZATION_ID       => LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                     P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                     P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                     P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                     P_END_PEGGING_ID        => LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID,
                                     P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                     P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                     P_END_ORIGINATION_TYPE  => LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE,
                                     P_LEVEL_FLAG            => 1,
                                     P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                     P_PLAN_QTY              => LN_USED_QTY,
                                     P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                     P_D_COUNT               => LN_D_COUNT,
                                     P_S_COUNT               => LN_S_COUNT,
                                     P_P_COUNT               => LN_P_COUNT);
                
                  IF LN_TOTAL_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --若工单的产出不能满足需求则用工单的副需求去满足
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                --冲减对应的工单，按照工单的开工日期，工单ID排序
                FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                   LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                   LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                    --LN_PLAN_QTY := 0;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  END IF;
                
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      LV_SUPPLIES_TEMP := NULL;
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                    
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                
                  IF LN_TOTAL_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用在途部分去满足
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                   LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                   LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                    --LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  END IF;
                
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PO部分去满足
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID,
                                                 LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                 LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PO.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                    --LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  END IF;
                
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                  IF LN_TOTAL_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PR部分去满足
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID,
                                                 LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID,
                                                 LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PR.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                    --LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                    --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  END IF;
                
                  LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                
                  IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                  
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                                   .USING_ASSEMBLY_DEMAND_DATE -
                                                                                    LN_SUB_POST_LEAD_TIME -
                                                                                    LN_SUB_FULL_LEAD_TIME -
                                                                                    LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                              .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                  IF LN_TOTAL_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --其余部分写入计划单供应
              IF LN_TOTAL_PLAN_QTY > 0 THEN
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                        .USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LT_CUX_MSC_DEMANDS_PLAN(r).ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                               .USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                               .USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                               .USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                               .USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                LN_SUB_FULL_LEAD_TIME -
                                                                                LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID          := LT_CUX_MSC_DEMANDS_PLAN(r).DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --现有量
                  LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                  LV_SUPPLIES_TEMP.UPDATED                 := 2;
                  LV_SUPPLIES_TEMP.STATUS                  := 0;
                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT PCBA SUPPLIES 037 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LT_CUX_MSC_DEMANDS_PLAN(r)
                                                                            .USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LT_CUX_MSC_DEMANDS_PLAN(r).END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LT_CUX_MSC_DEMANDS_PLAN(r).PREV_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LT_CUX_MSC_DEMANDS_PLAN(r).PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LT_CUX_MSC_DEMANDS_PLAN(r).TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := LT_CUX_MSC_DEMANDS_PLAN(r).SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LT_CUX_MSC_DEMANDS_PLAN(r).DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT PCBA PEGGINGS 038 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
              END IF;
            
            END IF;
          
          --END IF;
          END LOOP;
          COMMIT;
        END IF;
      
      END LOOP;
      EXIT WHEN LC_SA%NOTFOUND;
    END LOOP;
    CLOSE LC_SA;
  
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'SA_COUNT', '总处理SA记录数：' || LN_SA_COUNT);
  
    --工单有剩余部分写入剩余数据
    FOR LR_SUPPLY_DJ IN (SELECT CMW.SUPPLY_DATE, CMS.*
                           FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW, CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                          WHERE CMS.ROW_ID = CMW.ROW_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1) LOOP
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_DJ.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL;
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE); --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_DJ.INVENTORY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_DJ.ORGANIZATION_ID;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_DJ.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_DJ.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_DJ.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           LR_SUPPLY_DJ.ORGANIZATION_ID,
           LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
           LR_SUPPLY_DJ.NEW_TRANSACTION_ID,
           '',
           LR_SUPPLY_DJ.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      --Added below by V1.018
      IF LR_SUPPLY_DJ.order_type = 7 THEN
        LV_BOM_FLAG := 'N';
      ELSE
        LV_BOM_FLAG := 'Y';
      END IF;
      --Added above by V1.018
      
      --Added by V1.028
      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
      SET    CMS.REMAIN_QTY = 0
      WHERE  CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
    
      INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                         P_PLAN_ID               => P_PLAN_ID,
                         P_ORGANIZATION_ID       => LR_SUPPLY_DJ.ORGANIZATION_ID,
                         P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                         P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                         P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                         P_END_PEGGING_ID        => LN_PEGGING_ID,
                         P_ASSY_DEMAND_COMP_DATE => GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE),
                         P_ASSY_DEMAND_DATE      => GET_ACTUAL_DATE(LR_SUPPLY_DJ.SUPPLY_DATE),
                         P_END_ORIGINATION_TYPE  => NULL,
                         P_LEVEL_FLAG            => 1,
                         P_ACCESS_FLAG           => 'Y',
                         P_BOM_FLAG => LV_BOM_FLAG, --Added by V1.018
                         P_PLAN_QTY => LR_SUPPLY_DJ.REMAIN_QTY,
                         P_ORGI_USAGE => 1,--初始单位用量--Added by v1.027
                         P_D_COUNT  => LN_D_COUNT,
                         P_S_COUNT  => LN_S_COUNT,
                         P_P_COUNT  => LN_P_COUNT);
    END LOOP;
  
    COMMIT;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
      LT_CUX_MSC_DEMANDS_PLAN_NEW.delete;
      LT_CUX_MSC_FULL_PEGGING_PLAN.delete;
      LT_CUX_MSC_SUPPLIES_PLAN.delete;
  END;

  /***********************************************************************************
   NAME: CALCULATE_CROSS_PROCESS
   DESCRIPTION:处理SA部分,排除PCBA，错阶替代，PH部分
  ***********************************************************************************/
  PROCEDURE CALCULATE_CROSS_PROCESS(p_SR_INSTANCE_ID NUMBER,
                                    P_PLAN_ID        NUMBER,
                                    P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                    P_D_COUNT        IN OUT NUMBER,
                                    P_S_COUNT        IN OUT NUMBER,
                                    P_P_COUNT        IN OUT NUMBER,
                                    PO_ERROR_CODE    OUT VARCHAR2) IS
  
    --LT_CUX_MSC_DEMANDS_PLAN GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
  
    CURSOR LC_ZR_SUB(p_bill_id          number,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from cux.cux_msc_component_substitutes /*MSC_COMPONENT_SUBSTITUTES*/ MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --and mbc.bill_sequence_id = p_bill_id
      --and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         and mbc.bill_sequence_id = p_bill_id*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_ZR_SUB_1(p_bill_id          number,
                       P_COMPONENT_SEQ_ID NUMBER,
                       P_MAIN_ITEM_ID     NUMBER,
                       P_ORGANIZATION_ID  NUMBER,
                       P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --and mbc.bill_sequence_id = p_bill_id
      --and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         and mbc.bill_sequence_id = p_bill_id*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_ZR_SUB_2(P_BILL_ID          NUMBER,
                       P_COMPONENT_SEQ_ID NUMBER,
                       P_MAIN_ITEM_ID     NUMBER,
                       P_ORGANIZATION_ID  NUMBER,
                       P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --AND MBC.BILL_SEQUENCE_ID = P_BILL_ID
      --and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_BOM(P_PLAN_ID         NUMBER,
                  p_SR_INSTANCE_ID  NUMBER,
                  P_ORGANIZATION_ID NUMBER,
                  P_ASSY_ITEM_ID    NUMBER,
                  P_BOM_VER_DATE    DATE) IS
      select MBC.INVENTORY_ITEM_ID,
             MBC.USAGE_QUANTITY,
             MBC.COMPONENT_SEQUENCE_ID,
             MBC.OPERATION_SEQ_NUM,
             mbc.bill_sequence_id
        from msc_bom_components mbc, msc_boms mb, MSC_SYSTEM_ITEMS MSI
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and mb.plan_id = -1 --P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         AND MBC.INVENTORY_ITEM_ID = MSI.INVENTORY_ITEM_ID
         AND MBC.ORGANIZATION_ID = MSI.ORGANIZATION_ID
         AND MBC.PLAN_ID = MSI.PLAN_ID
         AND MBC.SR_INSTANCE_ID = MSI.SR_INSTANCE_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1)
       ORDER BY MSI.LOW_LEVEL_CODE;
  
    CURSOR LC_SECOND_BOM(P_PLAN_ID         NUMBER,
                         p_SR_INSTANCE_ID  NUMBER,
                         P_ORGANIZATION_ID NUMBER,
                         P_ASSY_ITEM_ID    NUMBER,
                         P_BOM_VER_DATE    DATE) IS
      select MBC.INVENTORY_ITEM_ID,
             MBC.USAGE_QUANTITY,
             MBC.COMPONENT_SEQUENCE_ID,
             MBC.OPERATION_SEQ_NUM,
             MBC.BILL_SEQUENCE_ID
        from msc_bom_components mbc, msc_boms mb
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and mb.plan_id = -1 --P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1);
  
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE             VARCHAR2(10);
    LN_USED_QTY               NUMBER := 0;
    LN_PLAN_QTY               NUMBER := 0;
    LN_PLAN_QTY_2             NUMBER;
    LN_PLAN_QTY_3             NUMBER;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_TOTAL_QTY              NUMBER;
    LN_SUB_TOTAL_QTY          NUMBER;
    LN_TOTAL_PLAN_QTY         NUMBER;
    LN_TOTAL_DEMAND_QTY       NUMBER;
    LN_CROSS_HEADER_ID        NUMBER;
    LN_CROSS_LINE_ID          NUMBER;
    LN_CROSS_DETAIL_ID        NUMBER;
    LV_PRIORITY_FLAG          VARCHAR2(1);
    LV_NEXT_LEVEL_FLAG        VARCHAR2(1);
    LN_PREVIOUS_PEGGING_ID    NUMBER;
    LN_SECOND_PEGGING_ID      NUMBER;
    LV_PROCESS_FLAG           VARCHAR2(1);
    LN_COMPLETED_QTY          NUMBER;
    LV_WIP_PROCESS_FLAG       VARCHAR2(10);
    LN_PCBA_PEGGING_ID        NUMBER;
    LN_RDJ_PEGGING_ID         NUMBER;
    LD_USING_ASSY_D_DATE      DATE;
    LV_INSERT_SUPPLY_FLAG     VARCHAR2(10);
    LN_SECOND_PLAN_QTY        NUMBER;
    LN_MAKE_BUY_CODE          NUMBER;
    LV_ITEM_TYPE              VARCHAR2(200);
    LV_ITEM_NAME              VARCHAR2(200);
    LN_LOW_LEVEL_CODE         NUMBER;
    LD_LEVEL1_US_COMP_DATE    DATE;
    LD_LEVEL2_US_COMP_DATE    DATE;
    LN_LEVEL1_QTY             NUMBER;
    LN_LEVEL3_QTY             NUMBER;
    LN_LEVEL2_QTY             NUMBER;
    LV_SUB_ITEM_TYPE          VARCHAR2(20);
    LV_BOM_FLAG               VARCHAR2(1); --Added by V1.018
    LN_COMP_SEQ_ID            NUMBER; --Added by V1.018
    LN_COMPONENT_SEQUENCE_ID  NUMBER; --Added by V1.018
    LV_ONLY_PEGGING_FLAG      VARCHAR2(1);
    LN_SUB_TOTAL_QTY_2        NUMBER;
    LN_SUB_TOTAL_QTY_3        NUMBER;
    LT_PEGGING_TEMP           CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP            CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP          CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
    BEGIN
      SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY
        INTO LV_PROCESS_FLAG, LN_PLAN_QTY
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PEGGING_ID = P_DEMAND_DETAIL.PEGGING_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_PROCESS_FLAG := 'Y';
    END;
  
    IF LV_PROCESS_FLAG = 'N' THEN
      --LN_PLAN_QTY := P_DEMAND_DETAIL.ALLOCATED_QUANTITY;
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 错阶 000 DEMAND_ID ' || P_DEMAND_DETAIL.DEMAND_ID);
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 错阶 001 料号 ' || GET_ITEM_NAME(P_PLAN_ID,
                                                     p_SR_INSTANCE_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     P_DEMAND_DETAIL.INVENTORY_ITEM_ID));
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 错阶 002 总需分配数量 ' || LN_PLAN_QTY);
      END IF;
    
      --先计算自然替代总的可供应量
      LN_TOTAL_QTY := 0;
      /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
      DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
      DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
      /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(p_demand_detail.bill_id,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
      
        SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
      
        INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
          (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
        VALUES
          (LN_CROSS_HEADER_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID, LR_ZR_SUB.ZR_SUB_FLAG);
      
        FOR LR_LINE IN (SELECT GRP_CLOSS_LEVEL_SUBSTITUTE_ID, MBC.INVENTORY_ITEM_ID, MBC.USAGE_QUANTITY
                          FROM CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMSL,
                               CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR,
                               CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMSH,
                               msc_bom_components              mbc,
                               msc_boms                        mb
                         WHERE 1 = 1
                           AND CMSL.GROUP_ELEMENT_ID = CMCR.GROUP_ELEMENT_ID
                           AND CMSL.GROUP_ID = CMSH.GROUP_ID
                           AND CMSL.MSC_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                           AND mb.plan_id = mbc.plan_id
                           and mb.sr_instance_id = mbc.sr_instance_id
                           and mb.organization_id = mbc.organization_id
                           and mb.bill_sequence_id = mbc.bill_sequence_id
                           and mb.plan_id = -1
                           and mb.sr_instance_id = p_SR_INSTANCE_ID
                           and mb.organization_id = CMSL.ORGANIZATION_ID
                           and mb.assembly_item_id = CMSL.MSC_ITEM_ID
                           and P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE between mbc.effectivity_date and
                               nvl(mbc.disable_date, P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE)
                           AND MBC.INVENTORY_ITEM_ID = CMCR.MSC_COMPONENT_ITEM_ID
                           AND CMSH.STATUS_CODE = 'APPROVED'
                           AND P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE BETWEEN CMSH.EFFECTIVITY_DATE AND
                               NVL(CMSH.DISABLE_DATE, P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE)
                           AND P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE BETWEEN CMSL.EFFECTIVE_DATE AND
                               NVL(CMSL.DISABLE_DATE, P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE)) LOOP
        
          SELECT CUX.CUX_MSC_GROUP_QTY_LINE_S.NEXTVAL INTO LN_CROSS_LINE_ID FROM DUAL;
        
          INSERT INTO CUX.CUX_MSC_GROUP_QTY_LINE
            (HEADER_ID, LINE_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, PER_QTY)
          VALUES
            (LN_CROSS_HEADER_ID,
             LN_CROSS_LINE_ID,
             P_DEMAND_DETAIL.ORGANIZATION_ID,
             LR_LINE.INVENTORY_ITEM_ID,
             LR_LINE.USAGE_QUANTITY);
          FOR LR_DETAIL IN (SELECT MBC.INVENTORY_ITEM_ID, MBC.USAGE_QUANTITY
                              FROM CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR, msc_bom_components mbc, msc_boms mb
                             WHERE 1 = 1
                               AND CMCR.GRP_CLOSS_LEVEL_SUBSTITUTE_ID = LR_LINE.GRP_CLOSS_LEVEL_SUBSTITUTE_ID
                               AND mb.plan_id = mbc.plan_id
                               and mb.sr_instance_id = mbc.sr_instance_id
                               and mb.organization_id = mbc.organization_id
                               and mb.bill_sequence_id = mbc.bill_sequence_id
                               and mb.plan_id = -1
                               and mb.sr_instance_id = p_SR_INSTANCE_ID
                               and mb.organization_id = CMCR.ORGANIZATION_ID
                               and mb.assembly_item_id = CMCR.MSC_COMPONENT_ITEM_ID
                               and /*P_BOM_VER_DATE*/
                                   P_DEMAND_DETAIL
                            .USING_ASSEMBLY_DEMAND_DATE between mbc.effectivity_date and
                                   nvl(mbc.disable_date, P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE)
                               AND MBC.INVENTORY_ITEM_ID = CMCR.MSC_SUB_COMP_ITEM_ID) LOOP
            SELECT CUX.CUX_MSC_GROUP_QTY_DETAIL_S.NEXTVAL INTO LN_CROSS_DETAIL_ID FROM DUAL;
          
            INSERT INTO CUX.CUX_MSC_GROUP_QTY_DETAIL
              (HEADER_ID, LINE_ID, DETAIL_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, PER_QTY, EXTEND_PER_QTY)
            VALUES
              (LN_CROSS_HEADER_ID,
               LN_CROSS_LINE_ID,
               LN_CROSS_DETAIL_ID,
               P_DEMAND_DETAIL.ORGANIZATION_ID,
               LR_DETAIL.INVENTORY_ITEM_ID,
               LR_DETAIL.USAGE_QUANTITY,
               LR_LINE.USAGE_QUANTITY * LR_DETAIL.USAGE_QUANTITY);
          END LOOP;
        END LOOP;
      
      END LOOP;
    
      CALCULATE_GROUP_QTY_PH(P_SR_INSTANCE_ID, LV_ERROR_CODE); --计算成套量
      IF LV_ERROR_CODE = 2 THEN
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
      END IF;
    
      /*      INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER_T 
      SELECT *
      FROM   CUX.CUX_MSC_GROUP_QTY_HEADER;
      
      INSERT INTO CUX.CUX_MSC_GROUP_QTY_LINE_T 
      SELECT *
      FROM   CUX.CUX_MSC_GROUP_QTY_LINE;
      
      INSERT INTO CUX.CUX_MSC_GROUP_QTY_DETAIL_T 
      SELECT *
      FROM   CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
    
      IF GV_LOG_FLAG = 'Y' THEN
        FOR LR_FENPEI IN (SELECT * FROM CUX.CUX_MSC_GROUP_QTY_HEADER) LOOP
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 错阶 003 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_FENPEI.ORGANIZATION_ID, LR_FENPEI.INVENTORY_ITEM_ID));
          SELECT DECODE(LR_FENPEI.ZIRAN_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 错阶 003 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 错阶 004 库存数量齐套数 ' || NVL(LR_FENPEI.LEVEL1_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 错阶 005 在途数量齐套数 ' || NVL(LR_FENPEI.LEVEL2_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 错阶 006 剩余加计划单齐套数 ' || NVL(LR_FENPEI.LEVEL3_QTY, 0));
        END LOOP;
      END IF;
    
      --计算自然替代不能满足部分
      --按照比例分配
      CALCULATE_GROUP_USED_QTY_PH(P_PLAN_ID         => P_PLAN_ID,
                                  p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                  P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                  P_PLAN_QTY        => LN_PLAN_QTY,
                                  P_ALLOT_FLAG      => 'Y',
                                  PO_ERROR_CODE     => LV_ERROR_CODE);
    
      /*INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER_TT 
      SELECT *
      FROM   CUX.CUX_MSC_GROUP_QTY_HEADER;*/
    
      IF LV_ERROR_CODE = 2 THEN
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
      END IF;
    
      DELETE CUX.CUX_MSC_GROUP_QTY_HEADER_BCK;
      --TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER_BCK');
    
      INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER_BCK
        SELECT * FROM CUX.CUX_MSC_GROUP_QTY_HEADER;
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(p_demand_detail.bill_id,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
        --得到此替代料总的可用量
        BEGIN
          SELECT SUM(NVL(CMGQ.USED_QTY, 0)), SUM(NVL(LEVEL1_QTY, 0)), SUM(NVL(LEVEL2_QTY, 0)), SUM(NVL(LEVEL3_QTY, 0))
            INTO LN_SUB_TOTAL_QTY, LN_LEVEL1_QTY, LN_LEVEL2_QTY, LN_LEVEL3_QTY
            FROM CUX.CUX_MSC_GROUP_QTY_HEADER_BCK CMGQ
           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_TOTAL_QTY := 0;
        END;
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 错阶 007 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
          SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 错阶 008 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 错阶 009 分配数量 ' || LN_SUB_TOTAL_QTY);
        
        END IF;
      
        IF LN_SUB_TOTAL_QTY > 0 THEN
        
          BEGIN
            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
              INTO LN_SUB_PREPROCE_LEAD_TIME,
                   LN_SUB_POST_LEAD_TIME,
                   LN_SUB_FULL_LEAD_TIME,
                   LN_SUB_FIXED_LEAD_TIME,
                   LN_SUB_VARIA_LEAD_TIME
              FROM MSC_SYSTEM_ITEMS MSI
             WHERE MSI.plan_id = P_PLAN_ID
               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
               AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SUB_PREPROCE_LEAD_TIME := 0;
              LN_SUB_POST_LEAD_TIME     := 0;
              LN_SUB_FULL_LEAD_TIME     := 0;
              LN_SUB_FIXED_LEAD_TIME    := 0;
              LN_SUB_VARIA_LEAD_TIME    := 0;
          END;
        
          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
          --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
          LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
        
          LN_TOTAL_PLAN_QTY   := LN_SUB_TOTAL_QTY;
          LN_TOTAL_DEMAND_QTY := LN_SUB_TOTAL_QTY;
          IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
            --写入减少原需求供应追溯
            --WRITE NEED
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'Y');
            --写入一条错阶第一层替代料的需求
            BEGIN
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
            
              LT_DEMAND_TEMP                                := NULL;
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
              LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
              LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
              LT_DEMAND_TEMP.ATTRIBUTE2                     := P_DEMAND_DETAIL.ATTRIBUTE2;
              LT_DEMAND_TEMP.ATTRIBUTE3                     := P_DEMAND_DETAIL.ATTRIBUTE3;
              LT_DEMAND_TEMP.ATTRIBUTE4                     := P_DEMAND_DETAIL.ATTRIBUTE4;
              LT_DEMAND_TEMP.ATTRIBUTE5                     := P_DEMAND_DETAIL.ATTRIBUTE5;
              LT_DEMAND_TEMP.ATTRIBUTE6                     := P_DEMAND_DETAIL.ATTRIBUTE6;
              LT_DEMAND_TEMP.ATTRIBUTE7                     := P_DEMAND_DETAIL.ATTRIBUTE7;
              LT_DEMAND_TEMP.ATTRIBUTE8                     := P_DEMAND_DETAIL.ATTRIBUTE8;
              LT_DEMAND_TEMP.ATTRIBUTE9                     := P_DEMAND_DETAIL.ATTRIBUTE9;
              LT_DEMAND_TEMP.ATTRIBUTE10                    := P_DEMAND_DETAIL.ATTRIBUTE10;
              LT_DEMAND_TEMP.ATTRIBUTE11                    := P_DEMAND_DETAIL.ATTRIBUTE11;
              LT_DEMAND_TEMP.ATTRIBUTE12                    := P_DEMAND_DETAIL.ATTRIBUTE12;
              LT_DEMAND_TEMP.ATTRIBUTE13                    := P_DEMAND_DETAIL.ATTRIBUTE13;
              LT_DEMAND_TEMP.ATTRIBUTE14                    := P_DEMAND_DETAIL.ATTRIBUTE14;
              LT_DEMAND_TEMP.ATTRIBUTE15                    := P_DEMAND_DETAIL.ATTRIBUTE15;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := P_DEMAND_DETAIL.COMP_SEQ_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MD',
                    '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
              
            END;
          
          ELSE
          
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'N');
            LN_DEMAND_ID := P_DEMAND_DETAIL.DEMAND_ID;
          END IF;
        
          --写入错阶第一层替代料供应数据
          BEGIN
            SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
            LV_SUPPLIES_TEMP                   := NULL;
            LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
            LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
            LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
            LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
          
            LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME); --重新计算
            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME);
            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME -
                                                                         LN_SUB_PREPROCE_LEAD_TIME);
          
            LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
            LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
            LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
            LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
            LV_SUPPLIES_TEMP.UPDATED                 := 2;
            LV_SUPPLIES_TEMP.STATUS                  := 0;
            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
            LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
            LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
            LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
            LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
          
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***ERROR*** INSERT PCBA SUPPLIES 037 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            
              LV_ERROR_CODE := 2;
              RAISE LE_EXCEPTION;
            
          END;
        
          --写入错阶第一层替代料PEGGING数据
          BEGIN
            SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
          
            LT_PEGGING_TEMP                        := NULL;
            LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
            LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
            LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
            LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
            LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
            LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
            LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
            LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
            LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
            LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
            LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
            LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
            LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
            LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
            LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
            LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
            LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
            LT_PEGGING_TEMP.UPDATED                := 0;
            LT_PEGGING_TEMP.STATUS                 := 2;
            LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
            LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
            LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
            LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
            LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
            LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
            LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
            INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
          
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MFP',
                  '***ERROR*** INSERT PCBA PEGGINGS 038 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            
              LV_ERROR_CODE := 2;
              RAISE LE_EXCEPTION;
            
          END;
        
          LN_PREVIOUS_PEGGING_ID := LN_PEGGING_ID;
          LD_LEVEL1_US_COMP_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE - LN_SUB_POST_LEAD_TIME -
                                                    LN_SUB_FULL_LEAD_TIME);
          FOR LR_BOM IN LC_BOM(P_PLAN_ID,
                               p_SR_INSTANCE_ID,
                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
                               P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE) LOOP
            LN_PLAN_QTY_2 := LN_TOTAL_PLAN_QTY * LR_BOM.USAGE_QUANTITY;
            BEGIN
              SELECT 'Y',
                     NVL((SELECT 'Y'
                           FROM CUX.CUX_MSC_GROUP_QTY_DETAIL CMGD
                          WHERE CMGD.HEADER_ID = CMGH.HEADER_ID
                            AND CMGD.LINE_ID = CMGL.LINE_ID
                            AND ROWNUM = 1),
                         'N')
                INTO LV_PRIORITY_FLAG, LV_NEXT_LEVEL_FLAG
                FROM CUX.CUX_MSC_GROUP_QTY_HEADER_BCK CMGH, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
               WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                 AND CMGH.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                 AND CMGL.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                LV_PRIORITY_FLAG   := 'N';
                LV_NEXT_LEVEL_FLAG := 'N';
            END;
            --计算第二层每个物料的分配数量
            IF LV_PRIORITY_FLAG = 'Y' THEN
              LN_COMPONENT_SEQUENCE_ID := NULL;
            ELSE
              LN_COMPONENT_SEQUENCE_ID := LR_BOM.COMPONENT_SEQUENCE_ID;
            END IF;
          
            DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
            --TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
            FOR LR_ZR_SUB_1 IN LC_ZR_SUB_1(LR_BOM.bill_sequence_id,
                                           LN_COMPONENT_SEQUENCE_ID,
                                           LR_BOM.INVENTORY_ITEM_ID,
                                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                                           LR_BOM.USAGE_QUANTITY) LOOP
            
              SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
            
              INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
                (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
              VALUES
                (LN_CROSS_HEADER_ID,
                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                 LR_ZR_SUB_1.SUBSTITUTE_ITEM_ID,
                 LR_ZR_SUB_1.ZR_SUB_FLAG);
            END LOOP;
            CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
            --计算自然替代跟普通替代 主料成套量不能满足部分
            --按照比例分配
            CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                                     p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                     P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                     P_PLAN_QTY        => LN_PLAN_QTY_2,
                                     P_ALLOT_FLAG      => 'Y',
                                     PO_ERROR_CODE     => LV_ERROR_CODE);
            IF LV_ERROR_CODE = 2 THEN
              RAISE LE_EXCEPTION;
            END IF;
          
            FOR LR_ZR_SUB_2 IN LC_ZR_SUB_1(LR_BOM.bill_sequence_id,
                                           LN_COMPONENT_SEQUENCE_ID,
                                           LR_BOM.INVENTORY_ITEM_ID,
                                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                                           LR_BOM.USAGE_QUANTITY) LOOP
            
              --得到此替代料总的可用量
              BEGIN
                SELECT SUM(NVL(CMGQ.USED_QTY, 0))
                  INTO LN_SUB_TOTAL_QTY_2
                  FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                 WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_SUB_TOTAL_QTY_2 := 0;
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** 10012 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID || ' 出现错误: ' ||
                      CHR(10) || SQLERRM);
              END;
              IF LN_SUB_TOTAL_QTY_2 > 0 THEN
                BEGIN
                  SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                         MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                         MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                         MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                         MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                         MSI.PLANNING_MAKE_BUY_CODE,
                         MSI.ATTRIBUTE1,
                         MSI.ITEM_NAME,
                         MSI.LOW_LEVEL_CODE
                    INTO LN_SUB_PREPROCE_LEAD_TIME,
                         LN_SUB_POST_LEAD_TIME,
                         LN_SUB_FULL_LEAD_TIME,
                         LN_SUB_FIXED_LEAD_TIME,
                         LN_SUB_VARIA_LEAD_TIME,
                         LN_MAKE_BUY_CODE,
                         LV_ITEM_TYPE,
                         LV_ITEM_NAME,
                         LN_LOW_LEVEL_CODE
                    FROM MSC_SYSTEM_ITEMS MSI
                   WHERE MSI.plan_id = P_PLAN_ID
                     AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                     AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
                     AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    LN_SUB_PREPROCE_LEAD_TIME := 0;
                    LN_SUB_POST_LEAD_TIME     := 0;
                    LN_SUB_FULL_LEAD_TIME     := 0;
                    LN_SUB_FIXED_LEAD_TIME    := 0;
                    LN_SUB_VARIA_LEAD_TIME    := 0;
                END;
              
                LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
                LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
                --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
                LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
              
                --写入一条错阶第二层替代料的需求
                BEGIN
                  SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
                
                  LT_DEMAND_TEMP                                := NULL;
                  LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
                  LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                  LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
                  LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_SUB_TOTAL_QTY_2;
                  LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := LD_LEVEL1_US_COMP_DATE;
                  LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := LD_LEVEL1_US_COMP_DATE;
                  LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                  LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                  LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
                  LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
                  LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
                  LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
                  LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
                  LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
                  LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
                  LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
                  LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                  LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
                  LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
                  LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
                  LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
                  LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
                  LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
                  LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
                  LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
                  LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
                  LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
                  LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
                  LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
                  LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
                  LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
                  LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
                  LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
                  LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
                  LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
                  LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
                  LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
                  LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
                  LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
                  LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
                  LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --替代料标记 1替代料 2 主料
                  LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
                  LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
                  LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                  LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                  LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                  LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                  LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                  LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
                  LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
                  LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
                  LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
                  LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
                  LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
                  LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
                  LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
                  LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
                  LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
                  LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
                  LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
                  LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
                  LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
                  LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
                  LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
                  LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
                  LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
                  LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
                  LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
                  LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
                  LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
                  LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
                  LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
                  LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
                  LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
                  LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
                  LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
                  LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
                  LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
                  LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
                  LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
                  LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_BOM.COMPONENT_SEQUENCE_ID;
                  LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
                  LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
                  LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
                  LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
                  LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
                  LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
                  LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
                  LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
                  LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
                  LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
                  LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
                  LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
                  LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
                  LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
                  LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
                  LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
                  LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
                  LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
                  LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
                  LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
                  LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
                  LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
                  LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
                  LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
                  LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
                  LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
                  LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
                  LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
                  LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
                  LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
                  LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
                  LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
                  LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
                  LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
                  LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
                  LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
                  LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
                  LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
                  LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
                  LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
                  LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
                  LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
                  LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
                  LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
                  LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
                  LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
                  LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
                  LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
                  LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
                  LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
                  LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
                  LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
                  LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
                  LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
                  LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
                  LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
                  LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
                  LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
                  LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
                  LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
                  LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
                  LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
                  LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
                  LT_DEMAND_TEMP.ATTRIBUTE1                     := 'Y';
                  LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                  INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MD',
                        '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
                --计算各个采购件及其替代料用量，若采购件在错阶明细中维护，则只计算主料
                LN_PLAN_QTY := LN_SUB_TOTAL_QTY_2;
                --冲减现有量
                FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                 LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
                    LN_USED_QTY := LN_PLAN_QTY;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                  
                    LN_PLAN_QTY := 0;
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                  
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                  END IF;
                
                  --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                    
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                      LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                      LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                      LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                      LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                      LV_SUPPLIES_TEMP.UPDATED                 := 2;
                      LV_SUPPLIES_TEMP.STATUS                  := 0;
                      LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                    
                  END;
                
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                END LOOP;
              
                --若现有量不能满足需求则用工单的产出去满足需求
                IF LN_PLAN_QTY > 0 THEN
                  --冲减对应的工单，按照工单的开工日期，工单ID排序
                  FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID,
                                                   P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                   LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                    
                      LN_USED_QTY := LN_PLAN_QTY;
                      LN_PLAN_QTY := 0;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                      LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_DJ.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                    END IF;
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    --写入供应数据
                    LV_INSERT_SUPPLY_FLAG := 'N';
                    IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                      LV_INSERT_SUPPLY_FLAG := 'Y';
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                    
                      --写入WIP处理表
                      SELECT LD_LEVEL1_US_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                        INTO LD_USING_ASSY_D_DATE
                        FROM DUAL;
                      BEGIN
                        INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                        VALUES
                          (LR_SUPPLY_DJ.ROW_ID,
                           LR_SUPPLY_DJ.DISPOSITION_ID,
                           LN_TRANSACTION_ID,
                           GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                      END;
                    
                      --写入WIP优先处理表
                      BEGIN
                        INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                          (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                          SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                             AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                      END;
                    
                      --更新工作单需求的ISSUED_QTY
                      LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                    
                      --更新实际ISSUED数量
                      BEGIN
                        UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                           SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                         where 1 = 1
                           AND CMD.plan_id = -1
                           AND CMD.ORIGINATION_TYPE IN (2, 3)
                           and CMD.sr_instance_id = p_SR_INSTANCE_ID
                           AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                              TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                      END;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                      --删除MPS与非标准工单提前写入写入部分
                      IF LR_SUPPLY_DJ.order_type = 7 THEN
                      
                        BEGIN
                          SELECT 'N', MFP.PEGGING_ID
                            INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                            FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                           WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                             AND MFP.PLAN_ID = P_PLAN_ID
                             AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                             AND MFP.DEMAND_ID = -1;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            LV_WIP_PROCESS_FLAG := 'Y';
                        END;
                      
                        BEGIN
                          SELECT 'Y'
                            INTO LV_ONLY_PEGGING_FLAG
                            FROM CUX.CUX_MSC_RDJ_DELETE_T
                           WHERE WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID
                             AND ROWNUM = 1;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            LV_ONLY_PEGGING_FLAG := 'N';
                        END;
                      
                        IF LV_ONLY_PEGGING_FLAG = 'Y' THEN
                          UPDATE CUX.CUX_MSC_RDJ_DELETE_T
                             SET DELETE_FLAG = 'Y'
                           WHERE WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                        END IF;
                      
                        IF LV_WIP_PROCESS_FLAG = 'N' THEN
                        
                          p_change_pegging(p_plan_id        => P_PLAN_ID,
                                           p_sr_instance_id => P_SR_INSTANCE_ID,
                                           p_pegging_id     => LN_RDJ_PEGGING_ID,
                                           p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                           p_flag           => 'N');
                        
                          LV_INSERT_SUPPLY_FLAG := 'Y';
                        
                          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        
                          UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                             SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                           WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                        
                          --写入WIP处理表
                          SELECT LD_LEVEL1_US_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                            INTO LD_USING_ASSY_D_DATE
                            FROM DUAL;
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                            VALUES
                              (LR_SUPPLY_DJ.ROW_ID,
                               LR_SUPPLY_DJ.DISPOSITION_ID,
                               LN_TRANSACTION_ID,
                               GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --写入WIP优先处理表
                          BEGIN
                            INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                              (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                              SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                               WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                 AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                          --更新工作单需求的ISSUED_QTY
                          LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                          BEGIN
                            UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                               SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                             where 1 = 1
                               AND CMD.plan_id = -1
                               AND CMD.ORIGINATION_TYPE IN (2, 3)
                               and CMD.sr_instance_id = p_SR_INSTANCE_ID
                               AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MS',
                                  '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                  TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                          END;
                        
                        END IF;
                      
                      END IF;
                    
                    END IF;
                  
                    IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                      BEGIN
                        LV_SUPPLIES_TEMP                           := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID                   := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID           := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
                        LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                        LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                      LN_SUB_POST_LEAD_TIME -
                                                                                      LN_SUB_FULL_LEAD_TIME -
                                                                                      LN_SUB_PREPROCE_LEAD_TIME);
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                        LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                        LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                        LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                        LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                        LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                        LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                        LV_SUPPLIES_TEMP.UPDATED                   := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                        LV_SUPPLIES_TEMP.STATUS                    := 0;
                        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                        LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                        LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                        LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                        LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                        LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                    END IF;
                  
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    BEGIN
                      SELECT CMW.SUPPLY_DATE
                        INTO LD_USING_ASSY_D_DATE
                        FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                       WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                    EXCEPTION
                      WHEN NO_DATA_FOUND THEN
                        LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
                    END;
                  
                    --Added below by V1.018
                    IF LR_SUPPLY_DJ.order_type = 7 THEN
                      LV_BOM_FLAG := 'N';
                    ELSE
                      LV_BOM_FLAG := 'Y';
                    END IF;
                    --Added above by V1.018
                  
                    --写入工作单需求及工作单，优先耗用相关的PCB
                    INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                       P_PLAN_ID               => P_PLAN_ID,
                                       P_ORGANIZATION_ID       => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                       P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                       P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                       P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                       P_END_PEGGING_ID        => P_DEMAND_DETAIL.END_PEGGING_ID,
                                       P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                       P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                       P_END_ORIGINATION_TYPE  => P_DEMAND_DETAIL.END_ORIGINATION_TYPE,
                                       P_LEVEL_FLAG            => 1,
                                       P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                       P_ONLY_PEGGING_FLAG     => LV_ONLY_PEGGING_FLAG,
                                       P_PRIOR_FLAG            => 'Y',
                                       P_ORGI_USAGE            => LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                       P_PLAN_QTY              => LN_USED_QTY,
                                       P_D_COUNT               => LN_D_COUNT,
                                       P_S_COUNT               => LN_S_COUNT,
                                       P_P_COUNT               => LN_P_COUNT);
                    IF LN_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                --若工单的产出不能满足需求则用工单的副需求去满足
                IF LN_PLAN_QTY > 0 THEN
                  --冲减对应的工单，按照工单的开工日期，工单ID排序
                  FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                      LN_USED_QTY := LN_PLAN_QTY;
                      LN_PLAN_QTY := 0;
                    
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                      LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    END IF;
                  
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                    
                    END IF;
                  
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                  
                    IF LN_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                --用在途部分去满足
                IF LN_PLAN_QTY > 0 THEN
                  FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
                    
                      LN_USED_QTY := LN_PLAN_QTY;
                      LN_PLAN_QTY := 0;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                      LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    END IF;
                  
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                    
                    END IF;
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                    IF LN_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                --用PO部分去满足
                IF LN_PLAN_QTY > 0 THEN
                  FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID,
                                                   P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                   LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
                    
                      LN_USED_QTY := LN_PLAN_QTY;
                      LN_PLAN_QTY := 0;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                      LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                    END IF;
                  
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                        LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                        LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                        LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                    
                    END IF;
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                    IF LN_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                --用PR部分去满足
                IF LN_PLAN_QTY > 0 AND LR_ZR_SUB.ZR_SUB_FLAG != 'Y' THEN
                  FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID,
                                                   P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                   LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID) LOOP
                    LN_USED_QTY := 0;
                    IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
                    
                      LN_USED_QTY := LN_PLAN_QTY;
                      LN_PLAN_QTY := 0;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                       WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                    
                    ELSE
                    
                      LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                      LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                      --更新供应的结余数量
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.REMAIN_QTY = 0
                       WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                    END IF;
                  
                    IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                      --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                        LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                        LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                        LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                        LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                        LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                        LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                        LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                        LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                        LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                        LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                        LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                        LV_SUPPLIES_TEMP.UPDATED                  := 2;
                        LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                        LV_SUPPLIES_TEMP.STATUS                   := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                        LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                         SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                       WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                    
                    ELSE
                      LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                    
                    END IF;
                    --写入PEGGING数据
                    BEGIN
                      SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                    
                      LT_PEGGING_TEMP                        := NULL;
                      LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                      LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                      LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                      LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                      LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                      LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                      LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                      LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                      LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                      LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                      LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                      LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                      LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                      LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                      LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                      LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                      LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                      LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                      LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                      LT_PEGGING_TEMP.UPDATED                := 0;
                      LT_PEGGING_TEMP.STATUS                 := 2;
                      LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                      LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                      LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                      LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                      LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                      LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                      LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                      LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MFP',
                            '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                      
                    END;
                    IF LN_PLAN_QTY <= 0 THEN
                      EXIT;
                    END IF;
                  
                  END LOOP;
                END IF;
              
                IF LN_PLAN_QTY > 0 THEN
                  IF LV_NEXT_LEVEL_FLAG = 'N' THEN
                    --最后仍不能满足 用计划单去满足
                    --需要加入供应商资料
                    FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                             CMAB.MSC_VENDOR_ID,
                                             CMAB.MSC_VENDOR_SITE_ID,
                                             CMAB.CURRENT_ALLOCATION_QTY
                                        FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                       WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                         AND CMAB.CURRENT_ALLOCATION_QTY > 0
                                         AND CMBR.INVENTORY_ITEM_ID = LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID
                                      UNION ALL
                                      SELECT LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                        FROM DUAL
                                       WHERE 1 = 1
                                            --AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                         AND NOT EXISTS (SELECT 1
                                                FROM CUX.CUX_MSC_BID_ITEM_RANGE        CMBR,
                                                     CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                               WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                                 AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
                    
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                        LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                        LV_SUPPLIES_TEMP.UPDATED                 := 2;
                        LV_SUPPLIES_TEMP.STATUS                  := 0;
                        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT WIP SUPPLIES 016 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PEGGING数据
                      BEGIN
                        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                      
                        LT_PEGGING_TEMP                        := NULL;
                        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                        LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                        LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                        LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                        LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                        LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                        LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                        LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                        LT_PEGGING_TEMP.UPDATED                := 0;
                        LT_PEGGING_TEMP.STATUS                 := 2;
                        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MFP',
                              '***ERROR*** INSERT WIP PEGGINGS 017 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    END LOOP;
                  
                  ELSE
                    --其余部分写入计划单供应
                    IF LN_PLAN_QTY > 0 THEN
                      --写入供应数据
                      BEGIN
                        SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                        LV_SUPPLIES_TEMP                   := NULL;
                        LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                        LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                        LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                      
                        LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME); --重新计算
                        LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME);
                        LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                     LN_SUB_POST_LEAD_TIME -
                                                                                     LN_SUB_FULL_LEAD_TIME -
                                                                                     LN_SUB_PREPROCE_LEAD_TIME);
                      
                        LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
                        LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                        LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                        LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                        LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                        LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_PLAN_QTY;
                        LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_PLAN_QTY;
                        LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                        LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                        LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                        LV_SUPPLIES_TEMP.UPDATED                 := 2;
                        LV_SUPPLIES_TEMP.STATUS                  := 0;
                        LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                        LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                        LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                        LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                        LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                        LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                        LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                        LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                        INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MS',
                              '***ERROR*** INSERT PCBA SUPPLIES 037 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                      --写入PEGGING数据
                      BEGIN
                        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                      
                        LT_PEGGING_TEMP                        := NULL;
                        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                        LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_PLAN_QTY;
                        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_PLAN_QTY;
                        LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                        LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                        LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                        LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID;
                        LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                        LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                        LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                        LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                        LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                        LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                        LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                        LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                        LT_PEGGING_TEMP.UPDATED                := 0;
                        LT_PEGGING_TEMP.STATUS                 := 2;
                        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                      
                      EXCEPTION
                        WHEN OTHERS THEN
                          LOG(FND_GLOBAL.CONC_REQUEST_ID,
                              'INSERT_PLAN_MFP',
                              '***ERROR*** INSERT PCBA PEGGINGS 038 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                              ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        
                          LV_ERROR_CODE := 2;
                          RAISE LE_EXCEPTION;
                        
                      END;
                    
                    END IF;
                  
                  END IF;
                  LN_SECOND_PEGGING_ID := LN_PEGGING_ID;
                  LN_SECOND_PLAN_QTY   := LN_PLAN_QTY;
                
                  IF LV_NEXT_LEVEL_FLAG = 'Y' THEN
                    LD_LEVEL2_US_COMP_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE - LN_SUB_POST_LEAD_TIME -
                                                              LN_SUB_FULL_LEAD_TIME);
                  
                    --FND_FILE.PUT_LINE(FND_FILE.LOG, P_MESSAGE);
                    FOR LR_SECOND_BOM IN LC_SECOND_BOM(P_PLAN_ID,
                                                       p_SR_INSTANCE_ID,
                                                       P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                       LR_ZR_SUB_2.SUBSTITUTE_ITEM_ID,
                                                       P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE) LOOP
                    
                      LN_PLAN_QTY_3 := LN_SECOND_PLAN_QTY * LR_SECOND_BOM.USAGE_QUANTITY;
                      BEGIN
                        SELECT 'Y'
                          INTO LV_PRIORITY_FLAG
                          FROM CUX.CUX_MSC_GROUP_QTY_HEADER_BCK CMGH,
                               CUX.CUX_MSC_GROUP_QTY_LINE       CMGL,
                               CUX.CUX_MSC_GROUP_QTY_DETAIL     CMGD
                         WHERE CMGH.HEADER_ID = CMGL.HEADER_ID
                           AND CMGH.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                           AND CMGL.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID
                           AND CMGL.LINE_ID = CMGD.LINE_ID
                           AND CMGD.INVENTORY_ITEM_ID = LR_SECOND_BOM.INVENTORY_ITEM_ID;
                      EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                          LV_PRIORITY_FLAG := 'N';
                      END;
                      --计算第二层每个物料的分配数量
                      IF LV_PRIORITY_FLAG = 'Y' THEN
                        LN_COMPONENT_SEQUENCE_ID := NULL;
                      ELSE
                        LN_COMPONENT_SEQUENCE_ID := LR_SECOND_BOM.COMPONENT_SEQUENCE_ID;
                      END IF;
                    
                      DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
                      --TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
                      FOR LR_ZR_SUB_3 IN LC_ZR_SUB_2(lR_SECOND_BOM.BILL_SEQUENCE_ID,
                                                     LN_COMPONENT_SEQUENCE_ID,
                                                     LR_SECOND_BOM.INVENTORY_ITEM_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     LR_SECOND_BOM.USAGE_QUANTITY) LOOP
                      
                        SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
                      
                        INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
                          (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
                        VALUES
                          (LN_CROSS_HEADER_ID,
                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                           LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID,
                           LR_ZR_SUB_3.ZR_SUB_FLAG);
                      END LOOP;
                      CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
                      --计算自然替代跟普通替代 主料成套量不能满足部分
                      --按照比例分配
                      CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                                               p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                               P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               P_PLAN_QTY        => LN_PLAN_QTY_3,
                                               P_ALLOT_FLAG      => 'Y',
                                               PO_ERROR_CODE     => LV_ERROR_CODE);
                      IF LV_ERROR_CODE = 2 THEN
                        RAISE LE_EXCEPTION;
                      END IF;
                    
                      FOR LR_ZR_SUB_3 IN LC_ZR_SUB_2(LR_SECOND_BOM.BILL_SEQUENCE_ID,
                                                     LN_COMPONENT_SEQUENCE_ID,
                                                     LR_SECOND_BOM.INVENTORY_ITEM_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     LR_SECOND_BOM.USAGE_QUANTITY) LOOP
                      
                        --得到此替代料总的可用量
                        BEGIN
                          SELECT SUM(NVL(CMGQ.USED_QTY, 0))
                            INTO LN_SUB_TOTAL_QTY
                            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
                           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                        EXCEPTION
                          WHEN NO_DATA_FOUND THEN
                            LN_SUB_TOTAL_QTY := 0;
                          WHEN OTHERS THEN
                            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                'INSERT_PLAN_MS',
                                '***ERROR*** 10012 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID ||
                                ' 出现错误: ' || CHR(10) || SQLERRM);
                        END;
                        IF LN_SUB_TOTAL_QTY > 0 THEN
                          BEGIN
                            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
                                   MSI.PLANNING_MAKE_BUY_CODE,
                                   MSI.ATTRIBUTE1,
                                   MSI.ITEM_NAME,
                                   MSI.LOW_LEVEL_CODE
                              INTO LN_SUB_PREPROCE_LEAD_TIME,
                                   LN_SUB_POST_LEAD_TIME,
                                   LN_SUB_FULL_LEAD_TIME,
                                   LN_SUB_FIXED_LEAD_TIME,
                                   LN_SUB_VARIA_LEAD_TIME,
                                   LN_MAKE_BUY_CODE,
                                   LV_ITEM_TYPE,
                                   LV_ITEM_NAME,
                                   LN_LOW_LEVEL_CODE
                              FROM MSC_SYSTEM_ITEMS MSI
                             WHERE MSI.plan_id = P_PLAN_ID
                               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                               AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
                               AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                          EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                              LN_SUB_PREPROCE_LEAD_TIME := 0;
                              LN_SUB_POST_LEAD_TIME     := 0;
                              LN_SUB_FULL_LEAD_TIME     := 0;
                              LN_SUB_FIXED_LEAD_TIME    := 0;
                              LN_SUB_VARIA_LEAD_TIME    := 0;
                          END;
                        
                          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
                          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
                          --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
                          LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                          LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
                          LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
                        
                          --写入一条错阶第三层物料料的需求
                          BEGIN
                            SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
                          
                            LT_DEMAND_TEMP                                := NULL;
                            LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
                            LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
                            LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                            LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
                            LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_SUB_TOTAL_QTY;
                            LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                            LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                            LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                            LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
                            LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
                            LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
                            LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
                            LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
                            LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
                            LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
                            LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
                            LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
                            LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
                            LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
                            LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                            LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
                            LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
                            LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
                            LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
                            LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                            LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
                            LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
                            LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
                            LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
                            LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
                            LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
                            LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
                            LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
                            LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
                            LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
                            LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
                            LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
                            LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
                            LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
                            LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
                            LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
                            LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
                            LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
                            LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
                            LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --替代料标记 1替代料 2 主料
                            LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
                            LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
                            LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                            LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                            LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                            LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                            LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                            LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                            LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                            LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                            LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                            LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
                            LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
                            LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
                            LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
                            LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
                            LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
                            LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
                            LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
                            LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
                            LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
                            LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
                            LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
                            LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
                            LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
                            LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
                            LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
                            LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
                            LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
                            LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
                            LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
                            LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
                            LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
                            LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
                            LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
                            LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
                            LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
                            LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
                            LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
                            LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
                            LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
                            LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
                            LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
                            LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
                            LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
                            LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
                            LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_SECOND_BOM.COMPONENT_SEQUENCE_ID;
                            LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
                            LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
                            LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
                            LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
                            LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
                            LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
                            LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
                            LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
                            LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
                            LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
                            LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
                            LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
                            LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
                            LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
                            LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
                            LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
                            LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
                            LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
                            LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
                            LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
                            LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
                            LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
                            LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
                            LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
                            LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
                            LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
                            LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
                            LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
                            LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
                            LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
                            LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
                            LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
                            LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
                            LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
                            LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
                            LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
                            LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
                            LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
                            LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
                            LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
                            LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
                            LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
                            LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
                            LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
                            LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
                            LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
                            LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
                            LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
                            LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
                            LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
                            LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
                            LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
                            LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
                            LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
                            LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
                            LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
                            LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
                            LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
                            LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
                            LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
                            LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
                            LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
                            LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
                            LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
                            LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
                            LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
                            LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
                            LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
                            LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
                            LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
                            LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
                            LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
                            LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
                            LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
                            LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
                            LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
                            LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
                            LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
                            LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
                            LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
                            LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
                            LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
                            LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
                            LT_DEMAND_TEMP.ATTRIBUTE1                     := 'Y';
                            LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                            INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                          
                          EXCEPTION
                            WHEN OTHERS THEN
                              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                  'INSERT_PLAN_MD',
                                  '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                  ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                            
                              LV_ERROR_CODE := 2;
                              RAISE LE_EXCEPTION;
                            
                          END;
                          LN_PLAN_QTY := LN_SUB_TOTAL_QTY;
                          --冲减现有量
                          FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                           LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                            LN_USED_QTY := 0;
                            IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
                              LN_USED_QTY := LN_PLAN_QTY;
                            
                              --更新供应的结余数量
                              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                 SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                            
                              LN_PLAN_QTY := 0;
                            ELSE
                            
                              LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                            
                              --更新供应的结余数量
                              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                 SET CMS.REMAIN_QTY = 0
                               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                            
                              LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                            END IF;
                          
                            -- LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                            --                      LN_USED_QTY;
                            IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                              --写入供应数据
                              BEGIN
                                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                              
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                              
                                LV_SUPPLIES_TEMP                   := NULL;
                                LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                              
                                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME -
                                                                                             LN_SUB_FULL_LEAD_TIME);
                                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME -
                                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                                             LN_SUB_PREPROCE_LEAD_TIME);
                              
                                LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                                LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                                LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                                LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                                LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                                LV_SUPPLIES_TEMP.STATUS                  := 0;
                                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT PCBA SUPPLIES 033 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                            
                            ELSE
                              LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                            
                            END IF;
                            --写入PEGGING数据
                            BEGIN
                              SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                            
                              LT_PEGGING_TEMP                        := NULL;
                              LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                              LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                              LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                              LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                              LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                              LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                              LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                              LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                              LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                              LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                              LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                              LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                              LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                              LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                              LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                              LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                              LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                              LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                              LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                              LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                              LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                              LT_PEGGING_TEMP.UPDATED                := 0;
                              LT_PEGGING_TEMP.STATUS                 := 2;
                              LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                              LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                              LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                              LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                              LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                              LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                              LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                              LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                              LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                              INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                            
                            EXCEPTION
                              WHEN OTHERS THEN
                                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                    'INSERT_PLAN_MFP',
                                    '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                                    ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                              
                                LV_ERROR_CODE := 2;
                                RAISE LE_EXCEPTION;
                              
                            END;
                          
                            IF LN_PLAN_QTY <= 0 THEN
                              EXIT;
                            END IF;
                          END LOOP;
                        
                          --若现有量不能满足需求则用工单的产出去满足需求
                          IF LN_PLAN_QTY > 0 THEN
                            --冲减对应的工单，按照工单的开工日期，工单ID排序
                            FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID,
                                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                             LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                              LN_USED_QTY := 0;
                              IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                              
                                LN_USED_QTY := LN_PLAN_QTY;
                                LN_PLAN_QTY := 0;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                                 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                              
                              ELSE
                              
                                LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_DJ.REMAIN_QTY;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = 0
                                 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                              END IF;
                              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                              --                    LN_USED_QTY;
                              --写入供应数据
                              LV_INSERT_SUPPLY_FLAG := 'N';
                              IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                                LV_INSERT_SUPPLY_FLAG := 'Y';
                                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                              
                                --写入WIP处理表
                                SELECT LD_LEVEL2_US_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                                  INTO LD_USING_ASSY_D_DATE
                                  FROM DUAL;
                                BEGIN
                                  INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                                  VALUES
                                    (LR_SUPPLY_DJ.ROW_ID,
                                     LR_SUPPLY_DJ.DISPOSITION_ID,
                                     LN_TRANSACTION_ID,
                                     GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) || SQLERRM);
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                END;
                              
                                --写入WIP优先处理表
                                BEGIN
                                  INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                                    (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                                    SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                      FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                     WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                       AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                END;
                              
                                --更新工作单需求的ISSUED_QTY
                                LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) +
                                                    NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                              
                                --更新实际ISSUED数量
                                BEGIN
                                  UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                                     SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY -
                                                          LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                                   where 1 = 1
                                     AND CMD.plan_id = -1
                                     AND CMD.ORIGINATION_TYPE IN (2, 3)
                                     and CMD.sr_instance_id = p_SR_INSTANCE_ID
                                     AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                END;
                              
                              ELSE
                                LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                                --删除MPS与非标准工单提前写入写入部分
                                IF LR_SUPPLY_DJ.order_type = 7 THEN
                                
                                  BEGIN
                                    SELECT 'N', MFP.PEGGING_ID
                                      INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                                      FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                                     WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                                       AND MFP.PLAN_ID = P_PLAN_ID
                                       AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                                       AND MFP.DEMAND_ID = -1;
                                  EXCEPTION
                                    WHEN NO_DATA_FOUND THEN
                                      LV_WIP_PROCESS_FLAG := 'Y';
                                  END;
                                
                                  IF LV_WIP_PROCESS_FLAG = 'N' THEN
                                  
                                    p_change_pegging(p_plan_id        => P_PLAN_ID,
                                                     p_sr_instance_id => P_SR_INSTANCE_ID,
                                                     p_pegging_id     => LN_RDJ_PEGGING_ID,
                                                     p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                                     p_flag           => 'N');
                                  
                                    LV_INSERT_SUPPLY_FLAG := 'Y';
                                  
                                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                  
                                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                     WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                                  
                                    --写入WIP处理表
                                    SELECT LD_LEVEL2_US_COMP_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                                      INTO LD_USING_ASSY_D_DATE
                                      FROM DUAL;
                                    BEGIN
                                      INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                                      VALUES
                                        (LR_SUPPLY_DJ.ROW_ID,
                                         LR_SUPPLY_DJ.DISPOSITION_ID,
                                         LN_TRANSACTION_ID,
                                         GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                                    EXCEPTION
                                      WHEN OTHERS THEN
                                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                            'INSERT_PLAN_MS',
                                            '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                        LV_ERROR_CODE := 2;
                                        RAISE LE_EXCEPTION;
                                    END;
                                  
                                    --写入WIP优先处理表
                                    BEGIN
                                      INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                                        (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                                        SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                                          FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                                         WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                           AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                                    EXCEPTION
                                      WHEN OTHERS THEN
                                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                            'INSERT_PLAN_MS',
                                            '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                        LV_ERROR_CODE := 2;
                                        RAISE LE_EXCEPTION;
                                    END;
                                  
                                    --更新工作单需求的ISSUED_QTY
                                    LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) +
                                                        NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                                    BEGIN
                                      UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                                         SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY -
                                                              LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                                       where 1 = 1
                                         AND CMD.plan_id = -1
                                         AND CMD.ORIGINATION_TYPE IN (2, 3)
                                         and CMD.sr_instance_id = p_SR_INSTANCE_ID
                                         AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                                    EXCEPTION
                                      WHEN OTHERS THEN
                                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                            'INSERT_PLAN_MS',
                                            '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' ||
                                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                        LV_ERROR_CODE := 2;
                                        RAISE LE_EXCEPTION;
                                    END;
                                  
                                  END IF;
                                
                                END IF;
                              
                              END IF;
                            
                              IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                                BEGIN
                                  LV_SUPPLIES_TEMP                           := NULL;
                                  LV_SUPPLIES_TEMP.PLAN_ID                   := P_DEMAND_DETAIL.PLAN_ID;
                                  LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                                  LV_SUPPLIES_TEMP.ORGANIZATION_ID           := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
                                  LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                                  LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                                  LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                                LN_SUB_POST_LEAD_TIME); --重新计算
                                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                                LN_SUB_FULL_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                                LN_SUB_FULL_LEAD_TIME -
                                                                                                LN_SUB_PREPROCE_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                                  LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                                  LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                                  LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                                  LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                                  LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                                  LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                                  LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                                  LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                                  LV_SUPPLIES_TEMP.UPDATED                   := 2;
                                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                                  LV_SUPPLIES_TEMP.STATUS                    := 0;
                                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                                  LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                                  LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                                  LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                                  LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                                  LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                                  LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                                  LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                                
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT PCBA SUPPLIES 035 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                  
                                END;
                              
                              END IF;
                            
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT PCBA PEGGINGS 036 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                              BEGIN
                                SELECT CMW.SUPPLY_DATE
                                  INTO LD_USING_ASSY_D_DATE
                                  FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                                 WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                              EXCEPTION
                                WHEN NO_DATA_FOUND THEN
                                  LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
                              END;
                            
                              --Added below by V1.018
                              IF LR_SUPPLY_DJ.order_type = 7 THEN
                                LV_BOM_FLAG := 'N';
                              ELSE
                                LV_BOM_FLAG := 'Y';
                              END IF;
                              --Added above by V1.018
                            
                              --写入工作单需求及工作单，优先耗用相关的指定物料
                              INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                                 P_PLAN_ID               => P_PLAN_ID,
                                                 P_ORGANIZATION_ID       => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                 P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                                 P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                                 P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                                 P_END_PEGGING_ID        => P_DEMAND_DETAIL.END_PEGGING_ID,
                                                 P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                                 P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                                 P_END_ORIGINATION_TYPE  => P_DEMAND_DETAIL.END_ORIGINATION_TYPE,
                                                 P_LEVEL_FLAG            => 2,
                                                 P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                                 P_PRIOR_FLAG            => 'Y',
                                                 P_PLAN_QTY              => LN_USED_QTY,
                                                 P_ORGI_USAGE            => LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                                 P_D_COUNT               => LN_D_COUNT,
                                                 P_S_COUNT               => LN_S_COUNT,
                                                 P_P_COUNT               => LN_P_COUNT);
                            
                              IF LN_PLAN_QTY <= 0 THEN
                                EXIT;
                              END IF;
                            
                            END LOOP;
                          END IF;
                        
                          --若工单不能满足需求则用工单的副需求去满足
                          IF LN_PLAN_QTY > 0 THEN
                            --冲减对应的工单，按照工单的开工日期，工单ID排序
                            FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                               LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                              LN_USED_QTY := 0;
                              IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                                LN_USED_QTY := LN_PLAN_QTY;
                                LN_PLAN_QTY := 0;
                              
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                              
                              ELSE
                              
                                LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = 0
                                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                              END IF;
                            
                              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                              --                    LN_USED_QTY;
                              IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                                --写入供应数据
                                BEGIN
                                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                
                                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                   WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                                
                                  LV_SUPPLIES_TEMP                   := NULL;
                                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                                
                                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                                
                                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                                
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT PCBA SUPPLIES 034 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                  
                                END;
                              ELSE
                                LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                              
                              END IF;
                            
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT PCBA PEGGINS 034 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                            
                              IF LN_PLAN_QTY <= 0 THEN
                                EXIT;
                              END IF;
                            
                            END LOOP;
                          END IF;
                        
                          --用在途部分去满足
                          IF LN_PLAN_QTY > 0 THEN
                            FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                               LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                              LN_USED_QTY := 0;
                              IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
                              
                                LN_USED_QTY := LN_PLAN_QTY;
                                LN_PLAN_QTY := 0;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                                 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                              
                              ELSE
                              
                                LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = 0
                                 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                              END IF;
                            
                              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                              --                     LN_USED_QTY;
                            
                              IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                                --写入供应数据
                                BEGIN
                                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                
                                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                   WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                                
                                  LV_SUPPLIES_TEMP                   := NULL;
                                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                                
                                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                                
                                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                                
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT BOM SUPPLIES 025 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                  
                                END;
                              
                              ELSE
                                LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                              
                              END IF;
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT BOM PEGGINS 026 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                              IF LN_PLAN_QTY <= 0 THEN
                                EXIT;
                              END IF;
                            
                            END LOOP;
                          END IF;
                        
                          --用PO部分去满足
                          IF LN_PLAN_QTY > 0 THEN
                            FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID,
                                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                             LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                              LN_USED_QTY := 0;
                              IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
                              
                                LN_USED_QTY := LN_PLAN_QTY;
                                LN_PLAN_QTY := 0;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                                 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                              
                              ELSE
                              
                                LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = 0
                                 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                              END IF;
                            
                              -- LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                              --                      LN_USED_QTY;
                              IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                                --写入供应数据
                                BEGIN
                                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                
                                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                   WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                                
                                  LV_SUPPLIES_TEMP                   := NULL;
                                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                                
                                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                                
                                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                                
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT BOM SUPPLIES 027 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                  
                                END;
                              ELSE
                                LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                              
                              END IF;
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT BOM PEGGINS 028 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                              IF LN_PLAN_QTY <= 0 THEN
                                EXIT;
                              END IF;
                            
                            END LOOP;
                          END IF;
                        
                          --用PR部分去满足
                          IF LN_PLAN_QTY > 0 AND LR_ZR_SUB.ZR_SUB_FLAG != 'Y' THEN
                            FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID,
                                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                             LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID) LOOP
                              LN_USED_QTY := 0;
                              IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
                              
                                LN_USED_QTY := LN_PLAN_QTY;
                                LN_PLAN_QTY := 0;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                                 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                              
                              ELSE
                              
                                LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                                --更新供应的结余数量
                                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                   SET CMS.REMAIN_QTY = 0
                                 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                              END IF;
                            
                              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY -
                              --                     LN_USED_QTY;
                              IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                                --写入供应数据
                                BEGIN
                                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                
                                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                                   WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                                
                                  LV_SUPPLIES_TEMP                   := NULL;
                                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                                
                                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME);
                                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                               LN_SUB_POST_LEAD_TIME -
                                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                                
                                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                                
                                EXCEPTION
                                  WHEN OTHERS THEN
                                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                        'INSERT_PLAN_MS',
                                        '***ERROR*** INSERT BOM SUPPLIES 029 ' ||
                                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                  
                                    LV_ERROR_CODE := 2;
                                    RAISE LE_EXCEPTION;
                                  
                                END;
                              ELSE
                                LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                              
                              END IF;
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT BOM PEGGINS 030 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                              IF LN_PLAN_QTY <= 0 THEN
                                EXIT;
                              END IF;
                            
                            END LOOP;
                          END IF;
                        
                          IF LN_PLAN_QTY > 0 THEN
                          
                            --最后仍不能满足 用计划单去满足
                            --需要加入供应商资料
                            /* ALLOCATION_QTY(P_PLAN_ID           => P_PLAN_ID,
                            p_SR_INSTANCE_ID    => p_SR_INSTANCE_ID,
                            P_ORGANIZATION_ID   => P_DEMAND_DETAIL.ORGANIZATION_ID,
                            P_INVENTORY_ITEM_ID => LR_SECOND_BOM.INVENTORY_ITEM_ID,
                            P_COMPONENT_SEQ_ID  => NULL,
                            P_ALLOCATION_QTY    => LN_PLAN_QTY);*/
                          
                            FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                                     CMAB.MSC_VENDOR_ID,
                                                     CMAB.MSC_VENDOR_SITE_ID,
                                                     CMAB.CURRENT_ALLOCATION_QTY
                                                FROM CUX.CUX_MSC_BID_ITEM_RANGE        CMBR,
                                                     CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                               WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                                 AND CMAB.CURRENT_ALLOCATION_QTY > 0
                                                 AND CMBR.INVENTORY_ITEM_ID = LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID
                                              UNION ALL
                                              SELECT LR_ZR_SUB_3.SUBSTITUTE_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                                FROM DUAL
                                               WHERE 1 = 1
                                                    --AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                                 AND NOT EXISTS
                                               (SELECT 1
                                                        FROM CUX.CUX_MSC_BID_ITEM_RANGE        CMBR,
                                                             CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                                       WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                                         AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
                            
                              BEGIN
                                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                                LV_SUPPLIES_TEMP                   := NULL;
                                LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                              
                                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME -
                                                                                             LN_SUB_FULL_LEAD_TIME);
                                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE -
                                                                                             LN_SUB_POST_LEAD_TIME -
                                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                                             LN_SUB_PREPROCE_LEAD_TIME);
                              
                                LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
                                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                                LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                                LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                                LV_SUPPLIES_TEMP.STATUS                  := 0;
                                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MS',
                                      '***ERROR*** INSERT WIP SUPPLIES 016 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                            
                              --写入PEGGING数据
                              BEGIN
                                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                              
                                LT_PEGGING_TEMP                        := NULL;
                                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_SECOND_BOM.USAGE_QUANTITY *LR_BOM.USAGE_QUANTITY* LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE);
                                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL2_US_COMP_DATE); --可能要修改
                                LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_SECOND_PEGGING_ID;
                                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                                LT_PEGGING_TEMP.UPDATED                := 0;
                                LT_PEGGING_TEMP.STATUS                 := 2;
                                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                              
                              EXCEPTION
                                WHEN OTHERS THEN
                                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                                      'INSERT_PLAN_MFP',
                                      '***ERROR*** INSERT WIP PEGGINGS 017 ' ||
                                      TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                                
                                  LV_ERROR_CODE := 2;
                                  RAISE LE_EXCEPTION;
                                
                              END;
                            END LOOP;
                          
                          END IF;
                        END IF;
                      END LOOP; --第三层分配结束（错阶指定物料不计算替代，其他会计算替代）
                    END LOOP;
                  
                  END IF;
                
                END IF;
              END IF;
            END LOOP; --第二层分配结束（错阶指定物料不计算替代，其他会计算替代）
          END LOOP;
        END IF;
      
      END LOOP;
      COMMIT;
    END IF;
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
  END;

  /***********************************************************************************
   NAME: CALCULATE_PH_PROCESS
   DESCRIPTION:处理虚拟替代部分,排除错阶替代
  ***********************************************************************************/
  PROCEDURE CALCULATE_PH_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                 P_PLAN_ID        NUMBER,
                                 P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                 P_D_COUNT        IN OUT NUMBER,
                                 P_S_COUNT        IN OUT NUMBER,
                                 P_P_COUNT        IN OUT NUMBER,
                                 PO_ERROR_CODE    OUT VARCHAR2) IS
  
    --LT_CUX_MSC_DEMANDS_PLAN GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
  
    CURSOR LC_ZR_SUB(P_BILL_ID          NUMBER,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --AND MBC.BILL_SEQUENCE_ID = P_BILL_ID
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_BOM(P_PLAN_ID         NUMBER,
                  p_SR_INSTANCE_ID  NUMBER,
                  P_ORGANIZATION_ID NUMBER,
                  P_ASSY_ITEM_ID    NUMBER,
                  P_BOM_VER_DATE    DATE) IS
      select MBC.INVENTORY_ITEM_ID, MBC.USAGE_QUANTITY, MBC.COMPONENT_SEQUENCE_ID, MBC.OPERATION_SEQ_NUM
        from msc_bom_components mbc, msc_boms mb
       where mb.plan_id = mbc.plan_id
         and mb.sr_instance_id = mbc.sr_instance_id
         and mb.organization_id = mbc.organization_id
         and mb.bill_sequence_id = mbc.bill_sequence_id
         and mb.plan_id = P_PLAN_ID
         and mb.sr_instance_id = p_SR_INSTANCE_ID
         and mb.organization_id = P_ORGANIZATION_ID
         and mb.assembly_item_id = P_ASSY_ITEM_ID
         and P_BOM_VER_DATE between mbc.effectivity_date and nvl(mbc.disable_date, P_BOM_VER_DATE + 1);
  
    LN_USED_QTY               NUMBER := 0;
    LN_PLAN_QTY               NUMBER := 0;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_TOTAL_QTY              NUMBER;
    LN_SUB_TOTAL_QTY          NUMBER;
    LN_TOTAL_PLAN_QTY         NUMBER;
    LN_TOTAL_DEMAND_QTY       NUMBER;
    LN_CROSS_HEADER_ID        NUMBER;
    LN_CROSS_LINE_ID          NUMBER;
    LV_PRIORITY_FLAG          VARCHAR2(1);
    LN_PREVIOUS_PEGGING_ID    NUMBER;
    LV_PROCESS_FLAG           VARCHAR2(1);
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE          VARCHAR2(10);
    LD_LEVEL1_US_COMP_DATE DATE;
    LN_LEVEL1_QTY          NUMBER;
    LN_LEVEL3_QTY          NUMBER;
    LN_LEVEL2_QTY          NUMBER;
    LV_SUB_ITEM_TYPE       VARCHAR2(20);
    LT_PEGGING_TEMP        CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP         CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP       CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
    BEGIN
      SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY
        INTO LV_PROCESS_FLAG, LN_PLAN_QTY
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PEGGING_ID = P_DEMAND_DETAIL.PEGGING_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_PROCESS_FLAG := 'Y';
    END;
  
    IF LV_PROCESS_FLAG = 'N' THEN
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 组合 000 DEMAND_ID ' || P_DEMAND_DETAIL.DEMAND_ID);
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 组合 001 料号 ' || GET_ITEM_NAME(P_PLAN_ID,
                                                     p_SR_INSTANCE_ID,
                                                     P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                     P_DEMAND_DETAIL.INVENTORY_ITEM_ID));
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 组合 002 总需分配数量 ' || LN_PLAN_QTY);
      
      END IF;
      -- LN_PLAN_QTY := P_DEMAND_DETAIL.ALLOCATED_QUANTITY;
    
      --先计算主料跟替代料各自的成套量
      LN_TOTAL_QTY := 0;
      /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
      DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
      DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
      /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
      
        SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
      
        INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
          (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
        VALUES
          (LN_CROSS_HEADER_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID, LR_ZR_SUB.ZR_SUB_FLAG);
      
        FOR LR_LINE IN (select MBC.INVENTORY_ITEM_ID, SUM(MBC.USAGE_QUANTITY) USAGE_QUANTITY
                          from msc_bom_components mbc, msc_boms mb
                         where mb.plan_id = mbc.plan_id
                           and mb.sr_instance_id = mbc.sr_instance_id
                           and mb.organization_id = mbc.organization_id
                           and mb.bill_sequence_id = mbc.bill_sequence_id
                           and mb.plan_id = P_PLAN_ID
                           and mb.sr_instance_id = p_SR_INSTANCE_ID
                           and mb.organization_id = P_DEMAND_DETAIL.ORGANIZATION_ID
                           and mb.assembly_item_id = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                           and /*P_BOM_VER_DATE*/
                               trunc(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE) between TRUNC(mbc.effectivity_date) and
                               nvl(mbc.disable_date, TRUNC(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE))
                         GROUP BY MBC.INVENTORY_ITEM_ID) LOOP
        
          SELECT CUX.CUX_MSC_GROUP_QTY_LINE_S.NEXTVAL INTO LN_CROSS_LINE_ID FROM DUAL;
        
          INSERT INTO CUX.CUX_MSC_GROUP_QTY_LINE
            (HEADER_ID, LINE_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, PER_QTY)
          VALUES
            (LN_CROSS_HEADER_ID,
             LN_CROSS_LINE_ID,
             P_DEMAND_DETAIL.ORGANIZATION_ID,
             LR_LINE.INVENTORY_ITEM_ID,
             LR_LINE.USAGE_QUANTITY);
        END LOOP;
      
      END LOOP;
    
      CALCULATE_GROUP_QTY_PH(P_SR_INSTANCE_ID, LV_ERROR_CODE); --计算成套量
      IF LV_ERROR_CODE = 2 THEN
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
      END IF;
      IF GV_LOG_FLAG = 'Y' THEN
        FOR LR_FENPEI IN (SELECT * FROM CUX.CUX_MSC_GROUP_QTY_HEADER) LOOP
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 组合 003 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_FENPEI.ORGANIZATION_ID, LR_FENPEI.INVENTORY_ITEM_ID));
          SELECT DECODE(LR_FENPEI.ZIRAN_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 错阶 003 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 组合 004 库存数量齐套数 ' || NVL(LR_FENPEI.LEVEL1_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 组合 005 在途数量齐套数 ' || NVL(LR_FENPEI.LEVEL2_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 组合 006 剩余加计划单齐套数 ' || NVL(LR_FENPEI.LEVEL3_QTY, 0));
        END LOOP;
      END IF;
    
      --计算自然替代跟普通替代 主料成套量不能满足部分
      --按照比例分配
      CALCULATE_GROUP_USED_QTY_PH(P_PLAN_ID         => P_PLAN_ID,
                                  p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                  P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                  P_PLAN_QTY        => LN_PLAN_QTY,
                                  P_ALLOT_FLAG      => 'Y',
                                  PO_ERROR_CODE     => LV_ERROR_CODE);
      IF LV_ERROR_CODE = 2 THEN
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
      END IF;
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
        --得到此替代料总的可用量
        BEGIN
          SELECT SUM(NVL(CMGQ.USED_QTY, 0))
            INTO LN_SUB_TOTAL_QTY
            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_TOTAL_QTY := 0;
        END;
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 组合 007 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
          SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 组合 008 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 组合 009 分配数量 ' || LN_SUB_TOTAL_QTY);
        END IF;
        IF LN_SUB_TOTAL_QTY > 0 THEN
        
          BEGIN
            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
              INTO LN_SUB_PREPROCE_LEAD_TIME,
                   LN_SUB_POST_LEAD_TIME,
                   LN_SUB_FULL_LEAD_TIME,
                   LN_SUB_FIXED_LEAD_TIME,
                   LN_SUB_VARIA_LEAD_TIME
              FROM MSC_SYSTEM_ITEMS MSI
             WHERE MSI.plan_id = P_PLAN_ID
               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
               AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SUB_PREPROCE_LEAD_TIME := 0;
              LN_SUB_POST_LEAD_TIME     := 0;
              LN_SUB_FULL_LEAD_TIME     := 0;
              LN_SUB_FIXED_LEAD_TIME    := 0;
              LN_SUB_VARIA_LEAD_TIME    := 0;
          END;
        
          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
          --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
          LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
        
          LN_TOTAL_PLAN_QTY   := LN_SUB_TOTAL_QTY;
          LN_TOTAL_DEMAND_QTY := LN_SUB_TOTAL_QTY;
          IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
            --写入减少原需求供应追溯
            --WRITE NEED
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'Y');
            --写入一条PH第一层替代料的需求
            BEGIN
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
            
              LT_DEMAND_TEMP                                := NULL;
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
              LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
              LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
              LT_DEMAND_TEMP.ATTRIBUTE2                     := P_DEMAND_DETAIL.ATTRIBUTE2;
              LT_DEMAND_TEMP.ATTRIBUTE3                     := P_DEMAND_DETAIL.ATTRIBUTE3;
              LT_DEMAND_TEMP.ATTRIBUTE4                     := P_DEMAND_DETAIL.ATTRIBUTE4;
              LT_DEMAND_TEMP.ATTRIBUTE5                     := P_DEMAND_DETAIL.ATTRIBUTE5;
              LT_DEMAND_TEMP.ATTRIBUTE6                     := P_DEMAND_DETAIL.ATTRIBUTE6;
              LT_DEMAND_TEMP.ATTRIBUTE7                     := P_DEMAND_DETAIL.ATTRIBUTE7;
              LT_DEMAND_TEMP.ATTRIBUTE8                     := P_DEMAND_DETAIL.ATTRIBUTE8;
              LT_DEMAND_TEMP.ATTRIBUTE9                     := P_DEMAND_DETAIL.ATTRIBUTE9;
              LT_DEMAND_TEMP.ATTRIBUTE10                    := P_DEMAND_DETAIL.ATTRIBUTE10;
              LT_DEMAND_TEMP.ATTRIBUTE11                    := P_DEMAND_DETAIL.ATTRIBUTE11;
              LT_DEMAND_TEMP.ATTRIBUTE12                    := P_DEMAND_DETAIL.ATTRIBUTE12;
              LT_DEMAND_TEMP.ATTRIBUTE13                    := P_DEMAND_DETAIL.ATTRIBUTE13;
              LT_DEMAND_TEMP.ATTRIBUTE14                    := P_DEMAND_DETAIL.ATTRIBUTE14;
              LT_DEMAND_TEMP.ATTRIBUTE15                    := P_DEMAND_DETAIL.ATTRIBUTE15;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := P_DEMAND_DETAIL.COMP_SEQ_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MD',
                    '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
              
            END;
          
          ELSE
          
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'N');
            LN_DEMAND_ID := P_DEMAND_DETAIL.DEMAND_ID;
          END IF;
        
          --写入PH第一层替代料供应数据
          BEGIN
            SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
            LV_SUPPLIES_TEMP                   := NULL;
            LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
            LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
            LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
            LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
            LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
          
            LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME); --重新计算
            LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME);
            LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                         LN_SUB_POST_LEAD_TIME - LN_SUB_FULL_LEAD_TIME -
                                                                         LN_SUB_PREPROCE_LEAD_TIME);
          
            LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
            LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
            LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
            LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
            LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
            LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
            LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LN_TOTAL_PLAN_QTY;
            LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
            LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
            LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
            LV_SUPPLIES_TEMP.UPDATED                 := 2;
            LV_SUPPLIES_TEMP.STATUS                  := 0;
            LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
            LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
            LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
            LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
            LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
            LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
            LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
            LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
            LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
            LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
            LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
            INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
          
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***ERROR*** INSERT PCBA SUPPLIES 037 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              LV_ERROR_CODE := 2;
              RAISE LE_EXCEPTION;
          END;
        
          --写入PH第一层替代料PEGGING数据
          BEGIN
            SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
          
            LT_PEGGING_TEMP                        := NULL;
            LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
            LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
            LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LN_TOTAL_PLAN_QTY;
            LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_TOTAL_PLAN_QTY;
            LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
            LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
            LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
            LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
            LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
            LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
            LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
            LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
            LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
            LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
            LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
            LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
            LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
            LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
            LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
            LT_PEGGING_TEMP.UPDATED                := 0;
            LT_PEGGING_TEMP.STATUS                 := 2;
            LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
            LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
            LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
            LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
            LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
            LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
            LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
            LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
            INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
          
          EXCEPTION
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MFP',
                  '***ERROR*** INSERT PCBA PEGGINGS 038 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                  dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              LV_ERROR_CODE := 2;
              RAISE LE_EXCEPTION;
          END;
        
          LN_PREVIOUS_PEGGING_ID := LN_PEGGING_ID;
          LD_LEVEL1_US_COMP_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE - LN_SUB_POST_LEAD_TIME -
                                                    LN_SUB_FULL_LEAD_TIME);
          FOR LR_BOM IN LC_BOM(P_PLAN_ID,
                               p_SR_INSTANCE_ID,
                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
                               TRUNC(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE)) LOOP
            LN_PLAN_QTY := LN_TOTAL_PLAN_QTY * LR_BOM.USAGE_QUANTITY;
          
            --写入一条PH第二层物料料的需求
            BEGIN
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
            
              LT_DEMAND_TEMP                                := NULL;
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_PLAN_QTY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_BOM.INVENTORY_ITEM_ID;
              LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := 2; --替代料标记 1替代料 2 主料
              LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
              LT_DEMAND_TEMP.ATTRIBUTE2                     := P_DEMAND_DETAIL.ATTRIBUTE2;
              LT_DEMAND_TEMP.ATTRIBUTE3                     := P_DEMAND_DETAIL.ATTRIBUTE3;
              LT_DEMAND_TEMP.ATTRIBUTE4                     := P_DEMAND_DETAIL.ATTRIBUTE4;
              LT_DEMAND_TEMP.ATTRIBUTE5                     := P_DEMAND_DETAIL.ATTRIBUTE5;
              LT_DEMAND_TEMP.ATTRIBUTE6                     := P_DEMAND_DETAIL.ATTRIBUTE6;
              LT_DEMAND_TEMP.ATTRIBUTE7                     := P_DEMAND_DETAIL.ATTRIBUTE7;
              LT_DEMAND_TEMP.ATTRIBUTE8                     := P_DEMAND_DETAIL.ATTRIBUTE8;
              LT_DEMAND_TEMP.ATTRIBUTE9                     := P_DEMAND_DETAIL.ATTRIBUTE9;
              LT_DEMAND_TEMP.ATTRIBUTE10                    := P_DEMAND_DETAIL.ATTRIBUTE10;
              LT_DEMAND_TEMP.ATTRIBUTE11                    := P_DEMAND_DETAIL.ATTRIBUTE11;
              LT_DEMAND_TEMP.ATTRIBUTE12                    := P_DEMAND_DETAIL.ATTRIBUTE12;
              LT_DEMAND_TEMP.ATTRIBUTE13                    := P_DEMAND_DETAIL.ATTRIBUTE13;
              LT_DEMAND_TEMP.ATTRIBUTE14                    := P_DEMAND_DETAIL.ATTRIBUTE14;
              LT_DEMAND_TEMP.ATTRIBUTE15                    := P_DEMAND_DETAIL.ATTRIBUTE15;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_BOM.COMPONENT_SEQUENCE_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MD',
                    '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
            END;
          
            --冲减现有量
            FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                             LR_BOM.INVENTORY_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
                LN_USED_QTY := LN_PLAN_QTY;
              
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              
                LN_PLAN_QTY := 0;
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
              
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
              END IF;
            
              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
              IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_BOM.INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                  LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                  LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                  LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                  LV_SUPPLIES_TEMP.UPDATED                 := 2;
                  LV_SUPPLIES_TEMP.STATUS                  := 0;
                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            END LOOP;
          
            --若现有量不能满足需求则用工单的副需求去满足需求
          
            IF LN_PLAN_QTY > 0 THEN
              --冲减对应的工单，按照工单的开工日期，工单ID排序
              FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                 LR_BOM.INVENTORY_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                  LN_USED_QTY := LN_PLAN_QTY;
                  LN_PLAN_QTY := 0;
                
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                END IF;
              
                --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                  --写入供应数据
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_BOM.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                    LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                    LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                    LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                    LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                    LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.UPDATED                  := 2;
                    LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                    LV_SUPPLIES_TEMP.STATUS                   := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                    LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                    LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                
                END IF;
              
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                IF LN_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              
              END LOOP;
            END IF;
          
            --用在途部分去满足
            IF LN_PLAN_QTY > 0 THEN
              FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                 LR_BOM.INVENTORY_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
                
                  LN_USED_QTY := LN_PLAN_QTY;
                  LN_PLAN_QTY := 0;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                END IF;
              
                --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                  --写入供应数据
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_BOM.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                    LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                    LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                    LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                    LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                    LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.UPDATED                  := 2;
                    LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                    LV_SUPPLIES_TEMP.STATUS                   := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                    LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                    LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                
                END IF;
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
                IF LN_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              
              END LOOP;
            END IF;
          
            --用PO部分去满足
            IF LN_PLAN_QTY > 0 THEN
              FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID,
                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               LR_BOM.INVENTORY_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
                
                  LN_USED_QTY := LN_PLAN_QTY;
                  LN_PLAN_QTY := 0;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                END IF;
              
                --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                  --写入供应数据
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP := NULL; --20170206 异常处理
                  
                    LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_BOM.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    --   LV_SUPPLIES_TEMP := NULL;
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                    LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                    LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                    LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                    LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                    LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                    LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                    LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                    LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                    LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                    LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                    LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.UPDATED                  := 2;
                    LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                    LV_SUPPLIES_TEMP.STATUS                   := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                    LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                
                END IF;
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
                IF LN_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              
              END LOOP;
            END IF;
          
            --用PR部分去满足
            IF LN_PLAN_QTY > 0 AND LR_ZR_SUB.ZR_SUB_FLAG != 'Y' THEN
              FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID,
                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               LR_BOM.INVENTORY_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
                
                  LN_USED_QTY := LN_PLAN_QTY;
                  LN_PLAN_QTY := 0;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                END IF;
                IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                  --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  --写入供应数据
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_BOM.INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                    LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                    LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                    LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                    LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                    LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                    LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                    LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                    LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                    LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                    LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                    LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                    LV_SUPPLIES_TEMP.UPDATED                  := 2;
                    LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                    LV_SUPPLIES_TEMP.STATUS                   := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                    LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                
                END IF;
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                        dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
                IF LN_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              
              END LOOP;
            END IF;
          
            IF LN_PLAN_QTY > 0 THEN
            
              --最后仍不能满足 用计划单去满足
              --需要加入供应商资料
              ALLOCATION_QTY(P_PLAN_ID           => P_PLAN_ID,
                             p_SR_INSTANCE_ID    => p_SR_INSTANCE_ID,
                             P_ORGANIZATION_ID   => P_DEMAND_DETAIL.ORGANIZATION_ID,
                             P_INVENTORY_ITEM_ID => LR_BOM.INVENTORY_ITEM_ID,
                             P_COMPONENT_SEQ_ID  => NULL,
                             P_ALLOCATION_QTY    => LN_PLAN_QTY);
            
              FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                       CMAB.MSC_VENDOR_ID,
                                       CMAB.MSC_VENDOR_SITE_ID,
                                       CMAB.CURRENT_ALLOCATION_QTY
                                  FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                 WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                   AND CMAB.CURRENT_ALLOCATION_QTY > 0
                                --AND CMBR.INVENTORY_ITEM_ID = LR_BOM.INVENTORY_ITEM_ID
                                UNION ALL
                                SELECT LR_BOM.INVENTORY_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                  FROM DUAL
                                 WHERE 1 = 1
                                      --AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                   AND NOT EXISTS
                                 (SELECT 1
                                          FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                         WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                           AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
              
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                  LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                  LV_SUPPLIES_TEMP.UPDATED                 := 2;
                  LV_SUPPLIES_TEMP.STATUS                  := 0;
                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT WIP SUPPLIES 016 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_BOM.USAGE_QUANTITY * LR_ZR_SUB.ITEM_USAGE_QTY;--初始单位用量--Added by v1.027
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LD_LEVEL1_US_COMP_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_BOM.INVENTORY_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LN_PREVIOUS_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT WIP PEGGINGS 017 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              END LOOP;
            
            END IF;
          END LOOP;
        END IF;
      
      END LOOP;
      COMMIT;
    END IF;
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
  END;

  /***********************************************************************************
   NAME: CALCULATE_BUY_PROCESS
   DESCRIPTION:处理采购件部分
  ***********************************************************************************/
  PROCEDURE CALCULATE_BUY_PROCESS(p_SR_INSTANCE_ID NUMBER,
                                  P_PLAN_ID        NUMBER,
                                  P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                  P_D_COUNT        IN OUT NUMBER,
                                  P_S_COUNT        IN OUT NUMBER,
                                  P_P_COUNT        IN OUT NUMBER,
                                  PO_ERROR_CODE    OUT VARCHAR2) IS
  
    CURSOR LC_ZR_SUB(P_BILL_ID          NUMBER,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --AND MBC.BILL_SEQUENCE_ID = P_BILL_ID
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    LN_USED_QTY               NUMBER := 0;
    LN_PLAN_QTY               NUMBER := 0;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_TOTAL_QTY              NUMBER;
    LN_SUB_TOTAL_QTY          NUMBER;
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE       VARCHAR2(10);
    LN_TOTAL_DEMAND_QTY NUMBER;
    LN_CROSS_HEADER_ID  NUMBER;
    LV_PROCESS_FLAG     VARCHAR2(1);
    LN_USAGE_QTY        NUMBER;
    LN_NOW_DEMAND_QTY   NUMBER;
    LN_LEVEL1_QTY       NUMBER;
    LN_LEVEL3_QTY       NUMBER;
    LN_LEVEL2_QTY       NUMBER;
    LV_SUB_ITEM_TYPE    VARCHAR2(20);
    LV_RDJ_FLAG         VARCHAR2(1);
  
    LT_PEGGING_TEMP  CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP   CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
    BEGIN
      SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY, USING_REQUIREMENT_QUANTITY
        INTO LV_PROCESS_FLAG, LN_PLAN_QTY, LN_NOW_DEMAND_QTY
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PEGGING_ID = P_DEMAND_DETAIL.PEGGING_ID
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N';
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_PROCESS_FLAG := 'Y';
        /*LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***ERROR*** 00001 P_DEMAND_DETAIL.PEGGING_ID =' || P_DEMAND_DETAIL.PEGGING_ID || ' 出现错误: ' || CHR(10) ||
            SQLERRM);*/
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***ERROR*** 10011 P_DEMAND_DETAIL.PEGGING_ID =' || P_DEMAND_DETAIL.PEGGING_ID || ' 出现错误: '
            ||dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
    END;
  
    IF LV_PROCESS_FLAG = 'N' THEN
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 采购物料 000 DEMAND_ID ' || P_DEMAND_DETAIL.DEMAND_ID);
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 采购物料 000 DEMAND_DATE ' || P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 采购物料 001 料号 ' || GET_ITEM_NAME(P_PLAN_ID,
                                                       p_SR_INSTANCE_ID,
                                                       P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                       P_DEMAND_DETAIL.INVENTORY_ITEM_ID));
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 采购物料 002 总需分配数量 ' || LN_PLAN_QTY);
      
      END IF;
    
      --先计算主料跟替代料各自的成套量
      LN_TOTAL_QTY := 0;
      /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
      DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
      DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;
      DELETE CUX.CUX_MSC_FENPEI_DETAIL;*/
      /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
      --TRUNC_TEMP_TABLE('CUX.CUX_MSC_FENPEI_DETAIL');--Commented by V1.026
      DELETE FROM CUX.CUX_MSC_FENPEI_DETAIL; --Added by V1.026
      COMMIT; --Added by V1.026
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
      
        SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
      
        INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
          (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
        VALUES
          (LN_CROSS_HEADER_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID, LR_ZR_SUB.ZR_SUB_FLAG);
        --commit;
      END LOOP;
    
      CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
      --commit;
      IF GV_LOG_FLAG = 'Y' THEN
        FOR LR_FENPEI IN (SELECT * FROM CUX.CUX_MSC_GROUP_QTY_HEADER) LOOP
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 003 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_FENPEI.ORGANIZATION_ID, LR_FENPEI.INVENTORY_ITEM_ID));
          SELECT DECODE(LR_FENPEI.ZIRAN_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 采购物料 003 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 004 库存数量齐套数 ' || NVL(LR_FENPEI.LEVEL1_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 005 在途数量齐套数 ' || NVL(LR_FENPEI.LEVEL2_QTY, 0));
        END LOOP;
      END IF;
      --计算自然替代跟普通替代 主料成套量不能满足部分
      --按照比例分配
      CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                               p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                               P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                               P_PLAN_QTY        => LN_PLAN_QTY,
                               P_ALLOT_FLAG      => 'Y',
                               PO_ERROR_CODE     => LV_ERROR_CODE);
      --commit;
      IF LV_ERROR_CODE = 2 THEN
        RAISE LE_EXCEPTION;
      END IF;
      IF GV_LOG_FLAG = 'Y' THEN
        FOR LR_FENPEI IN (SELECT INVENTORY_ITEM_ID,
                                 SUPPLIER_ID,
                                 SUPPLIER_SITE_ID,
                                 BID_NO,
                                 TOTAL_PLAN_QTY,
                                 BID_PERCENTAGE,
                                 FENPEI_QTY,
                                 ORIGINAL_PR_QTY,
                                 ACTUAL_QTY
                            FROM CUX.CUX_MSC_FENPEI_DETAIL) LOOP
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 007 物料 ' || Msc_GET_name.item_name(LR_FENPEI.INVENTORY_ITEM_ID));
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 008 供应商 ' || Msc_GET_name.supplier(LR_FENPEI.SUPPLIER_ID));
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 009 理想比例 ' || LR_FENPEI.BID_PERCENTAGE);
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 010 理想分配数量 ' || LR_FENPEI.FENPEI_QTY);
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 010 分配前总PR量 ' || LR_FENPEI.ORIGINAL_PR_QTY);
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 012 实际分配数量 ' || LR_FENPEI.ACTUAL_QTY);
        END LOOP;
      END IF;
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
      
        --得到此替代料总的可用量
        BEGIN
          SELECT SUM(NVL(CMGQ.USED_QTY, 0))
            INTO LN_SUB_TOTAL_QTY
            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_TOTAL_QTY := 0;
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** 10012 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID || ' 出现错误: ' 
                ||dbms_utility.format_error_backtrace()|| CHR(10) || SQLERRM);
        END;
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 013 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
          SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 采购物料 014 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 采购物料 015 总分配数量（含库存在途） ' || LN_SUB_TOTAL_QTY);
        END IF;
        IF LN_SUB_TOTAL_QTY > 0 THEN
        
          BEGIN
            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
              INTO LN_SUB_PREPROCE_LEAD_TIME,
                   LN_SUB_POST_LEAD_TIME,
                   LN_SUB_FULL_LEAD_TIME,
                   LN_SUB_FIXED_LEAD_TIME,
                   LN_SUB_VARIA_LEAD_TIME
              FROM MSC_SYSTEM_ITEMS MSI
             WHERE MSI.plan_id = P_PLAN_ID
               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
               AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SUB_PREPROCE_LEAD_TIME := 0;
              LN_SUB_POST_LEAD_TIME     := 0;
              LN_SUB_FULL_LEAD_TIME     := 0;
              LN_SUB_FIXED_LEAD_TIME    := 0;
              LN_SUB_VARIA_LEAD_TIME    := 0;
              /*LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***ERROR*** 00002 ' || ' 出现错误: ' || CHR(10) || SQLERRM);*/
            WHEN OTHERS THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***ERROR*** 10013 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID || ' 出现错误: ' ||
                  CHR(10) || SQLERRM);
          END;
        
          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
          LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME, 0);
          LN_SUB_FIXED_LEAD_TIME    := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_VARIA_LEAD_TIME    := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
          LN_PLAN_QTY               := LN_SUB_TOTAL_QTY;
          LN_TOTAL_DEMAND_QTY       := LN_PLAN_QTY;
        
          --判断此需求是否来自非标准工作单需求
          SELECT GET_RDJ_FLAG(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.PREV_PEGGING_ID) INTO LV_RDJ_FLAG FROM DUAL;
        
          IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
            --写入减少原需求供应追溯
            --WRITE NEED
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'Y');
            --写入第一层替代料的需求
            BEGIN
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
              LT_DEMAND_TEMP := NULL;
            
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_PLAN_QTY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := P_DEMAND_DETAIL.ORIGINATION_TYPE; --1; --计划单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
              LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
              LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.ATTRIBUTE1                     := 'Y';
              LT_DEMAND_TEMP.ATTRIBUTE2                     := P_DEMAND_DETAIL.ATTRIBUTE2;
              LT_DEMAND_TEMP.ATTRIBUTE3                     := P_DEMAND_DETAIL.ATTRIBUTE3;
              LT_DEMAND_TEMP.ATTRIBUTE4                     := P_DEMAND_DETAIL.ATTRIBUTE4;
              LT_DEMAND_TEMP.ATTRIBUTE5                     := P_DEMAND_DETAIL.ATTRIBUTE5;
              LT_DEMAND_TEMP.ATTRIBUTE6                     := P_DEMAND_DETAIL.ATTRIBUTE6;
              LT_DEMAND_TEMP.ATTRIBUTE7                     := P_DEMAND_DETAIL.ATTRIBUTE7;
              LT_DEMAND_TEMP.ATTRIBUTE8                     := P_DEMAND_DETAIL.ATTRIBUTE8;
              LT_DEMAND_TEMP.ATTRIBUTE9                     := P_DEMAND_DETAIL.ATTRIBUTE9;
              LT_DEMAND_TEMP.ATTRIBUTE10                    := P_DEMAND_DETAIL.ATTRIBUTE10;
              LT_DEMAND_TEMP.ATTRIBUTE11                    := P_DEMAND_DETAIL.ATTRIBUTE11;
              LT_DEMAND_TEMP.ATTRIBUTE12                    := P_DEMAND_DETAIL.ATTRIBUTE12;
              LT_DEMAND_TEMP.ATTRIBUTE13                    := P_DEMAND_DETAIL.ATTRIBUTE13;
              LT_DEMAND_TEMP.ATTRIBUTE14                    := P_DEMAND_DETAIL.ATTRIBUTE14;
              LT_DEMAND_TEMP.ATTRIBUTE15                    := P_DEMAND_DETAIL.ATTRIBUTE15;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := P_DEMAND_DETAIL.COMP_SEQ_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
              --commit;
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MD',
                    '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
            END;
          
          ELSE
          
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_PLAN_QTY,
                             P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'N');
            LN_DEMAND_ID := P_DEMAND_DETAIL.DEMAND_ID;
            --commit;            
          END IF;
        
          --冲减现有量
          FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                                           LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
            LN_USED_QTY := 0;
            IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
              LN_USED_QTY := LN_PLAN_QTY;
            
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                 SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              --commit;
              LN_PLAN_QTY := 0;
            ELSE
            
              LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
            
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              --commit;
              LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
            END IF;
          
            --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
            IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
              --写入供应数据
              BEGIN
                --LT_CUX_MSC_SUPPLIES_PLAN.extend;
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
              
                LV_SUPPLIES_TEMP                   := NULL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                             LN_SUB_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
              
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                --commit;                
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                 SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
              --commit;
            ELSE
              LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
            
            END IF;
            --写入PEGGING数据
            BEGIN
              SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              LT_PEGGING_TEMP := NULL;
            
              LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
              LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
              LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
              LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
              LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
              LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
              LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
              LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
              LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
              LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
              LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
              LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
              LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
              LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
              LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
              LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_PEGGING_TEMP.UPDATED                := 0;
              LT_PEGGING_TEMP.STATUS                 := 2;
              LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
              LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
              LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
              LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
              LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
              LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
            
              INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              --commit;              
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MFP',
                    '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
            END;
          
            IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
              INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
              VALUES
                (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
              --commit;                
              INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                (WIP_ENTITY_ID,
                 SEQUENCE_ID,
                 TRANSACTION_ID,
                 INVENTORY_ITEM_ID,
                 ORDER_TYPE,
                 SUPPLY_DATE,
                 SUPPLY_QTY,
                 SUPPLY_ROW_ID,
                 REMAIN_QTY,
                 DEMAND_ID,
                 DEMAND_QTY,
                 DEMAND_DATE)
              VALUES
                (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                 CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                 LN_TRANSACTION_ID,
                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                 LR_SUPPLY_OH.order_type,
                 GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                 LR_SUPPLY_OH.NEW_ORDER_QUANTITY,
                 LR_SUPPLY_OH.ROW_ID,
                 LN_USED_QTY,
                 LN_DEMAND_ID,
                 LN_TOTAL_DEMAND_QTY,
                 GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
              --commit;                 
            END IF;
          
            IF LN_PLAN_QTY <= 0 THEN
              EXIT;
            END IF;
          END LOOP;
        
          --若现有量不能满足需求则用工单的副需求去满足需求
        
          IF LN_PLAN_QTY > 0 THEN
            --冲减对应的工单负产出，按照工单的开工日期，工单ID排序
            FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
              
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                --commit;
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                --commit;                
              END IF;
            
              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
              IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                
                  LV_SUPPLIES_TEMP := NULL;
                
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  --commit;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                --commit;                 
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
              
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP := NULL;
              
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                --commit;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                --commit;
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   LR_SUPPLY_RDJ.order_type,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY,
                   LR_SUPPLY_RDJ.ROW_ID,
                   LN_USED_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
                --  commit;
              END IF;
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用在途部分去满足
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                --commit;
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                --commit;                
              END IF;
            
              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
              IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                  LV_SUPPLIES_TEMP := NULL;
                
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  -- commit;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                -- commit;                 
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP := NULL;
              
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                --commit;                
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                --commit;                  
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   LR_SUPPLY_RCV.order_type,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_SUPPLY_RCV.NEW_ORDER_QUANTITY,
                   LR_SUPPLY_RCV.ROW_ID,
                   LN_USED_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
                -- commit;                   
              END IF;
            
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用PO部分去满足
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID,
                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                             LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                -- commit;
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                -- commit;                
              END IF;
            
              --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
              IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                --写入供应数据
                BEGIN
                  LV_SUPPLIES_TEMP := NULL;
                
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE) -
                                                               LN_SUB_POST_LEAD_TIME; --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  --commit;                  
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                --commit;                 
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                --commit;                
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                --commit;                  
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   LR_SUPPLY_PO.order_type,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_SUPPLY_PO.NEW_ORDER_QUANTITY,
                   LR_SUPPLY_PO.ROW_ID,
                   LN_USED_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
                --commit;                   
              END IF;
            
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --用PR部分去满足
          IF LN_PLAN_QTY > 0 AND LR_ZR_SUB.ZR_SUB_FLAG != 'Y' THEN
            FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID,
                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                             LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
              
                LN_USED_QTY := LN_PLAN_QTY;
                LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                -- commit;
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                --commit;                
              END IF;
              IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                --写入供应数据
                BEGIN
                  LV_SUPPLIES_TEMP := NULL;
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                  LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                  LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                  LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  --commit;                  
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                -- commit;                 
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
              
              END IF;
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                -- commit;                
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                -- commit;                  
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   LR_SUPPLY_PR.order_type,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_SUPPLY_PR.NEW_ORDER_QUANTITY,
                   LR_SUPPLY_PR.ROW_ID,
                   LN_USED_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
                --commit;                   
              END IF;
            
              IF LN_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --最后仍不能满足 用计划单去满足
          --需要加入供应商资料
          /* ALLOCATION_QTY(P_PLAN_ID           => P_PLAN_ID,
          p_SR_INSTANCE_ID    => p_SR_INSTANCE_ID,
          P_ORGANIZATION_ID   => P_DEMAND_DETAIL
                                 .ORGANIZATION_ID,
          P_INVENTORY_ITEM_ID => LR_ZR_SUB.SUBSTITUTE_ITEM_ID,
          P_COMPONENT_SEQ_ID  => NULL,
          P_ALLOCATION_QTY    => LN_PLAN_QTY);*/
          IF LN_PLAN_QTY > 0 THEN
            FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                     CMAB.MSC_VENDOR_ID,
                                     CMAB.MSC_VENDOR_SITE_ID,
                                     CMAB.CURRENT_ALLOCATION_QTY
                                FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                               WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                 AND CMAB.CURRENT_ALLOCATION_QTY > 0
                                 AND CMBR.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                              UNION ALL
                              SELECT LR_ZR_SUB.SUBSTITUTE_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                FROM DUAL
                               WHERE 1 = 1
                                 AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                 AND NOT EXISTS
                               (SELECT 1
                                        FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                       WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                         AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
            
              BEGIN
                LV_SUPPLIES_TEMP := NULL;
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                             LN_SUB_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := P_DEMAND_DETAIL.DISPOSITION_ID;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
              
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                --    commit;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT WIP SUPPLIES 016 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY; --单位用量
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                --     commit;
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT WIP PEGGINGS 017 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
              END;
            
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                -- commit;
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   5,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_PO_BID.CURRENT_ALLOCATION_QTY,
                   NULL,
                   LR_PO_BID.CURRENT_ALLOCATION_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
                --    commit;
              END IF;
            
            END LOOP;
          END IF;
        END IF;
      
      END LOOP;
      COMMIT;
    END IF;
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
      LOG(FND_GLOBAL.CONC_REQUEST_ID,
          'INSERT_PLAN_MFP',
          '***ERROR*** INSERT BUY ' || sqlcode || chr(10) || SQLERRM || CHR(10) ||
          dbms_utility.format_error_backtrace());
  END;

  /***********************************************************************************
   NAME: CALCULATE_CROSS_SA_PROCESS
   DESCRIPTION:错阶定义里面的SA但是不定义在错阶下面的部分。
  ***********************************************************************************/
  --Added by V1.018
  PROCEDURE CALCULATE_CROSS_SA_PROCESS(P_SR_INSTANCE_ID NUMBER,
                                       P_PLAN_ID        NUMBER,
                                       P_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE,
                                       P_D_COUNT        IN OUT NUMBER,
                                       P_S_COUNT        IN OUT NUMBER,
                                       P_P_COUNT        IN OUT NUMBER,
                                       PO_ERROR_CODE    OUT VARCHAR2) IS
  
    CURSOR LC_BUY(P_PEGGING_ID NUMBER) IS
      SELECT *
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 2 --采购件
         AND CMD.LOW_LEVEL_CODE = 1000
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND CMD.PREV_PEGGING_ID = P_PEGGING_ID;
  
    CURSOR LC_ZR_SUB(P_BILL_ID          NUMBER,
                     P_COMPONENT_SEQ_ID NUMBER,
                     P_MAIN_ITEM_ID     NUMBER,
                     P_ORGANIZATION_ID  NUMBER,
                     P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY, MCS.SUBSTITUTE_ITEM_ID, 1 SORT_ODER, 1 SUB_ITEM_TYPE, 'Y' ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
      --AND MBC.BILL_SEQUENCE_ID = P_BILL_ID
      --and DECODE(mcs.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    CURSOR LC_BUY_SUB(P_BILL_ID          NUMBER,
                      P_COMPONENT_SEQ_ID NUMBER,
                      P_MAIN_ITEM_ID     NUMBER,
                      P_ORGANIZATION_ID  NUMBER,
                      P_END_ITEM_USAGE   NUMBER) IS
      select P_END_ITEM_USAGE ITEM_USAGE_QTY,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 1, 'Y', 1, 2) SORT_ODER,
             1 SUB_ITEM_TYPE,
             DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG
        from /*MSC_COMPONENT_SUBSTITUTES*/ cux.cux_msc_component_substitutes MCS /*, msc_bom_components MBC*/
       WHERE MCS.ORGANIZATION_ID = P_ORGANIZATION_ID /*MCS.PLAN_ID = MBC.PLAN_ID
                     AND MCS.SR_INSTANCE_ID = MBC.SR_INSTANCE_ID
                     AND MCS.ORGANIZATION_ID = MBC.ORGANIZATION_ID
                     AND MCS.BILL_SEQUENCE_ID = MBC.BILL_SEQUENCE_ID
                     AND MCS.COMPONENT_SEQUENCE_ID = MBC.COMPONENT_SEQUENCE_ID*/
         AND mcs.plan_id = -1 --P_PLAN_ID
         and mcs.sr_instance_id = p_SR_INSTANCE_ID
         and mcs.component_sequence_id = P_COMPONENT_SEQ_ID
         and DECODE(mcs.ZR_SUB_FLAG /*ATTRIBUTE1*/, '2', 'Y', 'Y', 'Y', 'N') = 'Y'
      --AND MBC.BILL_SEQUENCE_ID = P_BILL_ID
      /*UNION ALL
      select MBC.USAGE_QUANTITY, MBC.INVENTORY_ITEM_ID, 3 SORT_ODER, 2 SUB_ITEM_TYPE, 'M'
        from msc_bom_components mbc
       where 1 = 1
         and mbc.plan_id = P_PLAN_ID
         and mbc.sr_instance_id = p_SR_INSTANCE_ID
         AND MBC.COMPONENT_SEQUENCE_ID = P_COMPONENT_SEQ_ID
         AND MBC.BILL_SEQUENCE_ID = P_BILL_ID*/
      UNION ALL
      SELECT P_END_ITEM_USAGE, P_MAIN_ITEM_ID, 3, 2, 'M'
        FROM DUAL /*WHERE P_COMPONENT_SEQ_ID IS NULL*/
       ORDER BY 3, 2;
  
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE             VARCHAR2(10);
    LN_USED_QTY               NUMBER := 0;
    LN_PLAN_QTY               NUMBER := 0;
    LN_D_COUNT                NUMBER := 1;
    LN_S_COUNT                NUMBER := 1;
    LN_P_COUNT                NUMBER := 1;
    LN_DEMAND_ID              NUMBER;
    LN_TRANSACTION_ID         NUMBER;
    LN_PEGGING_ID             NUMBER;
    LN_SUB_PREPROCE_LEAD_TIME NUMBER;
    LN_SUB_POST_LEAD_TIME     NUMBER;
    LN_SUB_FULL_LEAD_TIME     NUMBER;
    LN_SUB_FIXED_LEAD_TIME    NUMBER;
    LN_SUB_VARIA_LEAD_TIME    NUMBER;
    LN_TOTAL_QTY              NUMBER;
    LN_SUB_TOTAL_QTY          NUMBER;
    LN_TOTAL_PLAN_QTY         NUMBER;
    LN_TOTAL_DEMAND_QTY       NUMBER;
    LN_CROSS_HEADER_ID        NUMBER;
    LV_PROCESS_FLAG           VARCHAR2(1);
    LN_COMPLETED_QTY          NUMBER;
    LV_WIP_PROCESS_FLAG       VARCHAR2(10);
    LN_PCBA_PEGGING_ID        NUMBER;
    LN_RDJ_PEGGING_ID         NUMBER;
    LD_USING_ASSY_D_DATE      DATE;
    LV_INSERT_SUPPLY_FLAG     VARCHAR2(10);
    LV_SUB_ITEM_TYPE          VARCHAR2(20);
    LN_LEVEL1_QTY             NUMBER;
    LN_LEVEL2_QTY             NUMBER;
    LN_LEVEL3_QTY             NUMBER;
    LV_BOM_FLAG               VARCHAR2(1);
    LN_RESIDUE_QTY            NUMBER;
    LN_USAGE_QTY              NUMBER;
    LV_ONLY_PEGGING_FLAG      VARCHAR2(1);
    LV_RDJ_FLAG               VARCHAR2(1);
    LT_PEGGING_TEMP           CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP            CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP          CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  BEGIN
    LN_D_COUNT := P_D_COUNT;
    LN_S_COUNT := P_S_COUNT;
    LN_P_COUNT := P_P_COUNT;
    BEGIN
      SELECT NVL(ATTRIBUTE1, 'N'), ALLOCATED_QUANTITY
        INTO LV_PROCESS_FLAG, LN_PLAN_QTY
        FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PEGGING_ID = P_DEMAND_DETAIL.PEGGING_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LV_PROCESS_FLAG := 'Y';
    END;
  
    IF LV_PROCESS_FLAG = 'N' THEN
      IF GV_LOG_FLAG = 'Y' THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 制造件 000 DEMAND_ID ' || P_DEMAND_DETAIL.DEMAND_ID);
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***Note*** 制造件 001 料号 ' || GET_ITEM_NAME(P_PLAN_ID,
                                                      p_SR_INSTANCE_ID,
                                                      P_DEMAND_DETAIL.ORGANIZATION_ID,
                                                      P_DEMAND_DETAIL.INVENTORY_ITEM_ID));
      
        LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 002 总需分配数量 ' || LN_PLAN_QTY);
      
      END IF;
    
      --先计算自然替代与主料总的可供应量
      LN_TOTAL_QTY := 0;
    
      /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
      DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
      DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
      /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
      TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
      
        SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
      
        INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
          (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
        VALUES
          (LN_CROSS_HEADER_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID, LR_ZR_SUB.ZR_SUB_FLAG);
      
      END LOOP;
    
      CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
    
      --计算自然替代跟普通替代 主料成套量不能满足部分
      --按照比例分配
      CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                               p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                               P_ORGANIZATION_ID => P_DEMAND_DETAIL.ORGANIZATION_ID,
                               P_PLAN_QTY        => LN_PLAN_QTY,
                               P_ALLOT_FLAG      => 'N',
                               PO_ERROR_CODE     => LV_ERROR_CODE);
      IF LV_ERROR_CODE = 2 THEN
        RAISE LE_EXCEPTION;
      END IF;
    
      BEGIN
        SELECT SUM(NVL(CMGQ.USED_QTY, 0)) INTO LN_SUB_TOTAL_QTY FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_SUB_TOTAL_QTY := 0;
      END;
    
      IF NVL(LN_SUB_TOTAL_QTY, 0) >= LN_PLAN_QTY THEN
        LN_RESIDUE_QTY := 0;
      ELSE
        LN_RESIDUE_QTY := LN_PLAN_QTY - NVL(LN_SUB_TOTAL_QTY, 0);
      END IF;
    
      --判断此需求是否来自非标准工作单需求
      SELECT GET_RDJ_FLAG(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.PREV_PEGGING_ID) INTO LV_RDJ_FLAG FROM DUAL;
    
      FOR LR_ZR_SUB IN LC_ZR_SUB(P_DEMAND_DETAIL.BILL_ID,
                                 P_DEMAND_DETAIL.COMP_SEQ_ID,
                                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                                 P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_DEMAND_DETAIL.END_ITEM_USAGE) LOOP
        --IF LN_PLAN_QTY > 0 THEN
        --得到此替代料总的可用量
        BEGIN
          SELECT SUM(NVL(CMGQ.USED_QTY, 0))
            INTO LN_SUB_TOTAL_QTY
            FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
           WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LN_SUB_TOTAL_QTY := 0;
        END;
        IF GV_LOG_FLAG = 'Y' THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 制造件 003 分配料号 ' ||
              GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, P_DEMAND_DETAIL.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
          SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
            INTO LV_SUB_ITEM_TYPE
            FROM DUAL;
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 003 料号类型 ' || LV_SUB_ITEM_TYPE);
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 制造件 004 库存数量齐套数 ' || NVL(LN_LEVEL1_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 制造件 005 在途数量齐套数 ' || NVL(LN_LEVEL2_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MS',
              '***Note*** 制造件 006 剩余加计划单齐套数 ' || NVL(LN_LEVEL3_QTY, 0));
        
          LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 制造件 007 分配数量 ' || LN_SUB_TOTAL_QTY);
        END IF;
        IF LN_SUB_TOTAL_QTY > 0 THEN
        
          BEGIN
            SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                   MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                   MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                   MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                   MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
              INTO LN_SUB_PREPROCE_LEAD_TIME,
                   LN_SUB_POST_LEAD_TIME,
                   LN_SUB_FULL_LEAD_TIME,
                   LN_SUB_FIXED_LEAD_TIME,
                   LN_SUB_VARIA_LEAD_TIME
              FROM MSC_SYSTEM_ITEMS MSI
             WHERE MSI.plan_id = P_PLAN_ID
               AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
               AND MSI.ORGANIZATION_ID = P_DEMAND_DETAIL.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              LN_SUB_PREPROCE_LEAD_TIME := 0;
              LN_SUB_POST_LEAD_TIME     := 0;
              LN_SUB_FULL_LEAD_TIME     := 0;
              LN_SUB_FIXED_LEAD_TIME    := 0;
              LN_SUB_VARIA_LEAD_TIME    := 0;
          END;
        
          LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
          LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
          --LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME,NVL(LN_SUB_FIXED_LEAD_TIME,0));
          LN_SUB_FULL_LEAD_TIME  := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_FIXED_LEAD_TIME := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
          LN_SUB_VARIA_LEAD_TIME := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
        
          LN_TOTAL_PLAN_QTY   := LEAST(LN_SUB_TOTAL_QTY, LN_PLAN_QTY);
          LN_TOTAL_DEMAND_QTY := LN_TOTAL_PLAN_QTY;
        
          LN_PLAN_QTY := LN_PLAN_QTY - LN_TOTAL_PLAN_QTY;
          IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
            --写入减少原需求供应追溯
            --WRITE NEED
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'Y');
            --写入一条替代料的需求
            BEGIN
              SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
            
              LT_DEMAND_TEMP                                := NULL;
              LT_DEMAND_TEMP.ORDER_PRIORITY                 := P_DEMAND_DETAIL.ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_MAD                   := P_DEMAND_DETAIL.FORECAST_MAD;
              LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
              LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := P_DEMAND_DETAIL.SCHEDULE_DESIGNATOR_ID;
              LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_TOTAL_PLAN_QTY;
              LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE);
              LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
              LT_DEMAND_TEMP.ORIGINATION_TYPE               := 1; --计划单需求
              LT_DEMAND_TEMP.DEMAND_PRIORITY                := P_DEMAND_DETAIL.DEMAND_PRIORITY;
              LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := P_DEMAND_DETAIL.SALES_ORDER_PRIORITY;
              LT_DEMAND_TEMP.FORECAST_PRIORITY              := P_DEMAND_DETAIL.FORECAST_PRIORITY;
              LT_DEMAND_TEMP.PLANNING_GROUP                 := P_DEMAND_DETAIL.PLANNING_GROUP;
              LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := P_DEMAND_DETAIL.DAILY_DEMAND_RATE;
              LT_DEMAND_TEMP.UNIT_NUMBER                    := P_DEMAND_DETAIL.UNIT_NUMBER;
              LT_DEMAND_TEMP.DISPOSITION_ID                 := P_DEMAND_DETAIL.DISPOSITION_ID;
              LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := P_DEMAND_DETAIL.USING_ASSEMBLY_ITEM_ID;
              LT_DEMAND_TEMP.PLAN_ID                        := P_DEMAND_DETAIL.PLAN_ID;
              LT_DEMAND_TEMP.ORGANIZATION_ID                := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
              LT_DEMAND_TEMP.PROJECT_ID                     := P_DEMAND_DETAIL.PROJECT_ID;
              LT_DEMAND_TEMP.TASK_ID                        := P_DEMAND_DETAIL.TASK_ID;
              LT_DEMAND_TEMP.CUSTOMER_ID                    := P_DEMAND_DETAIL.CUSTOMER_ID;
              LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := P_DEMAND_DETAIL.CUSTOMER_SITE_ID;
              LT_DEMAND_TEMP.SR_INSTANCE_ID                 := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := P_DEMAND_DETAIL.SHIP_TO_SITE_ID;
              LT_DEMAND_TEMP.PROMISE_DATE                   := P_DEMAND_DETAIL.PROMISE_DATE;
              LT_DEMAND_TEMP.SELLING_PRICE                  := P_DEMAND_DETAIL.SELLING_PRICE;
              LT_DEMAND_TEMP.DMD_LATENESS_COST              := P_DEMAND_DETAIL.DMD_LATENESS_COST;
              LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := P_DEMAND_DETAIL.DMD_SATISFIED_DATE;
              LT_DEMAND_TEMP.OP_SEQ_NUM                     := P_DEMAND_DETAIL.OP_SEQ_NUM;
              LT_DEMAND_TEMP.UPDATED                        := P_DEMAND_DETAIL.UPDATED;
              LT_DEMAND_TEMP.STATUS                         := P_DEMAND_DETAIL.STATUS;
              LT_DEMAND_TEMP.APPLIED                        := P_DEMAND_DETAIL.APPLIED;
              LT_DEMAND_TEMP.DEMAND_CLASS                   := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_DEMAND_TEMP.FIRM_QUANTITY                  := P_DEMAND_DETAIL.FIRM_QUANTITY;
              LT_DEMAND_TEMP.FIRM_DATE                      := P_DEMAND_DETAIL.FIRM_DATE;
              LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := P_DEMAND_DETAIL.OLD_DEMAND_QUANTITY;
              LT_DEMAND_TEMP.OLD_DEMAND_DATE                := P_DEMAND_DETAIL.OLD_DEMAND_DATE;
              LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := P_DEMAND_DETAIL.SOURCE_ORGANIZATION_ID;
              LT_DEMAND_TEMP.RESERVATION_ID                 := P_DEMAND_DETAIL.RESERVATION_ID;
              LT_DEMAND_TEMP.PARENT_ID                      := P_DEMAND_DETAIL.PARENT_ID;
              LT_DEMAND_TEMP.LENDING_PROJECT_ID             := P_DEMAND_DETAIL.LENDING_PROJECT_ID;
              LT_DEMAND_TEMP.LENDING_TASK_ID                := P_DEMAND_DETAIL.LENDING_TASK_ID;
              LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
              LT_DEMAND_TEMP.ORDER_NUMBER                   := P_DEMAND_DETAIL.ORDER_NUMBER;
              LT_DEMAND_TEMP.RESERVED_QUANTITY              := P_DEMAND_DETAIL.RESERVED_QUANTITY;
              LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
              LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
              LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
              LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
              LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
              LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
              LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
              LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := P_DEMAND_DETAIL.ATTRIBUTE_CATEGORY;
              LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
              LT_DEMAND_TEMP.ATTRIBUTE2                     := P_DEMAND_DETAIL.ATTRIBUTE2;
              LT_DEMAND_TEMP.ATTRIBUTE3                     := P_DEMAND_DETAIL.ATTRIBUTE3;
              LT_DEMAND_TEMP.ATTRIBUTE4                     := P_DEMAND_DETAIL.ATTRIBUTE4;
              LT_DEMAND_TEMP.ATTRIBUTE5                     := P_DEMAND_DETAIL.ATTRIBUTE5;
              LT_DEMAND_TEMP.ATTRIBUTE6                     := P_DEMAND_DETAIL.ATTRIBUTE6;
              LT_DEMAND_TEMP.ATTRIBUTE7                     := P_DEMAND_DETAIL.ATTRIBUTE7;
              LT_DEMAND_TEMP.ATTRIBUTE8                     := P_DEMAND_DETAIL.ATTRIBUTE8;
              LT_DEMAND_TEMP.ATTRIBUTE9                     := P_DEMAND_DETAIL.ATTRIBUTE9;
              LT_DEMAND_TEMP.ATTRIBUTE10                    := P_DEMAND_DETAIL.ATTRIBUTE10;
              LT_DEMAND_TEMP.ATTRIBUTE11                    := P_DEMAND_DETAIL.ATTRIBUTE11;
              LT_DEMAND_TEMP.ATTRIBUTE12                    := P_DEMAND_DETAIL.ATTRIBUTE12;
              LT_DEMAND_TEMP.ATTRIBUTE13                    := P_DEMAND_DETAIL.ATTRIBUTE13;
              LT_DEMAND_TEMP.ATTRIBUTE14                    := P_DEMAND_DETAIL.ATTRIBUTE14;
              LT_DEMAND_TEMP.ATTRIBUTE15                    := P_DEMAND_DETAIL.ATTRIBUTE15;
              LT_DEMAND_TEMP.WIP_ENTITY_ID                  := P_DEMAND_DETAIL.WIP_ENTITY_ID;
              LT_DEMAND_TEMP.ISSUED_QUANTITY                := P_DEMAND_DETAIL.ISSUED_QUANTITY;
              LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := P_DEMAND_DETAIL.REPETITIVE_SCHEDULE_ID;
              LT_DEMAND_TEMP.REFRESH_NUMBER                 := P_DEMAND_DETAIL.REFRESH_NUMBER;
              LT_DEMAND_TEMP.REQUEST_DATE                   := P_DEMAND_DETAIL.REQUEST_DATE;
              LT_DEMAND_TEMP.WIP_STATUS_CODE                := P_DEMAND_DETAIL.WIP_STATUS_CODE;
              LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := P_DEMAND_DETAIL.WIP_SUPPLY_TYPE;
              LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := P_DEMAND_DETAIL.SOURCE_ORG_INSTANCE_ID;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := P_DEMAND_DETAIL.SALES_ORDER_LINE_ID;
              LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := P_DEMAND_DETAIL.CONFIDENCE_PERCENTAGE;
              LT_DEMAND_TEMP.BUCKET_TYPE                    := P_DEMAND_DETAIL.BUCKET_TYPE;
              LT_DEMAND_TEMP.BILL_ID                        := P_DEMAND_DETAIL.BILL_ID;
              LT_DEMAND_TEMP.PROBABILITY                    := P_DEMAND_DETAIL.PROBABILITY;
              LT_DEMAND_TEMP.FORECAST_SET_ID                := P_DEMAND_DETAIL.FORECAST_SET_ID;
              LT_DEMAND_TEMP.GROUP_ID                       := P_DEMAND_DETAIL.GROUP_ID;
              LT_DEMAND_TEMP.SERVICE_LEVEL                  := P_DEMAND_DETAIL.SERVICE_LEVEL;
              LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := P_DEMAND_DETAIL.QUANTITY_BY_DUE_DATE;
              LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := P_DEMAND_DETAIL.TARGET_SAFETY_STOCK;
              LT_DEMAND_TEMP.SCENARIO_SET                   := P_DEMAND_DETAIL.SCENARIO_SET;
              LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := P_DEMAND_DETAIL.DEMAND_SOURCE_TYPE;
              LT_DEMAND_TEMP.SUPPLY_ID                      := P_DEMAND_DETAIL.SUPPLY_ID;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_REFERENCE;
              LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := P_DEMAND_DETAIL.ORIGINAL_SYSTEM_LINE_REFERENCE;
              LT_DEMAND_TEMP.STOLEN_FLAG                    := P_DEMAND_DETAIL.STOLEN_FLAG;
              LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := P_DEMAND_DETAIL.OLD_USING_REQUIREMENT_QUANTITY;
              LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := P_DEMAND_DETAIL.OLD_USING_ASSEMBLY_DEMAND_DATE;
              LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := P_DEMAND_DETAIL.OLD_ASSEMBLY_DEMAND_COMP_DATE;
              LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := P_DEMAND_DETAIL.CUMMULATIVE_PROBABILITY;
              LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := P_DEMAND_DETAIL.ORIGINAL_ITEM_ID;
              LT_DEMAND_TEMP.UNMET_QUANTITY                 := P_DEMAND_DETAIL.UNMET_QUANTITY;
              LT_DEMAND_TEMP.RECORD_SOURCE                  := P_DEMAND_DETAIL.RECORD_SOURCE;
              LT_DEMAND_TEMP.LINK_TO_LINE_ID                := P_DEMAND_DETAIL.LINK_TO_LINE_ID;
              LT_DEMAND_TEMP.ERROR_TYPE                     := P_DEMAND_DETAIL.ERROR_TYPE;
              LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := P_DEMAND_DETAIL.ATP_SYNCHRONIZATION_FLAG;
              LT_DEMAND_TEMP.COMP_SEQ_ID                    := P_DEMAND_DETAIL.COMP_SEQ_ID;
              LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := P_DEMAND_DETAIL.QUANTITY_PER_ASSEMBLY;
              LT_DEMAND_TEMP.RELEASE_STATUS                 := P_DEMAND_DETAIL.RELEASE_STATUS;
              LT_DEMAND_TEMP.RESCHEDULE_FLAG                := P_DEMAND_DETAIL.RESCHEDULE_FLAG;
              LT_DEMAND_TEMP.LOAD_TYPE                      := P_DEMAND_DETAIL.LOAD_TYPE;
              LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := P_DEMAND_DETAIL.IMPLEMENT_ORG_ID;
              LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := P_DEMAND_DETAIL.IMPLEMENT_INSTANCE_ID;
              LT_DEMAND_TEMP.IMPLEMENT_DATE                 := P_DEMAND_DETAIL.IMPLEMENT_DATE;
              LT_DEMAND_TEMP.RELEASE_ERRORS                 := P_DEMAND_DETAIL.RELEASE_ERRORS;
              LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := P_DEMAND_DETAIL.ORG_FIRM_FLAG;
              LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := P_DEMAND_DETAIL.ORIGINAL_ORG_ID;
              LT_DEMAND_TEMP.ORIGINAL_INST_ID               := P_DEMAND_DETAIL.ORIGINAL_INST_ID;
              LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := P_DEMAND_DETAIL.ARRIVAL_SET_ID;
              LT_DEMAND_TEMP.SHIP_SET_ID                    := P_DEMAND_DETAIL.SHIP_SET_ID;
              LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := P_DEMAND_DETAIL.ORDER_DATE_TYPE_CODE;
              LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := P_DEMAND_DETAIL.SCHEDULE_ARRIVAL_DATE;
              LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := P_DEMAND_DETAIL.LATEST_ACCEPTABLE_DATE;
              LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := P_DEMAND_DETAIL.SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := P_DEMAND_DETAIL.PLANNED_ARRIVAL_DATE;
              LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := P_DEMAND_DETAIL.REQUEST_SHIP_DATE;
              LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := P_DEMAND_DETAIL.PROMISE_SHIP_DATE;
              LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := P_DEMAND_DETAIL.SCHEDULE_SHIP_DATE;
              LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := P_DEMAND_DETAIL.ORIGINAL_DEMAND_ID;
              LT_DEMAND_TEMP.ZONE_ID                        := P_DEMAND_DETAIL.ZONE_ID;
              LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := P_DEMAND_DETAIL.ORIG_SHIPPING_METHOD_CODE;
              LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := P_DEMAND_DETAIL.INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := P_DEMAND_DETAIL.ORIG_INTRANSIT_LEAD_TIME;
              LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := P_DEMAND_DETAIL.ATP_OVERRIDE_FLAG;
              LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := P_DEMAND_DETAIL.IMPLEMENT_FIRM;
              LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := P_DEMAND_DETAIL.IMPLEMENT_EARLIEST_DATE;
              LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := P_DEMAND_DETAIL.IMPLEMENT_ARRIVAL_DATE;
              LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := P_DEMAND_DETAIL.UNBUCKETED_DEMAND_DATE;
              LT_DEMAND_TEMP.ATO_LINE_ID                    := P_DEMAND_DETAIL.ATO_LINE_ID;
              LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := P_DEMAND_DETAIL.TOP_MODEL_LINE_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := P_DEMAND_DETAIL.PARENT_MODEL_LINE_ID;
              LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := P_DEMAND_DETAIL.STD_MANDATORY_COMP_FLAG;
              LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := P_DEMAND_DETAIL.OLD_REFRESH_NUMBER;
              LT_DEMAND_TEMP.SHIP_METHOD                    := P_DEMAND_DETAIL.SHIP_METHOD;
              LT_DEMAND_TEMP.SHIP_CALENDAR                  := P_DEMAND_DETAIL.SHIP_CALENDAR;
              LT_DEMAND_TEMP.RECEIVING_CALENDAR             := P_DEMAND_DETAIL.RECEIVING_CALENDAR;
              LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := P_DEMAND_DETAIL.INTRANSIT_CALENDAR;
              LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := P_DEMAND_DETAIL.SHIP_TO_LOCATION_ID;
              LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := P_DEMAND_DETAIL.ORIGINAL_QUANTITY;
              LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := P_DEMAND_DETAIL.FINAL_USE_PRIORITY;
              LT_DEMAND_TEMP.FINAL_USE_DATE                 := P_DEMAND_DETAIL.FINAL_USE_DATE;
              LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := P_DEMAND_DETAIL.ARRIVAL_SET_NAME;
              LT_DEMAND_TEMP.SHIP_SET_NAME                  := P_DEMAND_DETAIL.SHIP_SET_NAME;
              LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := P_DEMAND_DETAIL.SOURCE_PHANTOM_ID;
              LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := P_DEMAND_DETAIL.PRIMARY_COMPONENT_ID;
              LT_DEMAND_TEMP.ATP_SESSION_ID                 := P_DEMAND_DETAIL.ATP_SESSION_ID;
              LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := P_DEMAND_DETAIL.IMPLEMENT_SHIP_DATE;
              LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := P_DEMAND_DETAIL.PLANNED_SHIP_DATE;
              LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := P_DEMAND_DETAIL.PRIOR_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := P_DEMAND_DETAIL.MANUAL_ALLOCATION_QTY;
              LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := P_DEMAND_DETAIL.MANUAL_ALLOCATION_DATE;
              LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := P_DEMAND_DETAIL.FIRM_ALLOCATION_FLAG;
              LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := P_DEMAND_DETAIL.ASSET_SERIAL_NUMBER;
              LT_DEMAND_TEMP.ASSET_ITEM_ID                  := P_DEMAND_DETAIL.ASSET_ITEM_ID;
              LT_DEMAND_TEMP.EXPIRATION_DATE                := P_DEMAND_DETAIL.EXPIRATION_DATE;
              LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := P_DEMAND_DETAIL.SALES_ORDER_LINE_SPLIT;
              LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := P_DEMAND_DETAIL.PLANNED_INBOUND_DUE_DATE;
              LT_DEMAND_TEMP.FILL_KILL_FLAG                 := P_DEMAND_DETAIL.FILL_KILL_FLAG;
              LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := P_DEMAND_DETAIL.DEFINITION_LEVEL_USED;
              LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := P_DEMAND_DETAIL.DEMAND_FULFILLMENT_LEAD_TIME;
              LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := P_DEMAND_DETAIL.COMPONENT_SCALING_TYPE;
              LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := P_DEMAND_DETAIL.COMPONENT_YIELD_FACTOR;
              LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := P_DEMAND_DETAIL.SPLIT_FROM_DEMAND_ID;
              LT_DEMAND_TEMP.PREV_SUBST_ITEM                := P_DEMAND_DETAIL.PREV_SUBST_ITEM;
              LT_DEMAND_TEMP.PREV_SUBST_ORG                 := P_DEMAND_DETAIL.PREV_SUBST_ORG;
              LT_DEMAND_TEMP.ITEM_TYPE_ID                   := P_DEMAND_DETAIL.ITEM_TYPE_ID;
              LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := P_DEMAND_DETAIL.ITEM_TYPE_VALUE;
              LT_DEMAND_TEMP.REPAIR_LINE_ID                 := P_DEMAND_DETAIL.REPAIR_LINE_ID;
              LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := P_DEMAND_DETAIL.OTM_ARRIVAL_DATE;
              LT_DEMAND_TEMP.WIP_ENTITY_NAME                := P_DEMAND_DETAIL.WIP_ENTITY_NAME;
              LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := P_DEMAND_DETAIL.MIN_REM_SHELF_LIFE_DAYS;
              LT_DEMAND_TEMP.REVISED_DMD_DATE               := P_DEMAND_DETAIL.REVISED_DMD_DATE;
              LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := P_DEMAND_DETAIL.REVISED_DMD_PRIORITY;
              LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := P_DEMAND_DETAIL.TOP_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := P_DEMAND_DETAIL.PARENT_MODEL_ITEM_ID;
              LT_DEMAND_TEMP.DAYS_LATE                      := P_DEMAND_DETAIL.DAYS_LATE;
              LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := P_DEMAND_DETAIL.ORIG_FIRM_DATE;
              LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := P_DEMAND_DETAIL.ORIG_FIRM_QUANTITY;
              LT_DEMAND_TEMP.OBJECT_TYPE                    := P_DEMAND_DETAIL.OBJECT_TYPE;
              LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := P_DEMAND_DETAIL.MAINTENANCE_OBJECT_SOURCE;
              LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
              INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
            
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MD',
                    '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
              
            END;
          
          ELSE
            BEGIN
              SELECT ALLOCATED_QUANTITY
                INTO LN_TOTAL_DEMAND_QTY
                FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD
               WHERE CMD.PLAN_ID = P_PLAN_ID
                 AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD.PEGGING_ID = P_DEMAND_DETAIL.PEGGING_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                LN_TOTAL_DEMAND_QTY := 0;
            END;
            p_change_pegging(p_plan_id        => P_PLAN_ID,
                             p_sr_instance_id => P_SR_INSTANCE_ID,
                             p_pegging_id     => P_DEMAND_DETAIL.PEGGING_ID,
                             p_chang_qty      => LN_TOTAL_PLAN_QTY,
                             P_ORGI_USAGE     =>  LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                             p_flag           => 'N');
            LN_DEMAND_ID := P_DEMAND_DETAIL.DEMAND_ID;
          END IF;
        
          --冲减现有量
          FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID,
                                           P_DEMAND_DETAIL.ORGANIZATION_ID,
                                           LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
            LN_USED_QTY := 0;
            IF LR_SUPPLY_OH.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
              LN_USED_QTY := LN_TOTAL_PLAN_QTY;
            
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                 SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
            
              --LN_PLAN_QTY := 0;
            ELSE
            
              LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
            
              --更新供应的结余数量
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
            
              --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
            END IF;
          
            LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
          
            IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
              --写入供应数据
              BEGIN
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                LV_SUPPLIES_TEMP                   := NULL;
                LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
              
                LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME); --重新计算
                LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME);
                LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                             LN_SUB_POST_LEAD_TIME -
                                                                             LN_SUB_FULL_LEAD_TIME -
                                                                             LN_SUB_PREPROCE_LEAD_TIME);
              
                LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                LV_SUPPLIES_TEMP.UPDATED                 := 2;
                LV_SUPPLIES_TEMP.STATUS                  := 0;
                LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
                
              END;
            
              UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                 SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
               WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
            
            ELSE
              LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
            
            END IF;
          
            --写入PEGGING数据
            BEGIN
              SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
            
              LT_PEGGING_TEMP                        := NULL;
              LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
              LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
              LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
              LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
              LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
              LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
              LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
              LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
              LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
              LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
              LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
              LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
              LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
              LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
              LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
              LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
              LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
              LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
              LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
              LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
              LT_PEGGING_TEMP.UPDATED                := 0;
              LT_PEGGING_TEMP.STATUS                 := 2;
              LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
              LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
              LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
              LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
              LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
              LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
              LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
              LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
              INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
            
            EXCEPTION
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MFP',
                    '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                    dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
              
                LV_ERROR_CODE := 2;
                RAISE LE_EXCEPTION;
              
            END;
          
            IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
              INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
              VALUES
                (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
              INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                (WIP_ENTITY_ID,
                 SEQUENCE_ID,
                 TRANSACTION_ID,
                 INVENTORY_ITEM_ID,
                 ORDER_TYPE,
                 SUPPLY_DATE,
                 SUPPLY_QTY,
                 SUPPLY_ROW_ID,
                 REMAIN_QTY,
                 DEMAND_ID,
                 DEMAND_QTY,
                 DEMAND_DATE)
              VALUES
                (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                 CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                 LN_TRANSACTION_ID,
                 P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                 LR_SUPPLY_OH.order_type,
                 GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                 LR_SUPPLY_OH.NEW_ORDER_QUANTITY,
                 LR_SUPPLY_OH.ROW_ID,
                 LN_USED_QTY,
                 LN_DEMAND_ID,
                 LN_TOTAL_DEMAND_QTY,
                 GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
            END IF;
            IF LN_TOTAL_PLAN_QTY <= 0 THEN
              EXIT;
            END IF;
          END LOOP;
        
          --若现有量不能满足需求则用工单的产出去满足需求
          IF LN_TOTAL_PLAN_QTY > 0 THEN
            --冲减对应的工单，按照工单的开工日期，工单ID排序
            FOR LR_SUPPLY_DJ IN GC_SUPPLY_DJ(P_SR_INSTANCE_ID,
                                             P_DEMAND_DETAIL.ORGANIZATION_ID,
                                             LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_DJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
              
                LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                --LN_PLAN_QTY := 0;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_DJ.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_DJ.REMAIN_QTY;
                --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_DJ.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
              END IF;
              LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
            
              --写入供应数据
              LV_INSERT_SUPPLY_FLAG := 'N';
              IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
                LV_INSERT_SUPPLY_FLAG := 'Y';
                SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
              
                --写入WIP处理表
                SELECT P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                  INTO LD_USING_ASSY_D_DATE
                  FROM DUAL;
                BEGIN
                  INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                  VALUES
                    (LR_SUPPLY_DJ.ROW_ID,
                     LR_SUPPLY_DJ.DISPOSITION_ID,
                     LN_TRANSACTION_ID,
                     GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                        TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || dbms_utility.format_error_backtrace() ||
                        CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                --写入WIP优先处理表
                BEGIN
                  INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                    (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                    SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                      FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                     WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                       AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                --更新工作单需求的ISSUED_QTY
                LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
              
                --更新实际ISSUED数量
                BEGIN
                  UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                     SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                   where 1 = 1
                     AND CMD.plan_id = -1
                     AND CMD.ORIGINATION_TYPE IN (2, 3)
                     and CMD.sr_instance_id = p_SR_INSTANCE_ID
                     AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
                --删除MPS与非标准工单提前写入写入部分
                IF LR_SUPPLY_DJ.order_type = 7 THEN
                
                  BEGIN
                    SELECT 'N', MFP.PEGGING_ID
                      INTO LV_WIP_PROCESS_FLAG, LN_RDJ_PEGGING_ID
                      FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
                     WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
                       AND MFP.PLAN_ID = P_PLAN_ID
                       AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
                       AND MFP.DEMAND_ID = -1;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LV_WIP_PROCESS_FLAG := 'Y';
                  END;
                
                  BEGIN
                    SELECT 'Y'
                      INTO LV_ONLY_PEGGING_FLAG
                      FROM CUX.CUX_MSC_RDJ_DELETE_T
                     WHERE WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID
                       AND ROWNUM = 1;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                      LV_ONLY_PEGGING_FLAG := 'N';
                  END;
                
                  IF LV_ONLY_PEGGING_FLAG = 'Y' THEN
                    UPDATE CUX.CUX_MSC_RDJ_DELETE_T
                       SET DELETE_FLAG = 'Y'
                     WHERE WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                  END IF;
                
                  IF LV_WIP_PROCESS_FLAG = 'N' THEN
                  
                    p_change_pegging(p_plan_id        => P_PLAN_ID,
                                     p_sr_instance_id => P_SR_INSTANCE_ID,
                                     p_pegging_id     => LN_RDJ_PEGGING_ID,
                                     p_chang_qty      => LR_SUPPLY_DJ.NEW_ORDER_QUANTITY,
                                     p_flag           => 'N');
                  
                    LV_INSERT_SUPPLY_FLAG := 'Y';
                  
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
                  
                    --写入WIP处理表
                    SELECT P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE - LN_SUB_POST_LEAD_TIME - LN_SUB_FIXED_LEAD_TIME
                      INTO LD_USING_ASSY_D_DATE
                      FROM DUAL;
                    BEGIN
                      INSERT INTO CUX.CUX_MSC_WIP_PROCESS_RANGE
                      VALUES
                        (LR_SUPPLY_DJ.ROW_ID,
                         LR_SUPPLY_DJ.DISPOSITION_ID,
                         LN_TRANSACTION_ID,
                         GET_ACTUAL_DATE(LD_USING_ASSY_D_DATE));
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT SUPPLIES WIP PROCESS RANGE 035 ' ||
                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    --写入WIP优先处理表
                    BEGIN
                      INSERT INTO CUX.CUX_MSC_WIP_ITEM_RANGE
                        (WIP_ENTITY_ID, INVENTORY_ITEM_ID, LEVEL_NUMBER)
                        SELECT LR_SUPPLY_DJ.DISPOSITION_ID, CMGL.INVENTORY_ITEM_ID, 1
                          FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ, CUX.CUX_MSC_GROUP_QTY_LINE CMGL
                         WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                           AND CMGQ.HEADER_ID = CMGL.HEADER_ID;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT WIP PROCESS ITEM RANGE 035 ' ||
                            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    --更新工作单需求的ISSUED_QTY
                    LN_COMPLETED_QTY := NVL(LR_SUPPLY_DJ.QTY_SCRAPPED, 0) + NVL(LR_SUPPLY_DJ.QTY_cOMPLETED, 0);
                    BEGIN
                      UPDATE CUX.CUX_MSC_DEMANDS_SJ_T CMD
                         SET CMD.ATTRIBUTE4 = CMD.ISSUED_QUANTITY - LN_COMPLETED_QTY * CMD.QUANTITY_PER_ASSEMBLY
                       where 1 = 1
                         AND CMD.plan_id = -1
                         AND CMD.ORIGINATION_TYPE IN (2, 3)
                         and CMD.sr_instance_id = p_SR_INSTANCE_ID
                         AND CMD.WIP_ENTITY_ID = LR_SUPPLY_DJ.DISPOSITION_ID;
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** UPDATE SUPPLIES ISSUED QTY 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                  END IF;
                
                END IF;
              
              END IF;
            
              IF LV_INSERT_SUPPLY_FLAG = 'Y' THEN
                BEGIN
                  LV_SUPPLIES_TEMP                           := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID                   := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID           := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
                  LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
                  LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.NEED_BY_DATE              := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                                LN_SUB_POST_LEAD_TIME -
                                                                                LN_SUB_FULL_LEAD_TIME -
                                                                                LN_SUB_PREPROCE_LEAD_TIME);
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
                  LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
                  LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
                  LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
                  LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
                  LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
                  LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
                  LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
                  LV_SUPPLIES_TEMP.UPDATED                   := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
                  LV_SUPPLIES_TEMP.STATUS                    := 0;
                  LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
                  LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
                  LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
                  LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
                  LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
                  LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT PCBA SUPPLIES 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
                
              END;
            
              BEGIN
                SELECT CMW.SUPPLY_DATE
                  INTO LD_USING_ASSY_D_DATE
                  FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW
                 WHERE CMW.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LD_USING_ASSY_D_DATE := TRUNC(SYSDATE);
              END;
            
              --Added below by V1.018
              IF LR_SUPPLY_DJ.order_type = 7 THEN
                LV_BOM_FLAG := 'N';
              ELSE
                LV_BOM_FLAG := 'Y';
              END IF;
              --Added above by V1.018
            
              --写入工作单需求及工作单，优先耗用相关的物料
              INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                                 P_PLAN_ID               => P_PLAN_ID,
                                 P_ORGANIZATION_ID       => P_DEMAND_DETAIL.ORGANIZATION_ID,
                                 P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                                 P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                                 P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                                 P_END_PEGGING_ID        => P_DEMAND_DETAIL.END_PEGGING_ID,
                                 P_ASSY_DEMAND_COMP_DATE => LD_USING_ASSY_D_DATE,
                                 P_ASSY_DEMAND_DATE      => LD_USING_ASSY_D_DATE,
                                 P_END_ORIGINATION_TYPE  => P_DEMAND_DETAIL.END_ORIGINATION_TYPE,
                                 P_LEVEL_FLAG            => 1,
                                 P_BOM_FLAG              => LV_BOM_FLAG, --Added by V1.018
                                 P_PRIOR_FLAG            => 'Y',
                                 P_ONLY_PEGGING_FLAG     => LV_ONLY_PEGGING_FLAG,
                                 P_PLAN_QTY              => LN_USED_QTY,
                                 P_ORGI_USAGE            => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                 P_D_COUNT               => LN_D_COUNT,
                                 P_S_COUNT               => LN_S_COUNT,
                                 P_P_COUNT               => LN_P_COUNT);
            
              IF LN_TOTAL_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
          --若工单的产出不能满足需求则用工单的副需求去满足
          IF LN_TOTAL_PLAN_QTY > 0 THEN
            --冲减对应的工单，按照工单的开工日期，工单ID排序
            FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                               P_DEMAND_DETAIL.ORGANIZATION_ID,
                                               LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
              LN_USED_QTY := 0;
              IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_TOTAL_PLAN_QTY THEN
                LN_USED_QTY := LN_TOTAL_PLAN_QTY;
                --LN_PLAN_QTY := 0;
              
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
              
              ELSE
              
                LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                --LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                --更新供应的结余数量
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
              END IF;
            
              LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
            
              IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
              
                --写入供应数据
                BEGIN
                  SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                  LV_SUPPLIES_TEMP                   := NULL;
                  LV_SUPPLIES_TEMP.PLAN_ID           := P_DEMAND_DETAIL.PLAN_ID;
                  LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                  LV_SUPPLIES_TEMP.ORGANIZATION_ID   := P_DEMAND_DETAIL.ORGANIZATION_ID;
                  LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                  LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := P_DEMAND_DETAIL.ASSEMBLY_DEMAND_COMP_DATE;
                
                  LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                  LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME); --重新计算
                  LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME);
                  LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE -
                                                                               LN_SUB_POST_LEAD_TIME -
                                                                               LN_SUB_FULL_LEAD_TIME -
                                                                               LN_SUB_PREPROCE_LEAD_TIME);
                
                  LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                  LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                  LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                  LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                  LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                  LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                  LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                  LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                  LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                  LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                  LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                  LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                  LV_SUPPLIES_TEMP.UPDATED                  := 2;
                  LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                  LV_SUPPLIES_TEMP.STATUS                   := 0;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                  LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                  LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                  LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                  LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                  LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                  LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                  LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                  LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                  LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                  INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MS',
                        '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                  
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                  
                END;
              
                UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                   SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                 WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
              
              ELSE
                LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
              
              END IF;
            
              --写入PEGGING数据
              BEGIN
                SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
              
                LT_PEGGING_TEMP                        := NULL;
                LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                LT_PEGGING_TEMP.END_ITEM_USAGE         := LR_ZR_SUB.ITEM_USAGE_QTY;
                LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE);
                LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := P_DEMAND_DETAIL.END_ORIGINATION_TYPE;
                LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                LT_PEGGING_TEMP.ORGANIZATION_ID        := P_DEMAND_DETAIL.ORGANIZATION_ID;
                LT_PEGGING_TEMP.PLAN_ID                := P_DEMAND_DETAIL.PLAN_ID;
                LT_PEGGING_TEMP.PREV_PEGGING_ID        := P_DEMAND_DETAIL.PREV_PEGGING_ID;
                LT_PEGGING_TEMP.END_PEGGING_ID         := P_DEMAND_DETAIL.END_PEGGING_ID;
                LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                LT_PEGGING_TEMP.PROJECT_ID             := P_DEMAND_DETAIL.PROJECT_ID;
                LT_PEGGING_TEMP.TASK_ID                := P_DEMAND_DETAIL.TASK_ID;
                LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_DEMAND_DETAIL.SR_INSTANCE_ID;
                LT_PEGGING_TEMP.DEMAND_CLASS           := P_DEMAND_DETAIL.DEMAND_CLASS;
                LT_PEGGING_TEMP.UPDATED                := 0;
                LT_PEGGING_TEMP.STATUS                 := 2;
                LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
              
              EXCEPTION
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MFP',
                      '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                      dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                
                  LV_ERROR_CODE := 2;
                  RAISE LE_EXCEPTION;
                
              END;
              IF NVL(LV_RDJ_FLAG, 'N') = 'Y' THEN
                INSERT INTO CUX.CUX_MSC_RDJ_DELETE_T
                  (WIP_ENTITY_ID, PEGGING_ID, DELETE_FLAG)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID, LN_PEGGING_ID, 'N');
                INSERT INTO CUX.CUX_MSC_RDJ_SUPPLIES_T
                  (WIP_ENTITY_ID,
                   SEQUENCE_ID,
                   TRANSACTION_ID,
                   INVENTORY_ITEM_ID,
                   ORDER_TYPE,
                   SUPPLY_DATE,
                   SUPPLY_QTY,
                   SUPPLY_ROW_ID,
                   REMAIN_QTY,
                   DEMAND_ID,
                   DEMAND_QTY,
                   DEMAND_DATE)
                VALUES
                  (P_DEMAND_DETAIL.WIP_ENTITY_ID,
                   CUX.CUX_MSC_RDJ_SUPPLIES_T_S.NEXTVAL,
                   LN_TRANSACTION_ID,
                   P_DEMAND_DETAIL.INVENTORY_ITEM_ID,
                   LR_SUPPLY_RDJ.order_type,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE),
                   LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY,
                   LR_SUPPLY_RDJ.ROW_ID,
                   LN_USED_QTY,
                   LN_DEMAND_ID,
                   LN_TOTAL_DEMAND_QTY,
                   GET_ACTUAL_DATE(P_DEMAND_DETAIL.USING_ASSEMBLY_DEMAND_DATE));
              END IF;
              IF LN_TOTAL_PLAN_QTY <= 0 THEN
                EXIT;
              END IF;
            
            END LOOP;
          END IF;
        
        END IF;
      
      --END IF;
      END LOOP;
      COMMIT;
      --未有替代跟主料供应部分去分配其下阶的采购件
      IF LN_RESIDUE_QTY > 0 THEN
        FOR LR_BUY IN LC_BUY(P_DEMAND_DETAIL.PEGGING_ID) LOOP
          /*DELETE CUX.CUX_MSC_GROUP_QTY_HEADER;
          DELETE CUX.CUX_MSC_GROUP_QTY_LINE;
          DELETE CUX.CUX_MSC_GROUP_QTY_DETAIL;*/
          /*TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_HEADER');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_LINE');
          TRUNC_TEMP_TABLE('CUX.CUX_MSC_GROUP_QTY_DETAIL');*/
          IF GV_LOG_FLAG = 'Y' THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** 错阶定义里SA但不定义在错阶下面AS的采购物料 000 DEMAND_ID ' || LR_BUY.DEMAND_ID);
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** 采购物料 000 DEMAND_DATE ' || LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***Note*** 采购物料 001 料号 ' ||
                GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_BUY.ORGANIZATION_ID, LR_BUY.INVENTORY_ITEM_ID));
          
            LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MS', '***Note*** 采购物料 002 总需分配数量 ' || LN_PLAN_QTY);
          
          END IF;
        
          FOR LR_ZR_SUB IN LC_BUY_SUB(LR_BUY.BILL_ID,
                                      LR_BUY.COMP_SEQ_ID,
                                      LR_BUY.INVENTORY_ITEM_ID,
                                      LR_BUY.ORGANIZATION_ID,
                                      LR_BUY.END_ITEM_USAGE) LOOP
          
            SELECT CUX.CUX_MSC_GROUP_QTY_HEADER_S.NEXTVAL INTO LN_CROSS_HEADER_ID FROM DUAL;
          
            INSERT INTO CUX.CUX_MSC_GROUP_QTY_HEADER
              (HEADER_ID, ORGANIZATION_ID, INVENTORY_ITEM_ID, ZIRAN_FLAG)
            VALUES
              (LN_CROSS_HEADER_ID, LR_BUY.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID, LR_ZR_SUB.ZR_SUB_FLAG);
          
          END LOOP;
        
          CALCULATE_GROUP_QTY(P_SR_INSTANCE_ID); --计算成套量
          IF GV_LOG_FLAG = 'Y' THEN
            FOR LR_FENPEI IN (SELECT * FROM CUX.CUX_MSC_GROUP_QTY_HEADER) LOOP
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 003 分配料号 ' ||
                  GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_FENPEI.ORGANIZATION_ID, LR_FENPEI.INVENTORY_ITEM_ID));
              SELECT DECODE(LR_FENPEI.ZIRAN_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
                INTO LV_SUB_ITEM_TYPE
                FROM DUAL;
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 003 料号类型 ' || LV_SUB_ITEM_TYPE);
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 004 库存数量齐套数 ' || NVL(LR_FENPEI.LEVEL1_QTY, 0));
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 005 在途数量齐套数 ' || NVL(LR_FENPEI.LEVEL2_QTY, 0));
            END LOOP;
          END IF;
          --计算自然替代跟普通替代 主料成套量不能满足部分
          --按照比例分配
          CALCULATE_GROUP_USED_QTY(P_PLAN_ID         => P_PLAN_ID,
                                   p_SR_INSTANCE_ID  => p_SR_INSTANCE_ID,
                                   P_ORGANIZATION_ID => LR_BUY.ORGANIZATION_ID,
                                   P_PLAN_QTY        => LR_BUY.ALLOCATED_QUANTITY,
                                   P_ALLOT_FLAG      => 'Y',
                                   PO_ERROR_CODE     => LV_ERROR_CODE);
          IF LV_ERROR_CODE = 2 THEN
            RAISE LE_EXCEPTION;
          END IF;
          IF GV_LOG_FLAG = 'Y' THEN
            FOR LR_FENPEI IN (SELECT INVENTORY_ITEM_ID,
                                     SUPPLIER_ID,
                                     SUPPLIER_SITE_ID,
                                     BID_NO,
                                     TOTAL_PLAN_QTY,
                                     BID_PERCENTAGE,
                                     FENPEI_QTY,
                                     ORIGINAL_PR_QTY,
                                     ACTUAL_QTY
                                FROM CUX.CUX_MSC_FENPEI_DETAIL) LOOP
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 007 物料 ' || Msc_GET_name.item_name(LR_FENPEI.INVENTORY_ITEM_ID));
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 008 供应商 ' || Msc_GET_name.supplier(LR_FENPEI.SUPPLIER_ID));
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 009 理想比例 ' || LR_FENPEI.BID_PERCENTAGE);
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 010 理想分配数量 ' || LR_FENPEI.FENPEI_QTY);
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 010 分配前总PR量 ' || LR_FENPEI.ORIGINAL_PR_QTY);
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 012 实际分配数量 ' || LR_FENPEI.ACTUAL_QTY);
            END LOOP;
          END IF;
          FOR LR_ZR_SUB IN LC_BUY_SUB(LR_BUY.BILL_ID,
                                      LR_BUY.COMP_SEQ_ID,
                                      LR_BUY.INVENTORY_ITEM_ID,
                                      LR_BUY.ORGANIZATION_ID,
                                      LR_BUY.END_ITEM_USAGE) LOOP
          
            --得到此替代料总的可用量
            BEGIN
              SELECT SUM(NVL(CMGQ.USED_QTY, 0))
                INTO LN_SUB_TOTAL_QTY
                FROM CUX.CUX_MSC_GROUP_QTY_HEADER CMGQ
               WHERE CMGQ.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                LN_SUB_TOTAL_QTY := 0;
              WHEN OTHERS THEN
                LOG(FND_GLOBAL.CONC_REQUEST_ID,
                    'INSERT_PLAN_MS',
                    '***ERROR*** 10012 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID || ' 出现错误: ' ||
                    CHR(10) || SQLERRM);
            END;
            IF GV_LOG_FLAG = 'Y' THEN
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 013 分配料号 ' ||
                  GET_ITEM_NAME(P_PLAN_ID, p_SR_INSTANCE_ID, LR_BUY.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID));
              SELECT DECODE(LR_ZR_SUB.ZR_SUB_FLAG, 'Y', '自然替代', 'M', '主料', '一般替代')
                INTO LV_SUB_ITEM_TYPE
                FROM DUAL;
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 014 料号类型 ' || LV_SUB_ITEM_TYPE);
            
              LOG(FND_GLOBAL.CONC_REQUEST_ID,
                  'INSERT_PLAN_MS',
                  '***Note*** 采购物料 015 总分配数量（含库存在途） ' || LN_SUB_TOTAL_QTY);
            END IF;
            IF NVL(LN_SUB_TOTAL_QTY, 0) > 0 THEN
            
              BEGIN
                SELECT MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
                       MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
                       MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
                       MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
                       MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME --变量
                  INTO LN_SUB_PREPROCE_LEAD_TIME,
                       LN_SUB_POST_LEAD_TIME,
                       LN_SUB_FULL_LEAD_TIME,
                       LN_SUB_FIXED_LEAD_TIME,
                       LN_SUB_VARIA_LEAD_TIME
                  FROM MSC_SYSTEM_ITEMS MSI
                 WHERE MSI.plan_id = P_PLAN_ID
                   AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                   AND MSI.ORGANIZATION_ID = LR_BUY.ORGANIZATION_ID
                   AND MSI.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_SUB_PREPROCE_LEAD_TIME := 0;
                  LN_SUB_POST_LEAD_TIME     := 0;
                  LN_SUB_FULL_LEAD_TIME     := 0;
                  LN_SUB_FIXED_LEAD_TIME    := 0;
                  LN_SUB_VARIA_LEAD_TIME    := 0;
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** 00002 ' || ' 出现错误: ' || CHR(10) || SQLERRM);
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** 10013 LR_ZR_SUB.SUBSTITUTE_ITEM_ID =' || LR_ZR_SUB.SUBSTITUTE_ITEM_ID || ' 出现错误: ' ||
                      CHR(10) || SQLERRM);
              END;
            
              LN_SUB_PREPROCE_LEAD_TIME := NVL(LN_SUB_PREPROCE_LEAD_TIME, 0);
              LN_SUB_POST_LEAD_TIME     := NVL(LN_SUB_POST_LEAD_TIME, 0);
              LN_SUB_FULL_LEAD_TIME     := NVL(LN_SUB_FULL_LEAD_TIME, 0);
              LN_SUB_FIXED_LEAD_TIME    := NVL(LN_SUB_FIXED_LEAD_TIME, 0);
              LN_SUB_VARIA_LEAD_TIME    := NVL(LN_SUB_VARIA_LEAD_TIME, 0);
            
              BEGIN
                SELECT CMF.END_ITEM_USAGE
                  INTO LN_USAGE_QTY
                  FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
                 WHERE PEGGING_ID = LR_BUY.PEGGING_ID
                   AND PLAN_ID = P_PLAN_ID
                   AND SR_INSTANCE_ID = P_SR_INSTANCE_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  LN_USAGE_QTY := NULL;
                  /*--Commented by V1.029
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** 00003 ' || ' 出现错误: ' || CHR(10) || SQLERRM);*/
                WHEN OTHERS THEN
                  LOG(FND_GLOBAL.CONC_REQUEST_ID,
                      'INSERT_PLAN_MS',
                      '***ERROR*** 10013 LR_BUY.PEGGING_ID =' || LR_BUY.PEGGING_ID || ' 出现错误: ' || CHR(10) || SQLERRM);
              END;
            
              LN_PLAN_QTY         := LN_SUB_TOTAL_QTY;
              LN_TOTAL_DEMAND_QTY := LN_PLAN_QTY;
            
              IF LR_ZR_SUB.SUB_ITEM_TYPE = 1 THEN
                --写入减少原需求供应追溯
                --WRITE NEED
                p_change_pegging(p_plan_id        => P_PLAN_ID,
                                 p_sr_instance_id => P_SR_INSTANCE_ID,
                                 p_pegging_id     => LR_BUY.PEGGING_ID,
                                 p_chang_qty      => LN_PLAN_QTY,
                                 P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                 p_flag           => 'Y');
                --写入一条PH第一层替代料的需求
                BEGIN
                  SELECT MSC_DEMANDS_S.NEXTVAL INTO LN_DEMAND_ID FROM DUAL;
                
                  LT_DEMAND_TEMP                                := NULL;
                  LT_DEMAND_TEMP.ORDER_PRIORITY                 := LR_BUY.ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_MAD                   := LR_BUY.FORECAST_MAD;
                  LT_DEMAND_TEMP.DEMAND_ID                      := LN_DEMAND_ID;
                  LT_DEMAND_TEMP.SCHEDULE_DESIGNATOR_ID         := LR_BUY.SCHEDULE_DESIGNATOR_ID;
                  LT_DEMAND_TEMP.USING_REQUIREMENT_QUANTITY     := LN_PLAN_QTY;
                  LT_DEMAND_TEMP.ASSEMBLY_DEMAND_COMP_DATE      := GET_ACTUAL_DATE(LR_BUY.ASSEMBLY_DEMAND_COMP_DATE);
                  LT_DEMAND_TEMP.USING_ASSEMBLY_DEMAND_DATE     := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                  LT_DEMAND_TEMP.DEMAND_TYPE                    := 1; --Discrete Demand
                  LT_DEMAND_TEMP.ORIGINATION_TYPE               := LR_BUY.ORIGINATION_TYPE; --1; --计划单需求
                  LT_DEMAND_TEMP.DEMAND_PRIORITY                := LR_BUY.DEMAND_PRIORITY;
                  LT_DEMAND_TEMP.SALES_ORDER_PRIORITY           := LR_BUY.SALES_ORDER_PRIORITY;
                  LT_DEMAND_TEMP.FORECAST_PRIORITY              := LR_BUY.FORECAST_PRIORITY;
                  LT_DEMAND_TEMP.PLANNING_GROUP                 := LR_BUY.PLANNING_GROUP;
                  LT_DEMAND_TEMP.DAILY_DEMAND_RATE              := LR_BUY.DAILY_DEMAND_RATE;
                  LT_DEMAND_TEMP.UNIT_NUMBER                    := LR_BUY.UNIT_NUMBER;
                  LT_DEMAND_TEMP.DISPOSITION_ID                 := LR_BUY.DISPOSITION_ID;
                  LT_DEMAND_TEMP.USING_ASSEMBLY_ITEM_ID         := LR_BUY.USING_ASSEMBLY_ITEM_ID;
                  LT_DEMAND_TEMP.PLAN_ID                        := LR_BUY.PLAN_ID;
                  LT_DEMAND_TEMP.ORGANIZATION_ID                := LR_BUY.ORGANIZATION_ID;
                  LT_DEMAND_TEMP.INVENTORY_ITEM_ID              := LR_ZR_SUB.SUBSTITUTE_ITEM_ID; --替代料ID
                  LT_DEMAND_TEMP.PROJECT_ID                     := LR_BUY.PROJECT_ID;
                  LT_DEMAND_TEMP.TASK_ID                        := LR_BUY.TASK_ID;
                  LT_DEMAND_TEMP.CUSTOMER_ID                    := LR_BUY.CUSTOMER_ID;
                  LT_DEMAND_TEMP.CUSTOMER_SITE_ID               := LR_BUY.CUSTOMER_SITE_ID;
                  LT_DEMAND_TEMP.SR_INSTANCE_ID                 := LR_BUY.SR_INSTANCE_ID;
                  LT_DEMAND_TEMP.SHIP_TO_SITE_ID                := LR_BUY.SHIP_TO_SITE_ID;
                  LT_DEMAND_TEMP.PROMISE_DATE                   := LR_BUY.PROMISE_DATE;
                  LT_DEMAND_TEMP.SELLING_PRICE                  := LR_BUY.SELLING_PRICE;
                  LT_DEMAND_TEMP.DMD_LATENESS_COST              := LR_BUY.DMD_LATENESS_COST;
                  LT_DEMAND_TEMP.DMD_SATISFIED_DATE             := LR_BUY.DMD_SATISFIED_DATE;
                  LT_DEMAND_TEMP.OP_SEQ_NUM                     := LR_BUY.OP_SEQ_NUM;
                  LT_DEMAND_TEMP.UPDATED                        := LR_BUY.UPDATED;
                  LT_DEMAND_TEMP.STATUS                         := LR_BUY.STATUS;
                  LT_DEMAND_TEMP.APPLIED                        := LR_BUY.APPLIED;
                  LT_DEMAND_TEMP.DEMAND_CLASS                   := LR_BUY.DEMAND_CLASS;
                  LT_DEMAND_TEMP.FIRM_QUANTITY                  := LR_BUY.FIRM_QUANTITY;
                  LT_DEMAND_TEMP.FIRM_DATE                      := LR_BUY.FIRM_DATE;
                  LT_DEMAND_TEMP.OLD_DEMAND_QUANTITY            := LR_BUY.OLD_DEMAND_QUANTITY;
                  LT_DEMAND_TEMP.OLD_DEMAND_DATE                := LR_BUY.OLD_DEMAND_DATE;
                  LT_DEMAND_TEMP.SOURCE_ORGANIZATION_ID         := LR_BUY.SOURCE_ORGANIZATION_ID;
                  LT_DEMAND_TEMP.RESERVATION_ID                 := LR_BUY.RESERVATION_ID;
                  LT_DEMAND_TEMP.PARENT_ID                      := LR_BUY.PARENT_ID;
                  LT_DEMAND_TEMP.LENDING_PROJECT_ID             := LR_BUY.LENDING_PROJECT_ID;
                  LT_DEMAND_TEMP.LENDING_TASK_ID                := LR_BUY.LENDING_TASK_ID;
                  LT_DEMAND_TEMP.SUBST_ITEM_FLAG                := LR_ZR_SUB.SUB_ITEM_TYPE; --替代料标记
                  LT_DEMAND_TEMP.ORDER_NUMBER                   := LR_BUY.ORDER_NUMBER;
                  LT_DEMAND_TEMP.RESERVED_QUANTITY              := LR_BUY.RESERVED_QUANTITY;
                  LT_DEMAND_TEMP.LAST_UPDATE_DATE               := SYSDATE;
                  LT_DEMAND_TEMP.LAST_UPDATED_BY                := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.CREATION_DATE                  := SYSDATE;
                  LT_DEMAND_TEMP.CREATED_BY                     := FND_GLOBAL.USER_ID;
                  LT_DEMAND_TEMP.LAST_UPDATE_LOGIN              := FND_GLOBAL.LOGIN_ID;
                  LT_DEMAND_TEMP.REQUEST_ID                     := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_DEMAND_TEMP.PROGRAM_APPLICATION_ID         := FND_GLOBAL.PROG_APPL_ID;
                  LT_DEMAND_TEMP.PROGRAM_ID                     := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_DEMAND_TEMP.PROGRAM_UPDATE_DATE            := SYSDATE;
                  LT_DEMAND_TEMP.ATTRIBUTE_CATEGORY             := LR_BUY.ATTRIBUTE_CATEGORY;
                  LT_DEMAND_TEMP.ATTRIBUTE1                     := 'I';
                  LT_DEMAND_TEMP.ATTRIBUTE2                     := LR_BUY.ATTRIBUTE2;
                  LT_DEMAND_TEMP.ATTRIBUTE3                     := LR_BUY.ATTRIBUTE3;
                  LT_DEMAND_TEMP.ATTRIBUTE4                     := LR_BUY.ATTRIBUTE4;
                  LT_DEMAND_TEMP.ATTRIBUTE5                     := LR_BUY.ATTRIBUTE5;
                  LT_DEMAND_TEMP.ATTRIBUTE6                     := LR_BUY.ATTRIBUTE6;
                  LT_DEMAND_TEMP.ATTRIBUTE7                     := LR_BUY.ATTRIBUTE7;
                  LT_DEMAND_TEMP.ATTRIBUTE8                     := LR_BUY.ATTRIBUTE8;
                  LT_DEMAND_TEMP.ATTRIBUTE9                     := LR_BUY.ATTRIBUTE9;
                  LT_DEMAND_TEMP.ATTRIBUTE10                    := LR_BUY.ATTRIBUTE10;
                  LT_DEMAND_TEMP.ATTRIBUTE11                    := LR_BUY.ATTRIBUTE11;
                  LT_DEMAND_TEMP.ATTRIBUTE12                    := LR_BUY.ATTRIBUTE12;
                  LT_DEMAND_TEMP.ATTRIBUTE13                    := LR_BUY.ATTRIBUTE13;
                  LT_DEMAND_TEMP.ATTRIBUTE14                    := LR_BUY.ATTRIBUTE14;
                  LT_DEMAND_TEMP.ATTRIBUTE15                    := LR_BUY.ATTRIBUTE15;
                  LT_DEMAND_TEMP.WIP_ENTITY_ID                  := LR_BUY.WIP_ENTITY_ID;
                  LT_DEMAND_TEMP.ISSUED_QUANTITY                := LR_BUY.ISSUED_QUANTITY;
                  LT_DEMAND_TEMP.REPETITIVE_SCHEDULE_ID         := LR_BUY.REPETITIVE_SCHEDULE_ID;
                  LT_DEMAND_TEMP.REFRESH_NUMBER                 := LR_BUY.REFRESH_NUMBER;
                  LT_DEMAND_TEMP.REQUEST_DATE                   := LR_BUY.REQUEST_DATE;
                  LT_DEMAND_TEMP.WIP_STATUS_CODE                := LR_BUY.WIP_STATUS_CODE;
                  LT_DEMAND_TEMP.WIP_SUPPLY_TYPE                := LR_BUY.WIP_SUPPLY_TYPE;
                  LT_DEMAND_TEMP.SOURCE_ORG_INSTANCE_ID         := LR_BUY.SOURCE_ORG_INSTANCE_ID;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_ID            := LR_BUY.SALES_ORDER_LINE_ID;
                  LT_DEMAND_TEMP.CONFIDENCE_PERCENTAGE          := LR_BUY.CONFIDENCE_PERCENTAGE;
                  LT_DEMAND_TEMP.BUCKET_TYPE                    := LR_BUY.BUCKET_TYPE;
                  LT_DEMAND_TEMP.BILL_ID                        := LR_BUY.BILL_ID;
                  LT_DEMAND_TEMP.PROBABILITY                    := LR_BUY.PROBABILITY;
                  LT_DEMAND_TEMP.FORECAST_SET_ID                := LR_BUY.FORECAST_SET_ID;
                  LT_DEMAND_TEMP.GROUP_ID                       := LR_BUY.GROUP_ID;
                  LT_DEMAND_TEMP.SERVICE_LEVEL                  := LR_BUY.SERVICE_LEVEL;
                  LT_DEMAND_TEMP.QUANTITY_BY_DUE_DATE           := LR_BUY.QUANTITY_BY_DUE_DATE;
                  LT_DEMAND_TEMP.TARGET_SAFETY_STOCK            := LR_BUY.TARGET_SAFETY_STOCK;
                  LT_DEMAND_TEMP.SCENARIO_SET                   := LR_BUY.SCENARIO_SET;
                  LT_DEMAND_TEMP.DEMAND_SOURCE_TYPE             := LR_BUY.DEMAND_SOURCE_TYPE;
                  LT_DEMAND_TEMP.SUPPLY_ID                      := LR_BUY.SUPPLY_ID;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_REFERENCE      := LR_BUY.ORIGINAL_SYSTEM_REFERENCE;
                  LT_DEMAND_TEMP.ORIGINAL_SYSTEM_LINE_REFERENCE := LR_BUY.ORIGINAL_SYSTEM_LINE_REFERENCE;
                  LT_DEMAND_TEMP.STOLEN_FLAG                    := LR_BUY.STOLEN_FLAG;
                  LT_DEMAND_TEMP.OLD_USING_REQUIREMENT_QUANTITY := LR_BUY.OLD_USING_REQUIREMENT_QUANTITY;
                  LT_DEMAND_TEMP.OLD_USING_ASSEMBLY_DEMAND_DATE := LR_BUY.OLD_USING_ASSEMBLY_DEMAND_DATE;
                  LT_DEMAND_TEMP.OLD_ASSEMBLY_DEMAND_COMP_DATE  := LR_BUY.OLD_ASSEMBLY_DEMAND_COMP_DATE;
                  LT_DEMAND_TEMP.CUMMULATIVE_PROBABILITY        := LR_BUY.CUMMULATIVE_PROBABILITY;
                  LT_DEMAND_TEMP.ORIGINAL_ITEM_ID               := LR_BUY.ORIGINAL_ITEM_ID;
                  LT_DEMAND_TEMP.UNMET_QUANTITY                 := LR_BUY.UNMET_QUANTITY;
                  LT_DEMAND_TEMP.RECORD_SOURCE                  := LR_BUY.RECORD_SOURCE;
                  LT_DEMAND_TEMP.LINK_TO_LINE_ID                := LR_BUY.LINK_TO_LINE_ID;
                  LT_DEMAND_TEMP.ERROR_TYPE                     := LR_BUY.ERROR_TYPE;
                  LT_DEMAND_TEMP.ATP_SYNCHRONIZATION_FLAG       := LR_BUY.ATP_SYNCHRONIZATION_FLAG;
                  LT_DEMAND_TEMP.COMP_SEQ_ID                    := LR_BUY.COMP_SEQ_ID;
                  LT_DEMAND_TEMP.QUANTITY_PER_ASSEMBLY          := LR_BUY.QUANTITY_PER_ASSEMBLY;
                  LT_DEMAND_TEMP.RELEASE_STATUS                 := LR_BUY.RELEASE_STATUS;
                  LT_DEMAND_TEMP.RESCHEDULE_FLAG                := LR_BUY.RESCHEDULE_FLAG;
                  LT_DEMAND_TEMP.LOAD_TYPE                      := LR_BUY.LOAD_TYPE;
                  LT_DEMAND_TEMP.IMPLEMENT_ORG_ID               := LR_BUY.IMPLEMENT_ORG_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_INSTANCE_ID          := LR_BUY.IMPLEMENT_INSTANCE_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_DATE                 := LR_BUY.IMPLEMENT_DATE;
                  LT_DEMAND_TEMP.RELEASE_ERRORS                 := LR_BUY.RELEASE_ERRORS;
                  LT_DEMAND_TEMP.ORG_FIRM_FLAG                  := LR_BUY.ORG_FIRM_FLAG;
                  LT_DEMAND_TEMP.ORIGINAL_ORG_ID                := LR_BUY.ORIGINAL_ORG_ID;
                  LT_DEMAND_TEMP.ORIGINAL_INST_ID               := LR_BUY.ORIGINAL_INST_ID;
                  LT_DEMAND_TEMP.ARRIVAL_SET_ID                 := LR_BUY.ARRIVAL_SET_ID;
                  LT_DEMAND_TEMP.SHIP_SET_ID                    := LR_BUY.SHIP_SET_ID;
                  LT_DEMAND_TEMP.ORDER_DATE_TYPE_CODE           := LR_BUY.ORDER_DATE_TYPE_CODE;
                  LT_DEMAND_TEMP.SCHEDULE_ARRIVAL_DATE          := LR_BUY.SCHEDULE_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.LATEST_ACCEPTABLE_DATE         := LR_BUY.LATEST_ACCEPTABLE_DATE;
                  LT_DEMAND_TEMP.SHIPPING_METHOD_CODE           := LR_BUY.SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.PLANNED_ARRIVAL_DATE           := LR_BUY.PLANNED_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.REQUEST_SHIP_DATE              := LR_BUY.REQUEST_SHIP_DATE;
                  LT_DEMAND_TEMP.PROMISE_SHIP_DATE              := LR_BUY.PROMISE_SHIP_DATE;
                  LT_DEMAND_TEMP.SCHEDULE_SHIP_DATE             := LR_BUY.SCHEDULE_SHIP_DATE;
                  LT_DEMAND_TEMP.ORIGINAL_DEMAND_ID             := LR_BUY.ORIGINAL_DEMAND_ID;
                  LT_DEMAND_TEMP.ZONE_ID                        := LR_BUY.ZONE_ID;
                  LT_DEMAND_TEMP.ORIG_SHIPPING_METHOD_CODE      := LR_BUY.ORIG_SHIPPING_METHOD_CODE;
                  LT_DEMAND_TEMP.INTRANSIT_LEAD_TIME            := LR_BUY.INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ORIG_INTRANSIT_LEAD_TIME       := LR_BUY.ORIG_INTRANSIT_LEAD_TIME;
                  LT_DEMAND_TEMP.ATP_OVERRIDE_FLAG              := LR_BUY.ATP_OVERRIDE_FLAG;
                  LT_DEMAND_TEMP.IMPLEMENT_FIRM                 := LR_BUY.IMPLEMENT_FIRM;
                  LT_DEMAND_TEMP.IMPLEMENT_EARLIEST_DATE        := LR_BUY.IMPLEMENT_EARLIEST_DATE;
                  LT_DEMAND_TEMP.IMPLEMENT_ARRIVAL_DATE         := LR_BUY.IMPLEMENT_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.UNBUCKETED_DEMAND_DATE         := LR_BUY.UNBUCKETED_DEMAND_DATE;
                  LT_DEMAND_TEMP.ATO_LINE_ID                    := LR_BUY.ATO_LINE_ID;
                  LT_DEMAND_TEMP.TOP_MODEL_LINE_ID              := LR_BUY.TOP_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_LINE_ID           := LR_BUY.PARENT_MODEL_LINE_ID;
                  LT_DEMAND_TEMP.STD_MANDATORY_COMP_FLAG        := LR_BUY.STD_MANDATORY_COMP_FLAG;
                  LT_DEMAND_TEMP.OLD_REFRESH_NUMBER             := LR_BUY.OLD_REFRESH_NUMBER;
                  LT_DEMAND_TEMP.SHIP_METHOD                    := LR_BUY.SHIP_METHOD;
                  LT_DEMAND_TEMP.SHIP_CALENDAR                  := LR_BUY.SHIP_CALENDAR;
                  LT_DEMAND_TEMP.RECEIVING_CALENDAR             := LR_BUY.RECEIVING_CALENDAR;
                  LT_DEMAND_TEMP.INTRANSIT_CALENDAR             := LR_BUY.INTRANSIT_CALENDAR;
                  LT_DEMAND_TEMP.SHIP_TO_LOCATION_ID            := LR_BUY.SHIP_TO_LOCATION_ID;
                  LT_DEMAND_TEMP.ORIGINAL_QUANTITY              := LR_BUY.ORIGINAL_QUANTITY;
                  LT_DEMAND_TEMP.FINAL_USE_PRIORITY             := LR_BUY.FINAL_USE_PRIORITY;
                  LT_DEMAND_TEMP.FINAL_USE_DATE                 := LR_BUY.FINAL_USE_DATE;
                  LT_DEMAND_TEMP.ARRIVAL_SET_NAME               := LR_BUY.ARRIVAL_SET_NAME;
                  LT_DEMAND_TEMP.SHIP_SET_NAME                  := LR_BUY.SHIP_SET_NAME;
                  LT_DEMAND_TEMP.SOURCE_PHANTOM_ID              := LR_BUY.SOURCE_PHANTOM_ID;
                  LT_DEMAND_TEMP.PRIMARY_COMPONENT_ID           := LR_BUY.PRIMARY_COMPONENT_ID;
                  LT_DEMAND_TEMP.ATP_SESSION_ID                 := LR_BUY.ATP_SESSION_ID;
                  LT_DEMAND_TEMP.IMPLEMENT_SHIP_DATE            := LR_BUY.IMPLEMENT_SHIP_DATE;
                  LT_DEMAND_TEMP.PLANNED_SHIP_DATE              := LR_BUY.PLANNED_SHIP_DATE;
                  LT_DEMAND_TEMP.PRIOR_ALLOCATION_QTY           := LR_BUY.PRIOR_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_QTY          := LR_BUY.MANUAL_ALLOCATION_QTY;
                  LT_DEMAND_TEMP.MANUAL_ALLOCATION_DATE         := LR_BUY.MANUAL_ALLOCATION_DATE;
                  LT_DEMAND_TEMP.FIRM_ALLOCATION_FLAG           := LR_BUY.FIRM_ALLOCATION_FLAG;
                  LT_DEMAND_TEMP.ASSET_SERIAL_NUMBER            := LR_BUY.ASSET_SERIAL_NUMBER;
                  LT_DEMAND_TEMP.ASSET_ITEM_ID                  := LR_BUY.ASSET_ITEM_ID;
                  LT_DEMAND_TEMP.EXPIRATION_DATE                := LR_BUY.EXPIRATION_DATE;
                  LT_DEMAND_TEMP.SALES_ORDER_LINE_SPLIT         := LR_BUY.SALES_ORDER_LINE_SPLIT;
                  LT_DEMAND_TEMP.PLANNED_INBOUND_DUE_DATE       := LR_BUY.PLANNED_INBOUND_DUE_DATE;
                  LT_DEMAND_TEMP.FILL_KILL_FLAG                 := LR_BUY.FILL_KILL_FLAG;
                  LT_DEMAND_TEMP.DEFINITION_LEVEL_USED          := LR_BUY.DEFINITION_LEVEL_USED;
                  LT_DEMAND_TEMP.DEMAND_FULFILLMENT_LEAD_TIME   := LR_BUY.DEMAND_FULFILLMENT_LEAD_TIME;
                  LT_DEMAND_TEMP.COMPONENT_SCALING_TYPE         := LR_BUY.COMPONENT_SCALING_TYPE;
                  LT_DEMAND_TEMP.COMPONENT_YIELD_FACTOR         := LR_BUY.COMPONENT_YIELD_FACTOR;
                  LT_DEMAND_TEMP.SPLIT_FROM_DEMAND_ID           := LR_BUY.SPLIT_FROM_DEMAND_ID;
                  LT_DEMAND_TEMP.PREV_SUBST_ITEM                := LR_BUY.PREV_SUBST_ITEM;
                  LT_DEMAND_TEMP.PREV_SUBST_ORG                 := LR_BUY.PREV_SUBST_ORG;
                  LT_DEMAND_TEMP.ITEM_TYPE_ID                   := LR_BUY.ITEM_TYPE_ID;
                  LT_DEMAND_TEMP.ITEM_TYPE_VALUE                := LR_BUY.ITEM_TYPE_VALUE;
                  LT_DEMAND_TEMP.REPAIR_LINE_ID                 := LR_BUY.REPAIR_LINE_ID;
                  LT_DEMAND_TEMP.OTM_ARRIVAL_DATE               := LR_BUY.OTM_ARRIVAL_DATE;
                  LT_DEMAND_TEMP.WIP_ENTITY_NAME                := LR_BUY.WIP_ENTITY_NAME;
                  LT_DEMAND_TEMP.MIN_REM_SHELF_LIFE_DAYS        := LR_BUY.MIN_REM_SHELF_LIFE_DAYS;
                  LT_DEMAND_TEMP.REVISED_DMD_DATE               := LR_BUY.REVISED_DMD_DATE;
                  LT_DEMAND_TEMP.REVISED_DMD_PRIORITY           := LR_BUY.REVISED_DMD_PRIORITY;
                  LT_DEMAND_TEMP.TOP_MODEL_ITEM_ID              := LR_BUY.TOP_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.PARENT_MODEL_ITEM_ID           := LR_BUY.PARENT_MODEL_ITEM_ID;
                  LT_DEMAND_TEMP.DAYS_LATE                      := LR_BUY.DAYS_LATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_DATE                 := LR_BUY.ORIG_FIRM_DATE;
                  LT_DEMAND_TEMP.ORIG_FIRM_QUANTITY             := LR_BUY.ORIG_FIRM_QUANTITY;
                  LT_DEMAND_TEMP.OBJECT_TYPE                    := LR_BUY.OBJECT_TYPE;
                  LT_DEMAND_TEMP.MAINTENANCE_OBJECT_SOURCE      := LR_BUY.MAINTENANCE_OBJECT_SOURCE;
                  LT_DEMAND_TEMP.PEGGING_ID                     := CUX.CUX_MSC_PEGGING_ID_S.NEXTVAL * -1; --Added by V1.025
                  INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T VALUES LT_DEMAND_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MD',
                        '***ERROR*** INSERT PCBA DEMANDS 032 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
              ELSE
              
                p_change_pegging(p_plan_id        => P_PLAN_ID,
                                 p_sr_instance_id => P_SR_INSTANCE_ID,
                                 p_pegging_id     => LR_BUY.PEGGING_ID,
                                 p_chang_qty      => LN_PLAN_QTY,
                                 P_ORGI_USAGE     => LR_ZR_SUB.ITEM_USAGE_QTY,--初始单位用量--Added by v1.027
                                 p_flag           => 'N');
                LN_DEMAND_ID := LR_BUY.DEMAND_ID;
              END IF;
            
              --冲减现有量
              FOR LR_SUPPLY_OH IN GC_SUPPLY_OH(P_SR_INSTANCE_ID, LR_BUY.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                LN_USED_QTY := 0;
                IF LR_SUPPLY_OH.REMAIN_QTY >= LN_PLAN_QTY THEN
                  LN_USED_QTY := LN_PLAN_QTY;
                
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.REMAIN_QTY = LR_SUPPLY_OH.REMAIN_QTY - LN_USED_QTY
                   WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                  LN_PLAN_QTY := 0;
                ELSE
                
                  LN_USED_QTY := LR_SUPPLY_OH.REMAIN_QTY;
                
                  --更新供应的结余数量
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                  LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_OH.REMAIN_QTY;
                END IF;
              
                --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
                  --写入供应数据
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
                    LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
                    LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
                    LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
                    LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
                    LV_SUPPLIES_TEMP.UPDATED                 := 2;
                    LV_SUPPLIES_TEMP.STATUS                  := 0;
                    LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT PCBA SUPPLIES 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                     SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                   WHERE CMS.ROW_ID = LR_SUPPLY_OH.ROW_ID;
                
                ELSE
                  LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
                
                END IF;
                --写入PEGGING数据
                BEGIN
                  SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                
                  LT_PEGGING_TEMP                        := NULL;
                  LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                  LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                  LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
                  LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                  LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY);
                  LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                  LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                  LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
                  LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                  LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                  LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                  LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                  LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                  LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                  LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                  LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                  LT_PEGGING_TEMP.PROJECT_ID             := LR_BUY.PROJECT_ID;
                  LT_PEGGING_TEMP.TASK_ID                := LR_BUY.TASK_ID;
                  LT_PEGGING_TEMP.SR_INSTANCE_ID         := LR_BUY.SR_INSTANCE_ID;
                  LT_PEGGING_TEMP.DEMAND_CLASS           := LR_BUY.DEMAND_CLASS;
                  LT_PEGGING_TEMP.UPDATED                := 0;
                  LT_PEGGING_TEMP.STATUS                 := 2;
                  LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                  LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                  LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                  LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                  LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                  LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                  LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                  LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                  INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                
                EXCEPTION
                  WHEN OTHERS THEN
                    LOG(FND_GLOBAL.CONC_REQUEST_ID,
                        'INSERT_PLAN_MFP',
                        '***ERROR*** INSERT PCBA PEGGINS 033 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                        ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                    LV_ERROR_CODE := 2;
                    RAISE LE_EXCEPTION;
                END;
              
                IF LN_PLAN_QTY <= 0 THEN
                  EXIT;
                END IF;
              END LOOP;
            
              --若现有量不能满足需求则用工单的副需求去满足需求
            
              IF LN_PLAN_QTY > 0 THEN
                --冲减对应的工单负产出，按照工单的开工日期，工单ID排序
                FOR LR_SUPPLY_RDJ IN GC_SUPPLY_RDJ(P_SR_INSTANCE_ID,
                                                   LR_BUY.ORGANIZATION_ID,
                                                   LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RDJ.REMAIN_QTY >= LN_PLAN_QTY THEN
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                  
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RDJ.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RDJ.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RDJ.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  END IF;
                
                  --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT PCBA SUPPLIES 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_RDJ.ROW_ID;
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
                  
                  END IF;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY);
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_BUY.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_BUY.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := LR_BUY.SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_BUY.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT PCBA PEGGINS 034 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用在途部分去满足
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_RCV IN GC_SUPPLY_RCV(P_SR_INSTANCE_ID,
                                                   LR_BUY.ORGANIZATION_ID,
                                                   LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_RCV.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_RCV.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_RCV.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_RCV.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = 0
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  END IF;
                
                  --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 025 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_RCV.ROW_ID;
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY); --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 026 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PO部分去满足
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_SUPPLY_PO IN GC_SUPPLY_PO(P_SR_INSTANCE_ID, LR_BUY.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PO.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PO.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PO.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PO.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  END IF;
                
                  --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                  IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 027 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_PO.ROW_ID;
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY); --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 028 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --用PR部分去满足
              IF LN_PLAN_QTY > 0 AND LR_ZR_SUB.ZR_SUB_FLAG != 'Y' THEN
                FOR LR_SUPPLY_PR IN GC_SUPPLY_PR(P_SR_INSTANCE_ID, LR_BUY.ORGANIZATION_ID, LR_ZR_SUB.SUBSTITUTE_ITEM_ID) LOOP
                  LN_USED_QTY := 0;
                  IF LR_SUPPLY_PR.REMAIN_QTY >= LN_PLAN_QTY THEN
                  
                    LN_USED_QTY := LN_PLAN_QTY;
                    LN_PLAN_QTY := 0;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.REMAIN_QTY = LR_SUPPLY_PR.REMAIN_QTY - LN_USED_QTY
                     WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  
                  ELSE
                  
                    LN_USED_QTY := LR_SUPPLY_PR.REMAIN_QTY;
                    LN_PLAN_QTY := LN_PLAN_QTY - LR_SUPPLY_PR.REMAIN_QTY;
                    --更新供应的结余数量
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS SET CMS.REMAIN_QTY = 0 WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  END IF;
                  IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
                    --LN_TOTAL_PLAN_QTY := LN_TOTAL_PLAN_QTY - LN_USED_QTY;
                    --写入供应数据
                    BEGIN
                      SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                      LV_SUPPLIES_TEMP                   := NULL;
                      LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                      LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                      LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                      LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                      LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                      LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                    
                      LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                      LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME); --重新计算
                      LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME);
                      LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                   LN_SUB_POST_LEAD_TIME -
                                                                                   LN_SUB_FULL_LEAD_TIME -
                                                                                   LN_SUB_PREPROCE_LEAD_TIME);
                    
                      LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
                      LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
                      LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
                      LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
                      LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
                      LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
                      LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
                      LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
                      LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                      LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
                      LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
                      LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
                      LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
                      LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
                      LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
                      LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
                      LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
                      LV_SUPPLIES_TEMP.UPDATED                  := 2;
                      LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
                      LV_SUPPLIES_TEMP.STATUS                   := 0;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
                      LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
                      LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
                      LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
                      LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
                      LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
                      LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
                      LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
                      LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
                      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                    
                    EXCEPTION
                      WHEN OTHERS THEN
                        LOG(FND_GLOBAL.CONC_REQUEST_ID,
                            'INSERT_PLAN_MS',
                            '***ERROR*** INSERT BOM SUPPLIES 029 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                            ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                        LV_ERROR_CODE := 2;
                        RAISE LE_EXCEPTION;
                    END;
                  
                    UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                       SET CMS.NEW_TRANSACTION_ID = LN_TRANSACTION_ID
                     WHERE CMS.ROW_ID = LR_SUPPLY_PR.ROW_ID;
                  ELSE
                    LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
                  
                  END IF;
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LN_USED_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY); --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT BOM PEGGINS 030 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                  IF LN_PLAN_QTY <= 0 THEN
                    EXIT;
                  END IF;
                
                END LOOP;
              END IF;
            
              --最后仍不能满足 用计划单去满足
              --需要加入供应商资料
              IF LN_PLAN_QTY > 0 THEN
                FOR LR_PO_BID IN (SELECT CMAB.MSC_INVENTORY_ITEM_ID,
                                         CMAB.MSC_VENDOR_ID,
                                         CMAB.MSC_VENDOR_SITE_ID,
                                         CMAB.CURRENT_ALLOCATION_QTY
                                    FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                   WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                     AND CMAB.CURRENT_ALLOCATION_QTY > 0
                                     AND CMBR.INVENTORY_ITEM_ID = LR_ZR_SUB.SUBSTITUTE_ITEM_ID
                                  UNION ALL
                                  SELECT LR_ZR_SUB.SUBSTITUTE_ITEM_ID, NULL, NULL, LN_PLAN_QTY
                                    FROM DUAL
                                   WHERE 1 = 1
                                     AND LR_ZR_SUB.SUB_ITEM_TYPE = 2
                                     AND NOT EXISTS
                                   (SELECT 1
                                            FROM CUX.CUX_MSC_BID_ITEM_RANGE CMBR, CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T CMAB
                                           WHERE CMBR.INVENTORY_ITEM_ID = CMAB.MSC_INVENTORY_ITEM_ID
                                             AND CMAB.CURRENT_ALLOCATION_QTY > 0)) LOOP
                
                  BEGIN
                    SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
                    LV_SUPPLIES_TEMP                   := NULL;
                    LV_SUPPLIES_TEMP.PLAN_ID           := LR_BUY.PLAN_ID;
                    LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
                    LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_BUY.ORGANIZATION_ID;
                    LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := LR_BUY.SR_INSTANCE_ID;
                    LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_PO_BID.MSC_INVENTORY_ITEM_ID;
                    LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_BUY.ASSEMBLY_DEMAND_COMP_DATE;
                  
                    LV_SUPPLIES_TEMP.NEED_BY_DATE             := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME); --重新计算
                    LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME);
                    LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE -
                                                                                 LN_SUB_POST_LEAD_TIME -
                                                                                 LN_SUB_FULL_LEAD_TIME -
                                                                                 LN_SUB_PREPROCE_LEAD_TIME);
                  
                    LV_SUPPLIES_TEMP.DISPOSITION_ID          := LR_BUY.DISPOSITION_ID;
                    LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
                    LV_SUPPLIES_TEMP.ORDER_TYPE              := 5; --计划单
                    LV_SUPPLIES_TEMP.SUPPLIER_ID             := LR_PO_BID.MSC_VENDOR_ID;
                    LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := LR_PO_BID.MSC_VENDOR_SITE_ID;
                    LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                    LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                    LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
                    LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
                    LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 1;
                    LV_SUPPLIES_TEMP.UPDATED                 := 2;
                    LV_SUPPLIES_TEMP.STATUS                  := 0;
                    LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
                    LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
                    LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
                    LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
                    LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
                    LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
                    LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := 1;
                    LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
                    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MS',
                          '***ERROR*** INSERT WIP SUPPLIES 016 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                
                  --写入PEGGING数据
                  BEGIN
                    SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
                  
                    LT_PEGGING_TEMP                        := NULL;
                    LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
                    LT_PEGGING_TEMP.DEMAND_QUANTITY        := LN_TOTAL_DEMAND_QTY;
                    LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                    LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_PO_BID.CURRENT_ALLOCATION_QTY;
                    LT_PEGGING_TEMP.END_ITEM_USAGE         := NVL(LR_ZR_SUB.ITEM_USAGE_QTY, LN_USAGE_QTY); --单位用量
                    LT_PEGGING_TEMP.DEMAND_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE);
                    LT_PEGGING_TEMP.SUPPLY_DATE            := GET_ACTUAL_DATE(LR_BUY.USING_ASSEMBLY_DEMAND_DATE); --可能要修改
                    LT_PEGGING_TEMP.SUPPLY_TYPE            := 5;
                    LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := LR_BUY.END_ORIGINATION_TYPE;
                    LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_ZR_SUB.SUBSTITUTE_ITEM_ID;
                    LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_BUY.ORGANIZATION_ID;
                    LT_PEGGING_TEMP.PLAN_ID                := LR_BUY.PLAN_ID;
                    LT_PEGGING_TEMP.PREV_PEGGING_ID        := LR_BUY.PREV_PEGGING_ID;
                    LT_PEGGING_TEMP.END_PEGGING_ID         := LR_BUY.END_PEGGING_ID;
                    LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
                    LT_PEGGING_TEMP.DEMAND_ID              := LN_DEMAND_ID;
                    LT_PEGGING_TEMP.PROJECT_ID             := LR_BUY.PROJECT_ID;
                    LT_PEGGING_TEMP.TASK_ID                := LR_BUY.TASK_ID;
                    LT_PEGGING_TEMP.SR_INSTANCE_ID         := LR_BUY.SR_INSTANCE_ID;
                    LT_PEGGING_TEMP.DEMAND_CLASS           := LR_BUY.DEMAND_CLASS;
                    LT_PEGGING_TEMP.UPDATED                := 0;
                    LT_PEGGING_TEMP.STATUS                 := 2;
                    LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
                    LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
                    LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
                    LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
                    LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
                    LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
                    LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
                    LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
                    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
                  
                  EXCEPTION
                    WHEN OTHERS THEN
                      LOG(FND_GLOBAL.CONC_REQUEST_ID,
                          'INSERT_PLAN_MFP',
                          '***ERROR*** INSERT WIP PEGGINGS 017 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') ||
                          ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
                      LV_ERROR_CODE := 2;
                      RAISE LE_EXCEPTION;
                  END;
                END LOOP;
              END IF;
            END IF;
          
          END LOOP;
        
        END LOOP;
        COMMIT;
      END IF;
    
    END IF;
    P_D_COUNT := LN_D_COUNT;
    P_S_COUNT := LN_S_COUNT;
    P_P_COUNT := LN_P_COUNT;
  END;

  /***********************************************************************************
   NAME: PROCESS_NO_SA_PCBA
   DESCRIPTION:错阶部分的SA，错阶，组合，采购件按照时间先后依次处理。
  ***********************************************************************************/
  PROCEDURE PROCESS_NO_SA_PCBA(P_SR_INSTANCE_ID NUMBER, P_PLAN_ID NUMBER, PO_ERROR_CODE OUT VARCHAR2) IS
  
    LT_CUX_MSC_DEMANDS_PLAN GT_CUX_MSC_DEMANDS_PLAN := GT_CUX_MSC_DEMANDS_PLAN();
    LV_ERROR_CODE           VARCHAR2(20);
    LE_EXCEPTION EXCEPTION;
    LT_DEMAND_DETAIL  CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LN_D_COUNT        NUMBER := 1;
    LN_S_COUNT        NUMBER := 1;
    LN_P_COUNT        NUMBER := 1;
    LN_PEGGING_ID     NUMBER;
    LN_TRANSACTION_ID NUMBER;
    LN_SA_COUNT       NUMBER := 0;
    LN_CROSS_COUNT    NUMBER := 0;
    LN_PH_COUNT       NUMBER := 0;
    LN_BUY_COUNT      NUMBER := 0;
    LN_SA_COUNT_T     NUMBER := 0;
    LN_CROSS_COUNT_T  NUMBER := 0;
    LN_PH_COUNT_T     NUMBER := 0;
    LN_BUY_COUNT_T    NUMBER := 0;
    LT_PEGGING_TEMP   CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP    CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP  CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  
    CURSOR LC_MAIN IS
      SELECT NO_SA_PCBA.ORDER_PRIORITY,
             NO_SA_PCBA.FORECAST_MAD,
             NO_SA_PCBA.DEMAND_ID,
             NO_SA_PCBA.SCHEDULE_DESIGNATOR_ID,
             NO_SA_PCBA.USING_REQUIREMENT_QUANTITY,
             NO_SA_PCBA.ASSEMBLY_DEMAND_COMP_DATE,
             NO_SA_PCBA.USING_ASSEMBLY_DEMAND_DATE,
             NO_SA_PCBA.DEMAND_TYPE,
             NO_SA_PCBA.ORIGINATION_TYPE,
             NO_SA_PCBA.DEMAND_PRIORITY,
             NO_SA_PCBA.SALES_ORDER_PRIORITY,
             NO_SA_PCBA.FORECAST_PRIORITY,
             NO_SA_PCBA.PLANNING_GROUP,
             NO_SA_PCBA.DAILY_DEMAND_RATE,
             NO_SA_PCBA.UNIT_NUMBER,
             NO_SA_PCBA.DISPOSITION_ID,
             NO_SA_PCBA.USING_ASSEMBLY_ITEM_ID,
             NO_SA_PCBA.PLAN_ID,
             NO_SA_PCBA.ORGANIZATION_ID,
             NO_SA_PCBA.INVENTORY_ITEM_ID,
             NO_SA_PCBA.PROJECT_ID,
             NO_SA_PCBA.TASK_ID,
             NO_SA_PCBA.CUSTOMER_ID,
             NO_SA_PCBA.CUSTOMER_SITE_ID,
             NO_SA_PCBA.SR_INSTANCE_ID,
             NO_SA_PCBA.SHIP_TO_SITE_ID,
             NO_SA_PCBA.PROMISE_DATE,
             NO_SA_PCBA.SELLING_PRICE,
             NO_SA_PCBA.DMD_LATENESS_COST,
             NO_SA_PCBA.DMD_SATISFIED_DATE,
             NO_SA_PCBA.OP_SEQ_NUM,
             NO_SA_PCBA.UPDATED,
             NO_SA_PCBA.STATUS,
             NO_SA_PCBA.APPLIED,
             NO_SA_PCBA.DEMAND_CLASS,
             NO_SA_PCBA.FIRM_QUANTITY,
             NO_SA_PCBA.FIRM_DATE,
             NO_SA_PCBA.OLD_DEMAND_QUANTITY,
             NO_SA_PCBA.OLD_DEMAND_DATE,
             NO_SA_PCBA.SOURCE_ORGANIZATION_ID,
             NO_SA_PCBA.RESERVATION_ID,
             NO_SA_PCBA.PARENT_ID,
             NO_SA_PCBA.LENDING_PROJECT_ID,
             NO_SA_PCBA.LENDING_TASK_ID,
             NO_SA_PCBA.SUBST_ITEM_FLAG,
             NO_SA_PCBA.ORDER_NUMBER,
             NO_SA_PCBA.RESERVED_QUANTITY,
             NO_SA_PCBA.LAST_UPDATE_DATE,
             NO_SA_PCBA.LAST_UPDATED_BY,
             NO_SA_PCBA.CREATION_DATE,
             NO_SA_PCBA.CREATED_BY,
             NO_SA_PCBA.LAST_UPDATE_LOGIN,
             NO_SA_PCBA.REQUEST_ID,
             NO_SA_PCBA.PROGRAM_APPLICATION_ID,
             NO_SA_PCBA.PROGRAM_ID,
             NO_SA_PCBA.PROGRAM_UPDATE_DATE,
             NO_SA_PCBA.ATTRIBUTE_CATEGORY,
             NO_SA_PCBA.ATTRIBUTE1,
             NO_SA_PCBA.ATTRIBUTE2,
             NO_SA_PCBA.ATTRIBUTE3,
             NO_SA_PCBA.ATTRIBUTE4,
             NO_SA_PCBA.ATTRIBUTE5,
             NO_SA_PCBA.ATTRIBUTE6,
             NO_SA_PCBA.ATTRIBUTE7,
             NO_SA_PCBA.ATTRIBUTE8,
             NO_SA_PCBA.ATTRIBUTE9,
             NO_SA_PCBA.ATTRIBUTE10,
             NO_SA_PCBA.ATTRIBUTE11,
             NO_SA_PCBA.ATTRIBUTE12,
             NO_SA_PCBA.ATTRIBUTE13,
             NO_SA_PCBA.ATTRIBUTE14,
             NO_SA_PCBA.ATTRIBUTE15,
             NO_SA_PCBA.WIP_ENTITY_ID,
             NO_SA_PCBA.ISSUED_QUANTITY,
             NO_SA_PCBA.REPETITIVE_SCHEDULE_ID,
             NO_SA_PCBA.REFRESH_NUMBER,
             NO_SA_PCBA.REQUEST_DATE,
             NO_SA_PCBA.WIP_STATUS_CODE,
             NO_SA_PCBA.WIP_SUPPLY_TYPE,
             NO_SA_PCBA.SOURCE_ORG_INSTANCE_ID,
             NO_SA_PCBA.SALES_ORDER_LINE_ID,
             NO_SA_PCBA.CONFIDENCE_PERCENTAGE,
             NO_SA_PCBA.BUCKET_TYPE,
             NO_SA_PCBA.BILL_ID,
             NO_SA_PCBA.PROBABILITY,
             NO_SA_PCBA.FORECAST_SET_ID,
             NO_SA_PCBA.GROUP_ID,
             NO_SA_PCBA.SERVICE_LEVEL,
             NO_SA_PCBA.QUANTITY_BY_DUE_DATE,
             NO_SA_PCBA.TARGET_SAFETY_STOCK,
             NO_SA_PCBA.SCENARIO_SET,
             NO_SA_PCBA.DEMAND_SOURCE_TYPE,
             NO_SA_PCBA.SUPPLY_ID,
             NO_SA_PCBA.ORIGINAL_SYSTEM_REFERENCE,
             NO_SA_PCBA.ORIGINAL_SYSTEM_LINE_REFERENCE,
             NO_SA_PCBA.STOLEN_FLAG,
             NO_SA_PCBA.OLD_USING_REQUIREMENT_QUANTITY,
             NO_SA_PCBA.OLD_USING_ASSEMBLY_DEMAND_DATE,
             NO_SA_PCBA.OLD_ASSEMBLY_DEMAND_COMP_DATE,
             NO_SA_PCBA.CUMMULATIVE_PROBABILITY,
             NO_SA_PCBA.ORIGINAL_ITEM_ID,
             NO_SA_PCBA.UNMET_QUANTITY,
             NO_SA_PCBA.RECORD_SOURCE,
             NO_SA_PCBA.LINK_TO_LINE_ID,
             NO_SA_PCBA.ERROR_TYPE,
             NO_SA_PCBA.ATP_SYNCHRONIZATION_FLAG,
             NO_SA_PCBA.COMP_SEQ_ID,
             NO_SA_PCBA.QUANTITY_PER_ASSEMBLY,
             NO_SA_PCBA.RELEASE_STATUS,
             NO_SA_PCBA.RESCHEDULE_FLAG,
             NO_SA_PCBA.LOAD_TYPE,
             NO_SA_PCBA.IMPLEMENT_ORG_ID,
             NO_SA_PCBA.IMPLEMENT_INSTANCE_ID,
             NO_SA_PCBA.IMPLEMENT_DATE,
             NO_SA_PCBA.RELEASE_ERRORS,
             NO_SA_PCBA.ORG_FIRM_FLAG,
             NO_SA_PCBA.ORIGINAL_ORG_ID,
             NO_SA_PCBA.ORIGINAL_INST_ID,
             NO_SA_PCBA.ARRIVAL_SET_ID,
             NO_SA_PCBA.SHIP_SET_ID,
             NO_SA_PCBA.ORDER_DATE_TYPE_CODE,
             NO_SA_PCBA.SCHEDULE_ARRIVAL_DATE,
             NO_SA_PCBA.LATEST_ACCEPTABLE_DATE,
             NO_SA_PCBA.SHIPPING_METHOD_CODE,
             NO_SA_PCBA.PLANNED_ARRIVAL_DATE,
             NO_SA_PCBA.REQUEST_SHIP_DATE,
             NO_SA_PCBA.PROMISE_SHIP_DATE,
             NO_SA_PCBA.SCHEDULE_SHIP_DATE,
             NO_SA_PCBA.ORIGINAL_DEMAND_ID,
             NO_SA_PCBA.ZONE_ID,
             NO_SA_PCBA.ORIG_SHIPPING_METHOD_CODE,
             NO_SA_PCBA.INTRANSIT_LEAD_TIME,
             NO_SA_PCBA.ORIG_INTRANSIT_LEAD_TIME,
             NO_SA_PCBA.ATP_OVERRIDE_FLAG,
             NO_SA_PCBA.IMPLEMENT_FIRM,
             NO_SA_PCBA.IMPLEMENT_EARLIEST_DATE,
             NO_SA_PCBA.IMPLEMENT_ARRIVAL_DATE,
             NO_SA_PCBA.UNBUCKETED_DEMAND_DATE,
             NO_SA_PCBA.ATO_LINE_ID,
             NO_SA_PCBA.TOP_MODEL_LINE_ID,
             NO_SA_PCBA.PARENT_MODEL_LINE_ID,
             NO_SA_PCBA.STD_MANDATORY_COMP_FLAG,
             NO_SA_PCBA.OLD_REFRESH_NUMBER,
             NO_SA_PCBA.SHIP_METHOD,
             NO_SA_PCBA.SHIP_CALENDAR,
             NO_SA_PCBA.RECEIVING_CALENDAR,
             NO_SA_PCBA.INTRANSIT_CALENDAR,
             NO_SA_PCBA.SHIP_TO_LOCATION_ID,
             NO_SA_PCBA.ORIGINAL_QUANTITY,
             NO_SA_PCBA.FINAL_USE_PRIORITY,
             NO_SA_PCBA.FINAL_USE_DATE,
             NO_SA_PCBA.ARRIVAL_SET_NAME,
             NO_SA_PCBA.SHIP_SET_NAME,
             NO_SA_PCBA.SOURCE_PHANTOM_ID,
             NO_SA_PCBA.PRIMARY_COMPONENT_ID,
             NO_SA_PCBA.ATP_SESSION_ID,
             NO_SA_PCBA.IMPLEMENT_SHIP_DATE,
             NO_SA_PCBA.PLANNED_SHIP_DATE,
             NO_SA_PCBA.PRIOR_ALLOCATION_QTY,
             NO_SA_PCBA.MANUAL_ALLOCATION_QTY,
             NO_SA_PCBA.MANUAL_ALLOCATION_DATE,
             NO_SA_PCBA.FIRM_ALLOCATION_FLAG,
             NO_SA_PCBA.ASSET_SERIAL_NUMBER,
             NO_SA_PCBA.ASSET_ITEM_ID,
             NO_SA_PCBA.EXPIRATION_DATE,
             NO_SA_PCBA.SALES_ORDER_LINE_SPLIT,
             NO_SA_PCBA.PLANNED_INBOUND_DUE_DATE,
             NO_SA_PCBA.FILL_KILL_FLAG,
             NO_SA_PCBA.DEFINITION_LEVEL_USED,
             NO_SA_PCBA.DEMAND_FULFILLMENT_LEAD_TIME,
             NO_SA_PCBA.COMPONENT_SCALING_TYPE,
             NO_SA_PCBA.COMPONENT_YIELD_FACTOR,
             NO_SA_PCBA.SPLIT_FROM_DEMAND_ID,
             NO_SA_PCBA.PREV_SUBST_ITEM,
             NO_SA_PCBA.PREV_SUBST_ORG,
             NO_SA_PCBA.ITEM_TYPE_ID,
             NO_SA_PCBA.ITEM_TYPE_VALUE,
             NO_SA_PCBA.REPAIR_LINE_ID,
             NO_SA_PCBA.OTM_ARRIVAL_DATE,
             NO_SA_PCBA.WIP_ENTITY_NAME,
             NO_SA_PCBA.MIN_REM_SHELF_LIFE_DAYS,
             NO_SA_PCBA.REVISED_DMD_DATE,
             NO_SA_PCBA.REVISED_DMD_PRIORITY,
             NO_SA_PCBA.TOP_MODEL_ITEM_ID,
             NO_SA_PCBA.PARENT_MODEL_ITEM_ID,
             NO_SA_PCBA.DAYS_LATE,
             NO_SA_PCBA.ORIG_FIRM_DATE,
             NO_SA_PCBA.ORIG_FIRM_QUANTITY,
             NO_SA_PCBA.OBJECT_TYPE,
             NO_SA_PCBA.MAINTENANCE_OBJECT_SOURCE,
             NO_SA_PCBA.LOW_LEVEL_CODE,
             NO_SA_PCBA.MOQ_QTY,
             NO_SA_PCBA.FLM_QTY,
             NO_SA_PCBA.ROUNDING_CONTROL_TYPE,
             NO_SA_PCBA.ITEM_PREPROCE_LEAD_TIME,
             NO_SA_PCBA.ITEM_POST_LEAD_TIME,
             NO_SA_PCBA.ITEM_FULL_LEAD_TIME,
             NO_SA_PCBA.ITEM_FIXED_LEAD_TIME,
             NO_SA_PCBA.ITEM_VARIA_LEAD_TIME,
             NO_SA_PCBA.PEGGING_ID,
             NO_SA_PCBA.END_ORIGINATION_TYPE,
             NO_SA_PCBA.PREV_PEGGING_ID,
             NO_SA_PCBA.END_PEGGING_ID,
             NO_SA_PCBA.ALLOCATED_QUANTITY,
             NO_SA_PCBA.TRANSACTION_ID,
             NO_SA_PCBA.SUPPLY_DATE,
             NO_SA_PCBA.ITEM_TYPE,
             NO_SA_PCBA.ITEM_NAME,
             NO_SA_PCBA.PLANNING_MAKE_BUY_CODE,
             NO_SA_PCBA.END_ITEM_USAGE
        FROM (
              --SA部分
              SELECT 2 SORT_ORDER,
                      GET_ACTUAL_DATE(CMD.USING_ASSEMBLY_DEMAND_DATE - ITEM_POST_LEAD_TIME - ITEM_FIXED_LEAD_TIME) ORDER_DATE,
                      CMD.*
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD,
                      CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
                      CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL,
                      CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR
               WHERE CMD.PLAN_ID = P_PLAN_ID
                 AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD.ITEM_TYPE != 'PH' --排除虚拟件
                 AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
                 AND GET_MPS_FLAG(CMD.ORGANIZATION_ID, CMD.INVENTORY_ITEM_ID) = 'N'
                 AND CMD.ORIGINATION_TYPE != 12 --MPS需求
                 AND CMD.LOW_LEVEL_CODE = 999
                 AND CMBH.SUBSTITUTE_CLASS = 3
                 AND CMBH.GROUP_ID = CMBL.GROUP_ID
                 AND CMBL.GROUP_ELEMENT_ID = CMCR.GROUP_ELEMENT_ID
                 AND CMBH.STATUS_CODE = 'APPROVED'
                 AND CMCR.MSC_SUB_COMP_ITEM_ID IS NOT NULL
                 AND CMCR.MSC_COMPONENT_ITEM_ID = CMD.INVENTORY_ITEM_ID
                 AND (TRUNC(SYSDATE) >= TRUNC(CMBH.EFFECTIVITY_DATE) OR
                     TRUNC(SYSDATE) <= TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(SYSDATE))))
                 --Change below by V1.027    
                 AND NOT EXISTS (SELECT 1 
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD_CROSS,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH_CROSS,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL_CROSS
               WHERE CMD_CROSS.PLAN_ID = CMD.PLAN_ID
                 AND CMD_CROSS.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID
                 AND CMD_CROSS.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD_CROSS.PEGGING_ID = CMD.PREV_PEGGING_ID
                 AND CMD_CROSS.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD_CROSS.ATTRIBUTE1, 'N') = 'N'
                 AND CMD_CROSS.LOW_LEVEL_CODE = 998
                 AND CMD_CROSS.INVENTORY_ITEM_ID = CMBL_CROSS.MSC_ITEM_ID
                 AND CMBH_CROSS.SUBSTITUTE_CLASS = 3 --错阶标记
                 AND CMBH_CROSS.GROUP_ID = CMBL_CROSS.GROUP_ID
                 AND CMBH_CROSS.STATUS_CODE = 'APPROVED'
                 AND TRUNC(CMD_CROSS.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH_CROSS.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH_CROSS.DISABLE_DATE, CMD_CROSS.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD_CROSS.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL_CROSS.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL_CROSS.DISABLE_DATE, CMD_CROSS.USING_ASSEMBLY_DEMAND_DATE)))    
                 /*AND NOT EXISTS (SELECT 1
                        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
                       WHERE CMF.PEGGING_ID = CMD.PREV_PEGGING_ID
                         AND CMD.PLAN_ID = CMF.PLAN_ID
                         AND CMD.SR_INSTANCE_ID = CMF.SR_INSTANCE_ID
                         AND CMF.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
                         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
                             TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE)))
                         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
                             TRUNC(NVL(CMBL.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE))))*/
                  --Change above by V1.027           
              UNION ALL
              --组合部分
              SELECT 3 SORT_ORDER,
                     GET_ACTUAL_DATE(CMD.USING_ASSEMBLY_DEMAND_DATE - ITEM_POST_LEAD_TIME - ITEM_FIXED_LEAD_TIME) ORDER_DATE,
                     CMD.*
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL
               WHERE CMD.PLAN_ID = P_PLAN_ID
                 AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
                 AND CMD.LOW_LEVEL_CODE = 999
                 AND CMD.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
                 AND CMBH.SUBSTITUTE_CLASS = 2 --成组标记
                 AND CMBH.GROUP_ID = CMBL.GROUP_ID
                 AND CMBH.STATUS_CODE = 'APPROVED'
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
              UNION ALL
              --错阶部分
              SELECT 1 SORT_ORDER,
                     GET_ACTUAL_DATE(CMD.USING_ASSEMBLY_DEMAND_DATE - ITEM_POST_LEAD_TIME - ITEM_FIXED_LEAD_TIME) ORDER_DATE,
                     CMD.*
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL
               WHERE CMD.PLAN_ID = P_PLAN_ID
                 AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
                 AND CMD.LOW_LEVEL_CODE = 998
                 AND CMD.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
                 AND CMBH.SUBSTITUTE_CLASS = 3 --错阶标记
                 AND CMBH.GROUP_ID = CMBL.GROUP_ID
                 AND CMBH.STATUS_CODE = 'APPROVED'
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
              UNION ALL
              --采购件部分
              SELECT 4 SORT_ORDER, CMD.USING_ASSEMBLY_DEMAND_DATE ORDER_DATE, CMD.*
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP CMD
               WHERE CMD.PLAN_ID = P_PLAN_ID
                 AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD.PLANNING_MAKE_BUY_CODE = 2 --采购件
                 AND CMD.LOW_LEVEL_CODE = 1000
                 AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
                 AND NOT EXISTS (SELECT 1 --排除组合下面的采购件
                        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                             CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                             CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1
                       WHERE CMD1.PLAN_ID = P_PLAN_ID
                         AND CMD1.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                         AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                         AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                         AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                         AND CMD1.LOW_LEVEL_CODE = 999
                         AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                         AND CMBH1.SUBSTITUTE_CLASS = 2 --成组标记
                         AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                         AND CMBH1.STATUS_CODE = 'APPROVED'
                         AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                             TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                             TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE)))
                 AND NOT EXISTS
               (SELECT 1 --排除SA部分下的采购件
                        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                             CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                             CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1,
                             CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR1
                       WHERE CMD1.PLAN_ID = P_PLAN_ID
                         AND CMD1.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                         AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                         AND CMD1.ITEM_TYPE != 'PH' --排除虚拟件
                         AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                         AND GET_MPS_FLAG(CMD1.ORGANIZATION_ID, CMD1.INVENTORY_ITEM_ID) = 'N'
                         AND CMD1.ORIGINATION_TYPE != 12 --MPS需求
                         AND CMD1.LOW_LEVEL_CODE = 999
                         AND CMBH1.SUBSTITUTE_CLASS = 3
                         AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                         AND CMBL1.GROUP_ELEMENT_ID = CMCR1.GROUP_ELEMENT_ID
                         AND CMBH1.STATUS_CODE = 'APPROVED'
                         AND CMCR1.MSC_SUB_COMP_ITEM_ID IS NOT NULL
                         AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID
                         AND CMCR1.MSC_COMPONENT_ITEM_ID = CMD1.INVENTORY_ITEM_ID
                         AND (TRUNC(SYSDATE) >= TRUNC(CMBH1.EFFECTIVITY_DATE) OR
                             TRUNC(SYSDATE) <= TRUNC(NVL(CMBH1.DISABLE_DATE, TRUNC(SYSDATE))))
                         AND NOT EXISTS
                       (SELECT 1
                                FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF1
                               WHERE CMF1.PEGGING_ID = CMD1.PREV_PEGGING_ID
                                 AND CMD1.PLAN_ID = CMF1.PLAN_ID
                                 AND CMD1.SR_INSTANCE_ID = CMF1.SR_INSTANCE_ID
                                 AND CMF1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                                     TRUNC(NVL(CMBH1.DISABLE_DATE, TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE)))
                                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                                     TRUNC(NVL(CMBL1.DISABLE_DATE, TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE)))))
                 AND NOT EXISTS (SELECT 1 --排除错阶第一层下面的采购件
                        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                             CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                             CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1
                       WHERE CMD1.PLAN_ID = CMD.PLAN_ID
                         AND CMD1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID
                         AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                         AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                         AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                         AND CMD1.LOW_LEVEL_CODE = 998
                         AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                         AND CMBH1.SUBSTITUTE_CLASS = 3 --错阶标记
                         AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                         AND CMBH1.STATUS_CODE = 'APPROVED'
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                             TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                             TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                         AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID)
                 AND NOT EXISTS (SELECT 1 --排除错阶第二层SA下面的采购件
                        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                             CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                             CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1,
                             CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF1
                       WHERE CMD1.PLAN_ID = CMD.PLAN_ID
                         AND CMD1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID
                         AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                         AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                         AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                         AND CMD1.LOW_LEVEL_CODE = 998
                         AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                         AND CMBH1.SUBSTITUTE_CLASS = 3 --错阶标记
                         AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                         AND CMBH1.STATUS_CODE = 'APPROVED'
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                             TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                             TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                         AND CMD1.PEGGING_ID = CMF1.PREV_PEGGING_ID
                         AND CMF1.PEGGING_ID = CMD.PREV_PEGGING_ID
                         AND CMF1.PLAN_ID = CMD.PLAN_ID
                         AND CMF1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID)
               ORDER BY 2, 1) NO_SA_PCBA;
  BEGIN
    --LT_CUX_MSC_DEMANDS_PLAN.delete;
    TRUNC_TEMP_TABLE('CUX.CUX_MSC_DEMANDS_PLAN_TMP');
    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TMP
      SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
  
    --IF GV_LOG_FLAG = 'Y' THEN
    BEGIN
      SELECT COUNT(*)
        INTO LN_BUY_COUNT_T
        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP CMD
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 2 --采购件
         AND CMD.LOW_LEVEL_CODE = 1000
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND NOT EXISTS (SELECT 1 --排除组合下面的采购件
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1
               WHERE CMD1.PLAN_ID = P_PLAN_ID
                 AND CMD1.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                 AND CMD1.LOW_LEVEL_CODE = 999
                 AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                 AND CMBH1.SUBSTITUTE_CLASS = 2 --成组标记
                 AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                 AND CMBH1.STATUS_CODE = 'APPROVED'
                 AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE)))
         AND NOT EXISTS
       (SELECT 1 --排除SA部分下的采购件
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1,
                     CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR1
               WHERE CMD1.PLAN_ID = P_PLAN_ID
                 AND CMD1.SR_INSTANCE_ID = P_SR_INSTANCE_ID
                 AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD1.ITEM_TYPE != 'PH' --排除虚拟件
                 AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                 AND GET_MPS_FLAG(CMD1.ORGANIZATION_ID, CMD1.INVENTORY_ITEM_ID) = 'N'
                 AND CMD1.ORIGINATION_TYPE != 12 --MPS需求
                 AND CMD1.LOW_LEVEL_CODE = 999
                 AND CMBH1.SUBSTITUTE_CLASS = 3
                 AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                 AND CMBL1.GROUP_ELEMENT_ID = CMCR1.GROUP_ELEMENT_ID
                 AND CMBH1.STATUS_CODE = 'APPROVED'
                 AND CMCR1.MSC_SUB_COMP_ITEM_ID IS NOT NULL
                 AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID
                 AND CMCR1.MSC_COMPONENT_ITEM_ID = CMD1.INVENTORY_ITEM_ID
                 AND (TRUNC(SYSDATE) >= TRUNC(CMBH1.EFFECTIVITY_DATE) OR
                     TRUNC(SYSDATE) <= TRUNC(NVL(CMBH1.DISABLE_DATE, TRUNC(SYSDATE))))
                 AND NOT EXISTS
               (SELECT 1
                        FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF1
                       WHERE CMF1.PEGGING_ID = CMD1.PREV_PEGGING_ID
                         AND CMD1.PLAN_ID = CMF1.PLAN_ID
                         AND CMD1.SR_INSTANCE_ID = CMF1.SR_INSTANCE_ID
                         AND CMF1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                             TRUNC(NVL(CMBH1.DISABLE_DATE, TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE)))
                         AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                             TRUNC(NVL(CMBL1.DISABLE_DATE, TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE)))))
         AND NOT EXISTS (SELECT 1 --排除错阶第一层下面的采购件
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1
               WHERE CMD1.PLAN_ID = CMD.PLAN_ID
                 AND CMD1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID
                 AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                 AND CMD1.LOW_LEVEL_CODE = 998
                 AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                 AND CMBH1.SUBSTITUTE_CLASS = 3 --错阶标记
                 AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                 AND CMBH1.STATUS_CODE = 'APPROVED'
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                 AND CMD1.PEGGING_ID = CMD.PREV_PEGGING_ID)
         AND NOT EXISTS (SELECT 1 --排除错阶第二层SA下面的采购件
                FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD1,
                     CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH1,
                     CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL1,
                     CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF1
               WHERE CMD1.PLAN_ID = CMD.PLAN_ID
                 AND CMD1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID
                 AND CMD1.PLANNING_MAKE_BUY_CODE = 1 --制造件
                 AND CMD1.ITEM_TYPE = 'PH' --虚拟件
                 AND NVL(CMD1.ATTRIBUTE1, 'N') = 'N'
                 AND CMD1.LOW_LEVEL_CODE = 998
                 AND CMD1.INVENTORY_ITEM_ID = CMBL1.MSC_ITEM_ID
                 AND CMBH1.SUBSTITUTE_CLASS = 3 --错阶标记
                 AND CMBH1.GROUP_ID = CMBL1.GROUP_ID
                 AND CMBH1.STATUS_CODE = 'APPROVED'
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH1.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                 AND TRUNC(CMD1.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL1.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL1.DISABLE_DATE, CMD1.USING_ASSEMBLY_DEMAND_DATE))
                 AND CMD1.PEGGING_ID = CMF1.PREV_PEGGING_ID
                 AND CMF1.PEGGING_ID = CMD.PREV_PEGGING_ID
                 AND CMF1.PLAN_ID = CMD.PLAN_ID
                 AND CMF1.SR_INSTANCE_ID = CMD.SR_INSTANCE_ID);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_BUY_COUNT_T := 0;
    END;
  
    BEGIN
      SELECT COUNT(*)
        INTO LN_CROSS_COUNT_T
        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP CMD, CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH, CUX.CUX_MSC_BOM_SUB_GRP_LINES CMBL
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
         AND CMD.ITEM_TYPE = 'PH' --虚拟件
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND CMD.LOW_LEVEL_CODE = 998
         AND CMD.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
         AND CMBH.SUBSTITUTE_CLASS = 3 --错阶标记
         AND CMBH.GROUP_ID = CMBL.GROUP_ID
         AND CMBH.STATUS_CODE = 'APPROVED'
         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
             TRUNC(NVL(CMBH.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
             TRUNC(NVL(CMBL.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_CROSS_COUNT_T := 0;
    END;
  
    BEGIN
      SELECT COUNT(*)
        INTO LN_PH_COUNT_T
        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP CMD, CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH, CUX.CUX_MSC_BOM_SUB_GRP_LINES CMBL
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
         AND CMD.ITEM_TYPE = 'PH' --虚拟件
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND CMD.LOW_LEVEL_CODE = 999
         AND CMD.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
         AND CMBH.SUBSTITUTE_CLASS = 2 --成组标记
         AND CMBH.GROUP_ID = CMBL.GROUP_ID
         AND CMBH.STATUS_CODE = 'APPROVED'
         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
             TRUNC(NVL(CMBH.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE))
         AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
             TRUNC(NVL(CMBL.DISABLE_DATE, CMD.USING_ASSEMBLY_DEMAND_DATE));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_PH_COUNT_T := 0;
    END;
  
    BEGIN
      SELECT COUNT(*)
        INTO LN_SA_COUNT_T
        FROM CUX.CUX_MSC_DEMANDS_PLAN_TMP    CMD,
             CUX.CUX_MSC_BOM_SUB_GRP_HEADERS CMBH,
             CUX.CUX_MSC_BOM_SUB_GRP_LINES   CMBL,
             CUX.CUX_MSC_BOM_CROSS_LEVEL_SUB CMCR
       WHERE CMD.PLAN_ID = P_PLAN_ID
         AND CMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMD.PLANNING_MAKE_BUY_CODE = 1 --制造件
         AND CMD.ITEM_TYPE != 'PH' --排除虚拟件
         AND NVL(CMD.ATTRIBUTE1, 'N') = 'N'
         AND GET_MPS_FLAG(CMD.ORGANIZATION_ID, CMD.INVENTORY_ITEM_ID) = 'N'
         AND CMD.ORIGINATION_TYPE != 12 --MPS需求
         AND CMD.LOW_LEVEL_CODE = 999
         AND CMBH.SUBSTITUTE_CLASS = 3
         AND CMBH.GROUP_ID = CMBL.GROUP_ID
         AND CMBL.GROUP_ELEMENT_ID = CMCR.GROUP_ELEMENT_ID
         AND CMBH.STATUS_CODE = 'APPROVED'
         AND CMCR.MSC_SUB_COMP_ITEM_ID IS NOT NULL
         AND CMCR.MSC_COMPONENT_ITEM_ID = CMD.INVENTORY_ITEM_ID
         AND (TRUNC(SYSDATE) >= TRUNC(CMBH.EFFECTIVITY_DATE) OR
             TRUNC(SYSDATE) <= TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(SYSDATE))))
         AND NOT EXISTS (SELECT 1
                FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
               WHERE CMF.PEGGING_ID = CMD.PREV_PEGGING_ID
                 AND CMD.PLAN_ID = CMF.PLAN_ID
                 AND CMD.SR_INSTANCE_ID = CMF.SR_INSTANCE_ID
                 AND CMF.INVENTORY_ITEM_ID = CMBL.MSC_ITEM_ID
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBH.EFFECTIVITY_DATE) AND
                     TRUNC(NVL(CMBH.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE)))
                 AND TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE) BETWEEN TRUNC(CMBL.EFFECTIVE_DATE) AND
                     TRUNC(NVL(CMBL.DISABLE_DATE, TRUNC(CMD.USING_ASSEMBLY_DEMAND_DATE))));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_SA_COUNT_T := 0;
    END;
  
    --END IF;
    OPEN LC_MAIN;
    LOOP
      FETCH LC_MAIN bulk collect
        into LT_CUX_MSC_DEMANDS_PLAN LIMIT 5000;
    
      for r in 1 .. LT_CUX_MSC_DEMANDS_PLAN.count loop
        --FND_FILE.PUT_LINE(FND_FILE.LOG, '序号：' || r);
        LT_DEMAND_DETAIL := NULL;
        LT_DEMAND_DETAIL := LT_CUX_MSC_DEMANDS_PLAN(r);
      
        IF LT_CUX_MSC_DEMANDS_PLAN(r).LOW_LEVEL_CODE = 998 THEN
          LV_ERROR_CODE  := NULL;
          LN_CROSS_COUNT := NVL(LN_CROSS_COUNT, 0) + 1;
        
          LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                      'CROSS_COUNTS',
                      '总记录数：' || LN_CROSS_COUNT_T || '  DEMAND_ID = ' || LT_DEMAND_DETAIL.DEMAND_ID || '  CROSS记录：' ||
                      LN_CROSS_COUNT);
          IF GV_LOG_FLAG = 'Y' THEN
            FND_FILE.PUT_LINE(FND_FILE.LOG, '类型：错阶');
            FND_FILE.PUT_LINE(FND_FILE.LOG,
                              '物料：' || Msc_GET_name.item_name(LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
            FND_FILE.PUT_LINE(FND_FILE.LOG,
                              '需求时间：' ||
                              TO_CHAR(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE, 'YYYY-MM-DD HH24:MI:SS'));
          END IF;
          CALCULATE_CROSS_PROCESS(p_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                                  P_PLAN_ID        => P_PLAN_ID,
                                  P_DEMAND_DETAIL  => LT_DEMAND_DETAIL,
                                  P_D_COUNT        => LN_D_COUNT,
                                  P_S_COUNT        => LN_S_COUNT,
                                  P_P_COUNT        => LN_P_COUNT,
                                  PO_ERROR_CODE    => LV_ERROR_CODE); --处理错阶
          IF LV_ERROR_CODE = 2 THEN
            RAISE LE_EXCEPTION;
          END IF;
        ELSIF LT_CUX_MSC_DEMANDS_PLAN(r).LOW_LEVEL_CODE = 999 THEN
          IF LT_CUX_MSC_DEMANDS_PLAN(r).ITEM_TYPE = 'PH' THEN
            LV_ERROR_CODE := NULL;
            LN_PH_COUNT   := NVL(LN_PH_COUNT, 0) + 1;
          
            LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                        'PH_COUNTS',
                        '总记录数：' || LN_PH_COUNT_T || '  DEMAND_ID = ' || LT_DEMAND_DETAIL.DEMAND_ID || '  组合记录：' ||
                        LN_PH_COUNT);
            IF GV_LOG_FLAG = 'Y' THEN
              FND_FILE.PUT_LINE(FND_FILE.LOG, '类型：组合');
              FND_FILE.PUT_LINE(FND_FILE.LOG,
                                '物料：' || Msc_GET_name.item_name(LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
              FND_FILE.PUT_LINE(FND_FILE.LOG,
                                '需求时间：' ||
                                TO_CHAR(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE, 'YYYY-MM-DD HH24:MI:SS'));
            END IF;
            CALCULATE_PH_PROCESS(P_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                                 P_PLAN_ID        => P_PLAN_ID,
                                 P_DEMAND_DETAIL  => LT_DEMAND_DETAIL,
                                 P_D_COUNT        => LN_D_COUNT,
                                 P_S_COUNT        => LN_S_COUNT,
                                 P_P_COUNT        => LN_P_COUNT,
                                 PO_ERROR_CODE    => LV_ERROR_CODE); --处理组合件
            IF LV_ERROR_CODE = 2 THEN
              RAISE LE_EXCEPTION;
            END IF;
          ELSE
            LV_ERROR_CODE := NULL;
            LN_SA_COUNT   := NVL(LN_SA_COUNT, 0) + 1;
          
            LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                        'SA_COUNTS',
                        '总记录数：' || LN_SA_COUNT_T || '  DEMAND_ID = ' || LT_DEMAND_DETAIL.DEMAND_ID || '  SA记录：' ||
                        LN_SA_COUNT);
            IF GV_LOG_FLAG = 'Y' THEN
              FND_FILE.PUT_LINE(FND_FILE.LOG, '类型：错阶制造');
              FND_FILE.PUT_LINE(FND_FILE.LOG,
                                '物料：' || Msc_GET_name.item_name(LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
              FND_FILE.PUT_LINE(FND_FILE.LOG,
                                '需求时间：' ||
                                TO_CHAR(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE, 'YYYY-MM-DD HH24:MI:SS'));
            END IF;
            CALCULATE_CROSS_SA_PROCESS(P_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                                       P_PLAN_ID        => P_PLAN_ID,
                                       P_DEMAND_DETAIL  => LT_DEMAND_DETAIL,
                                       P_D_COUNT        => LN_D_COUNT,
                                       P_S_COUNT        => LN_S_COUNT,
                                       P_P_COUNT        => LN_P_COUNT,
                                       PO_ERROR_CODE    => LV_ERROR_CODE); --处理制造件
          
            IF LV_ERROR_CODE = 2 THEN
              RAISE LE_EXCEPTION;
            END IF;
          
          END IF;
        ELSIF LT_CUX_MSC_DEMANDS_PLAN(r).LOW_LEVEL_CODE = 1000 THEN
          LV_ERROR_CODE := NULL;
          LN_BUY_COUNT  := NVL(LN_BUY_COUNT, 0) + 1;
        
          LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                      'BUY_COUNTS',
                      '总记录数：' || LN_BUY_COUNT_T || '  DEMAND_ID = ' || LT_DEMAND_DETAIL.DEMAND_ID || '  采购件记录：' ||
                      LN_BUY_COUNT);
          IF GV_LOG_FLAG = 'Y' THEN
            FND_FILE.PUT_LINE(FND_FILE.LOG, '类型：采购件');
            FND_FILE.PUT_LINE(FND_FILE.LOG,
                              '物料：' || Msc_GET_name.item_name(LT_CUX_MSC_DEMANDS_PLAN(r).INVENTORY_ITEM_ID));
            FND_FILE.PUT_LINE(FND_FILE.LOG,
                              '需求时间：' ||
                              TO_CHAR(LT_CUX_MSC_DEMANDS_PLAN(r).USING_ASSEMBLY_DEMAND_DATE, 'YYYY-MM-DD HH24:MI:SS'));
          END IF;
          CALCULATE_BUY_PROCESS(p_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                                P_PLAN_ID        => P_PLAN_ID,
                                P_DEMAND_DETAIL  => LT_DEMAND_DETAIL,
                                P_D_COUNT        => LN_D_COUNT,
                                P_S_COUNT        => LN_S_COUNT,
                                P_P_COUNT        => LN_P_COUNT,
                                PO_ERROR_CODE    => LV_ERROR_CODE); --处理采购件
          IF LV_ERROR_CODE = 2 THEN
            RAISE LE_EXCEPTION;
          END IF;
        END IF;
        COMMIT;
      END LOOP;
      EXIT WHEN LC_MAIN%NOTFOUND;
    END LOOP;
    CLOSE LC_MAIN;
  
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'CORSS_COUNT', '总处理错阶记录数：' || LN_CROSS_COUNT);
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'SA_COUNT', '总处理SA记录数：' || LN_SA_COUNT);
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'PH_COUNT', '总处理组合记录数：' || LN_PH_COUNT);
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID, 'BUY_COUNT', '总处理采购件记录数：' || LN_BUY_COUNT);
  
    --工单有剩余部分写入剩余数据
    FOR LR_SUPPLY_DJ IN (SELECT CMW.SUPPLY_DATE, CMS.*
                           FROM CUX.CUX_MSC_WIP_PROCESS_RANGE CMW, CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                          WHERE CMS.ROW_ID = CMW.ROW_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1) LOOP
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_DJ.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL;
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_DJ.SUPPLY_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_DJ.INVENTORY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_DJ.ORGANIZATION_ID;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_DJ.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_DJ.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_DJ.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           LR_SUPPLY_DJ.ORGANIZATION_ID,
           LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
           LR_SUPPLY_DJ.NEW_TRANSACTION_ID,
           '',
           LR_SUPPLY_DJ.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
      
      --Added by V1.028
      UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
      SET    CMS.REMAIN_QTY = 0
      WHERE  CMS.ROW_ID = LR_SUPPLY_DJ.ROW_ID;
    
      INSERT_WIP_DEMANDS(P_SR_INSTANCE_ID        => P_SR_INSTANCE_ID,
                         P_PLAN_ID               => P_PLAN_ID,
                         P_ORGANIZATION_ID       => LR_SUPPLY_DJ.ORGANIZATION_ID,
                         P_WIP_ENTITY_ID         => LR_SUPPLY_DJ.DISPOSITION_ID,
                         P_ASSY_ITEM_ID          => LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
                         P_PRV_PEGGING_ID        => LN_PEGGING_ID,
                         P_END_PEGGING_ID        => LN_PEGGING_ID,
                         P_ASSY_DEMAND_COMP_DATE => LR_SUPPLY_DJ.SUPPLY_DATE,
                         P_ASSY_DEMAND_DATE      => LR_SUPPLY_DJ.SUPPLY_DATE,
                         P_END_ORIGINATION_TYPE  => NULL,
                         P_LEVEL_FLAG            => 1,
                         P_PLAN_QTY              => LR_SUPPLY_DJ.REMAIN_QTY,
                         P_D_COUNT               => LN_D_COUNT,
                         P_S_COUNT               => LN_S_COUNT,
                         P_P_COUNT               => LN_P_COUNT);
    END LOOP;
  
    BEGIN
      DELETE CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMF
       WHERE CMF.PEGGING_ID IN (SELECT CMR.PEGGING_ID FROM CUX.CUX_MSC_RDJ_DELETE_T CMR WHERE CMR.DELETE_FLAG = 'Y');
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_DELETE_MFP',
            '***ERROR*** DELETE RDJ PEGGING 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
    /*FOR LR_RDJ IN (SELECT *
    FROM CUX.CUX_MSC_RDJ_DELETE_T
    WHERE  DELETE_FLAG = 'Y') LOOP
    DELETE CUX.CUX_MSC_FULL_PEGGING_PLAN_T
    WHERE  PEGGING_ID = LR_RDJ.PEGGING_ID;
    END LOOP;*/
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
  END;

  /***********************************************************************************
   NAME: UPDATE_ITEM_ATTRIBUTES
   DESCRIPTION:备份收集的ITEM数据，并将收集的ITEM的最小批次增加，最小订货量更新为空，将舍入订单数量更新为空。
  ***********************************************************************************/
  PROCEDURE UPDATE_ITEM_ATTRIBUTES(errbuf OUT VARCHAR2, retcode OUT VARCHAR2, P_SR_INSTANCE_ID NUMBER) IS
    LE_EXCEPTION EXCEPTION;
    LV_SQL    VARCHAR2(4000);
    lv_dblink msc_apps_instances.m2a_dblink%TYPE;
  BEGIN
    BEGIN
      SELECT MAX(mai.m2a_dblink) INTO lv_dblink FROM msc_apps_instances mai WHERE mai.instance_id = p_SR_INSTANCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        lv_dblink := NULL;
    END;
    IF lv_dblink IS NOT NULL THEN
      lv_dblink := '@' || lv_dblink;
    END IF;
    --删除原来的备份数据
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'DEL_ITEM_ATTU_BCK',
        '删除ITEM属性备份表 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_SYSTEM_ITEMS CMSI
       WHERE CMSI.ORGANIZATION_ID IN (SELECT CMOR.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMOR);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'DEL_ITEM_ATTU_BCK',
            '***ERROR*** 删除ITEM属性备份表异常！' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --重新备份
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'BACK_ITEM_ATTU',
        '备份ITEM属性备份表 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_SYSTEM_ITEMS
        SELECT *
          FROM MSC.MSC_SYSTEM_ITEMS MSI
         WHERE MSI.ORGANIZATION_ID IN (SELECT CMOR.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMOR)
           AND MSI.PLAN_ID = -1
           AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'BACK_ITEM_ATTU',
            '***ERROR*** 备份ITEM属性备份表异常！' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  
    --更新属性
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'UPDATE_ITEM_ATTU',
        '更新ITEM属性收集表 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LV_SQL := 'UPDATE MSC.MSC_SYSTEM_ITEMS MSI' || CHR(10) || 'SET MSI.ROUNDING_CONTROL_TYPE  = 2,' --舍入订单数量
              || CHR(10) || 'MSI.FIXED_LOT_MULTIPLIER   = NULL, ' --固定批次增加
              || CHR(10) || 'MSI.MINIMUM_ORDER_QUANTITY = NULL, ' --最小采购量
              || CHR(10) || 'MSI.MAXIMUM_ORDER_QUANTITY = NULL, ' --最大订单数量
              || CHR(10) || 'MSI.FIXED_ORDER_QUANTITY   = NULL, ' --固定订货量
              || CHR(10) || 'MSI.FIXED_DAYS_SUPPLY      = NULL, ' --固定供应天数
              || CHR(10) || 'MSI.ATTRIBUTE1            =' || CHR(10) || '(SELECT MSI1.ITEM_TYPE' || CHR(10) ||
              'FROM MTL_SYSTEM_ITEMS' || lv_dblink || ' MSI1, MSC_ITEM_ID_LID MII' || CHR(10) ||
              'WHERE MSI1.ORGANIZATION_ID = MSI.ORGANIZATION_ID' || CHR(10) ||
              'AND MSI1.INVENTORY_ITEM_ID = MII.SR_INVENTORY_ITEM_ID ' || CHR(10) ||
              'AND MII.INVENTORY_ITEM_ID = MSI.INVENTORY_ITEM_ID)' || CHR(10) ||
              'WHERE MSI.ORGANIZATION_ID IN (SELECT CMOR.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMOR) ' || CHR(10) ||
              'AND MSI.PLAN_ID = -1' || CHR(10) || 'AND MSI.SR_INSTANCE_ID = ' || P_SR_INSTANCE_ID;
  
    BEGIN
      EXECUTE IMMEDIATE LV_SQL;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'UPDATE_ITEM_ATTU',
            '***ERROR*** 更新ITEM属性收集表异常！' || dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXCEPTION;
    END;
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      retcode := 2;
  END UPDATE_ITEM_ATTRIBUTES;

  /***********************************************************************************
   NAME: PROCESS_PLAN_ORDER_SUPPLIY
   DESCRIPTION:处理PLAN ORDER记录，进行订单修正因子计算
  ***********************************************************************************/
  PROCEDURE PROCESS_PLAN_ORDER_SUPPLIY(PO_ERROR_CODE OUT VARCHAR2, P_PLAN_ID NUMBER, P_SR_INSTANCE_ID NUMBER) IS
    CURSOR LC_PLAN_ORDER IS
      SELECT CMS.ORGANIZATION_ID, CMS.INVENTORY_ITEM_ID, CMS.SUPPLIER_ID, CMS.SUPPLIER_SITE_ID, COUNT(*) SUPPLY_COUNT
      --MIN(CMS.NEW_SCHEDULE_DATE) MIN_NEW_DUE_DATE
        FROM CUX.CUX_MSC_SUPPLIES_PLAN_T CMS, MSC_SYSTEM_ITEMS CMSI
       WHERE 1 = 1
         AND CMSI.PLAN_ID = CMS.PLAN_ID
         AND CMS.SR_INSTANCE_ID = CMSI.SR_INSTANCE_ID
         AND CMS.ORGANIZATION_ID = CMSI.ORGANIZATION_ID
         AND CMS.INVENTORY_ITEM_ID = CMSI.INVENTORY_ITEM_ID
         AND CMS.PLAN_ID = P_PLAN_ID
         AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
            --AND CMS.INVENTORY_ITEM_ID = 2632810
         AND CMSI.LOW_LEVEL_CODE = 1000
         AND CMS.ORDER_TYPE = 5 --计划单
         AND SIGN(CMS.NEW_ORDER_QUANTITY) = 1
       GROUP BY CMS.ORGANIZATION_ID, CMS.INVENTORY_ITEM_ID, CMS.SUPPLIER_ID, CMS.SUPPLIER_SITE_ID
       ORDER BY CMS.ORGANIZATION_ID, CMS.INVENTORY_ITEM_ID;
  
    CURSOR LC_DETAILS(P_ORGANIZATION_ID   NUMBER,
                      P_INVENTORY_ITEM_ID NUMBER,
                      P_SUPPLIER_ID       NUMBER,
                      P_SUPPLIER_SITE_ID  NUMBER) IS
      SELECT *
        FROM CUX.CUX_MSC_SUPPLIES_PLAN_T CMS
       WHERE 1 = 1
         AND CMS.PLAN_ID = P_PLAN_ID
         AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMS.ORGANIZATION_ID = P_ORGANIZATION_ID
         AND CMS.INVENTORY_ITEM_ID = P_INVENTORY_ITEM_ID
         AND NVL(CMS.SUPPLIER_ID, -999) = NVL(P_SUPPLIER_ID, -999)
         AND NVL(CMS.SUPPLIER_SITE_ID, -999) = NVL(P_SUPPLIER_SITE_ID, -999)
         AND CMS.ORDER_TYPE = 5 --计划单
         AND SIGN(CMS.NEW_ORDER_QUANTITY) = 1
       ORDER BY CMS.NEW_SCHEDULE_DATE, CMS.TRANSACTION_ID;
  
    LN_ASL_FIXED_LOT_MULTIPLIER   NUMBER; --ASL固定批次增加
    LN_ASL_MINIMUM_ORDER_QUANTITY NUMBER; --ASL最小采购量
    LN_ROUNDING_CONTROL_TYPE      NUMBER; --舍入订单数量
    LN_FIXED_LOT_MULTIPLIER       NUMBER; --固定批次增加
    LN_MINIMUM_ORDER_QUANTITY     NUMBER; --最小采购量
    -- LN_MAXIMUM_ORDER_QUANTITY     NUMBER; --最大订单数量
    --LN_FIXED_ORDER_QUANTITY       NUMBER; --固定订货量
    LN_FIXED_DAYS_SUPPLY NUMBER; --固定供应天数
    LD_START_DATE        DATE;
    LD_END_DATE          DATE;
    LN_COUNT             NUMBER := 1;
    LN_SUPPLY_QTY        NUMBER;
    LN_PLAN_QTY          NUMBER;
    LN_HEADER_COUNT      NUMBER := 0;
    LN_LINE_COUNT        NUMBER := 0;
    LN_HEADER_ID         NUMBER;
    LN_SUPPLY_COUNT      NUMBER;
    LN_EXCESS_QTY        NUMBER;
    LN_CROSS_COUNT       NUMBER;
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE               VARCHAR2(10);
    LN_BID_FIXED_LOT_MULTIPLIER NUMBER;
    LN_BID_MIN_ORDER_QUANTITY   NUMBER;
  BEGIN
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '001订单因子修正开始时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    FOR LR_PLAN_ORDER IN LC_PLAN_ORDER LOOP
    
      BEGIN
        SELECT nvl(CMB.FIXED_LOT_MULTIPLIER, 0), nvl(CMB.MIN_ORDER_QUANTITY, 0)
          INTO LN_BID_FIXED_LOT_MULTIPLIER, LN_BID_MIN_ORDER_QUANTITY
          FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T cmb, CUX.CUX_MSC_ORG_RANGE CMOR
         WHERE 1 = 1
           AND CMB.MSC_INVENTORY_ITEM_ID = LR_PLAN_ORDER.INVENTORY_ITEM_ID
           AND CMOR.ORGANIZATION_ID = LR_PLAN_ORDER.ORGANIZATION_ID
           AND NVL(CMB.MSC_VENDOR_ID, -9999) = NVL(LR_PLAN_ORDER.SUPPLIER_ID, -9999)
           AND CMB.ORG_ID = CMOR.ORG_ID
           AND TRUNC(SYSDATE) BETWEEN NVL(CMB.EFFECTIVE_DATE, TRUNC(SYSDATE) - 1) AND
               NVL(CMB.DISABLE_DATE, TRUNC(SYSDATE) + 1);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_BID_FIXED_LOT_MULTIPLIER := 0;
          LN_BID_MIN_ORDER_QUANTITY   := 0;
      END;
    
      BEGIN
        SELECT nvl(MIS.FIXED_LOT_MULTIPLIER, 0), nvl(MIS.MINIMUM_ORDER_QUANTITY, 0)
          INTO LN_ASL_FIXED_LOT_MULTIPLIER, LN_ASL_MINIMUM_ORDER_QUANTITY
          FROM MSC_ITEM_SUPPLIERS MIS
         WHERE MIS.PLAN_ID = -1 --P_PLAN_ID
           AND MIS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND MIS.ORGANIZATION_ID = LR_PLAN_ORDER.ORGANIZATION_ID
           AND MIS.INVENTORY_ITEM_ID = LR_PLAN_ORDER.INVENTORY_ITEM_ID
           AND NVL(MIS.SUPPLIER_ID, -9999) = NVL(LR_PLAN_ORDER.SUPPLIER_ID, -9999)
           AND NVL(MIS.SUPPLIER_SITE_ID, -9999) = NVL(LR_PLAN_ORDER.SUPPLIER_SITE_ID, -9999);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_ASL_FIXED_LOT_MULTIPLIER   := 0;
          LN_ASL_MINIMUM_ORDER_QUANTITY := 0;
      END;
    
      BEGIN
        SELECT CMSI.ROUNDING_CONTROL_TYPE, --舍入订单数量
               nvl(CMSI.FIXED_LOT_MULTIPLIER, 0), --固定批次增加
               nvl(CMSI.MINIMUM_ORDER_QUANTITY, 0), --最小采购量
               --CMSI.MAXIMUM_ORDER_QUANTITY, --最大订单数量
               --CMSI.FIXED_ORDER_QUANTITY, --固定订货量
               DECODE(NVL(CMSI.FIXED_DAYS_SUPPLY, 1), 0, 1, NVL(CMSI.FIXED_DAYS_SUPPLY, 1)) --固定供应天数 Changed by V1.019
          INTO LN_ROUNDING_CONTROL_TYPE, --舍入订单数量
               LN_FIXED_LOT_MULTIPLIER, --固定批次增加
               LN_MINIMUM_ORDER_QUANTITY, --最小采购量
               --LN_MAXIMUM_ORDER_QUANTITY, --最大订单数量
               --LN_FIXED_ORDER_QUANTITY, --固定订货量
               LN_FIXED_DAYS_SUPPLY --固定供应天数
          FROM CUX.CUX_MSC_SYSTEM_ITEMS CMSI
         WHERE CMSI.PLAN_ID = -1
           AND CMSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND CMSI.ORGANIZATION_ID = LR_PLAN_ORDER.ORGANIZATION_ID
           AND CMSI.INVENTORY_ITEM_ID = LR_PLAN_ORDER.INVENTORY_ITEM_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_ROUNDING_CONTROL_TYPE  := 2; --舍入订单数量
          LN_FIXED_LOT_MULTIPLIER   := 0; --固定批次增加
          LN_MINIMUM_ORDER_QUANTITY := 0; --最小采购量
          --LN_MAXIMUM_ORDER_QUANTITY := 0; --最大订单数量
          --LN_FIXED_ORDER_QUANTITY   := 0; --固定订货量
          LN_FIXED_DAYS_SUPPLY := 1; --固定供应天数
      END;
    
      IF NVL(LN_BID_FIXED_LOT_MULTIPLIER, 0) > 0 THEN
        LN_FIXED_LOT_MULTIPLIER := LN_BID_FIXED_LOT_MULTIPLIER;
      ELSE
        IF NVL(LN_ASL_FIXED_LOT_MULTIPLIER, 0) > 0 THEN
          LN_FIXED_LOT_MULTIPLIER := LN_ASL_FIXED_LOT_MULTIPLIER;
        END IF;
      
      END IF;
    
      IF NVL(LN_BID_MIN_ORDER_QUANTITY, 0) > 0 THEN
        LN_MINIMUM_ORDER_QUANTITY := LN_BID_MIN_ORDER_QUANTITY;
      ELSE
        IF NVL(LN_ASL_MINIMUM_ORDER_QUANTITY, 0) > 0 THEN
          LN_MINIMUM_ORDER_QUANTITY := LN_ASL_MINIMUM_ORDER_QUANTITY;
        END IF;
      
      END IF;
      LN_MINIMUM_ORDER_QUANTITY := NVL(LN_MINIMUM_ORDER_QUANTITY, 0);
    
      /*LN_FIXED_LOT_MULTIPLIER   := NVL(LN_ASL_FIXED_LOT_MULTIPLIER,
      LN_FIXED_LOT_MULTIPLIER);*/
      /*LN_MINIMUM_ORDER_QUANTITY := NVL(LN_ASL_MINIMUM_ORDER_QUANTITY,
      LN_MINIMUM_ORDER_QUANTITY);*/
    
      IF LN_ROUNDING_CONTROL_TYPE = 1 THEN
        LN_FIXED_LOT_MULTIPLIER := GREATEST(NVL(LN_FIXED_LOT_MULTIPLIER, 0), 1);
      END IF;
    
      LN_SUPPLY_COUNT := LR_PLAN_ORDER.SUPPLY_COUNT;
      /*BEGIN
        SELECT COUNT(*)
          INTO LN_SUPPLY_COUNT
          FROM CUX.CUX_MSC_SUPPLIES_PLAN_T CMS
         WHERE 1 = 1
           AND CMS.PLAN_ID = P_PLAN_ID
           AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND CMS.ORGANIZATION_ID = LR_PLAN_ORDER.ORGANIZATION_ID
           AND CMS.INVENTORY_ITEM_ID = LR_PLAN_ORDER.INVENTORY_ITEM_ID
           AND NVL(CMS.SUPPLIER_ID,-999) = NVL(LR_PLAN_ORDER.SUPPLIER_ID,-999)
           AND NVL(CMS.SUPPLIER_SITE_ID, -999) =
               NVL(LR_PLAN_ORDER.SUPPLIER_SITE_ID, -999)
           AND CMS.ORDER_TYPE = 5;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          LN_SUPPLY_COUNT := 0;
      END;*/
      LN_COUNT       := 1;
      LN_EXCESS_QTY  := 0;
      LN_CROSS_COUNT := 0;
      LN_SUPPLY_QTY  := 0;
      FOR LR_DETAIL IN LC_DETAILS(LR_PLAN_ORDER.ORGANIZATION_ID,
                                  LR_PLAN_ORDER.INVENTORY_ITEM_ID,
                                  LR_PLAN_ORDER.SUPPLIER_ID,
                                  LR_PLAN_ORDER.SUPPLIER_SITE_ID) LOOP
        IF LN_COUNT = 1 THEN
          LN_SUPPLY_QTY := 0;
          LD_START_DATE := TRUNC(LR_DETAIL.NEW_SCHEDULE_DATE);
          LD_END_DATE   := LD_START_DATE + LN_FIXED_DAYS_SUPPLY - 1;
        
          SELECT CUX.CUX_MSC_PROCESS_SUPPLIES_H_S.NEXTVAL INTO LN_HEADER_ID FROM DUAL;
          LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
          LT_PROCESS_SUPPLIES_H.extend;
          LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).HEADER_ID := LN_HEADER_ID;
          LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
          LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).SUPPLY_DATE := LR_DETAIL.NEW_SCHEDULE_DATE;
        END IF;
      
        --同一个日期范围
        IF TRUNC(LR_DETAIL.NEW_SCHEDULE_DATE) >= LD_START_DATE AND TRUNC(LR_DETAIL.NEW_SCHEDULE_DATE) <= LD_END_DATE THEN
          LN_SUPPLY_QTY := NVL(LN_SUPPLY_QTY, 0) + LR_DETAIL.NEW_ORDER_QUANTITY;
          LN_LINE_COUNT := LN_LINE_COUNT + 1;
          LT_PROCESS_SUPPLIES_L.extend;
          LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
          LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
          IF LN_COUNT = 1 THEN
            LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'U';
          ELSE
            LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'D';
          END IF;
        
          --最后一条记录 需要判断是否需要增加过剩记录
          IF LN_SUPPLY_COUNT = LC_DETAILS%ROWCOUNT THEN
          
            IF NVL(LN_FIXED_LOT_MULTIPLIER, 0) = 0 THEN
              IF NVL(LN_MINIMUM_ORDER_QUANTITY, 0) = 0 THEN
                LN_PLAN_QTY   := LN_SUPPLY_QTY;
                LN_EXCESS_QTY := 0;
              ELSE
                IF LN_MINIMUM_ORDER_QUANTITY > LN_SUPPLY_QTY THEN
                  LN_PLAN_QTY   := LN_MINIMUM_ORDER_QUANTITY;
                  LN_EXCESS_QTY := LN_MINIMUM_ORDER_QUANTITY - LN_SUPPLY_QTY;
                ELSE
                  LN_PLAN_QTY   := LN_SUPPLY_QTY;
                  LN_EXCESS_QTY := 0;
                END IF;
              END IF;
            ELSE
              LN_PLAN_QTY   := GREATEST(CEIL(LN_SUPPLY_QTY / LN_FIXED_LOT_MULTIPLIER),
                                        CEIL(LN_MINIMUM_ORDER_QUANTITY / LN_FIXED_LOT_MULTIPLIER)) *
                               LN_FIXED_LOT_MULTIPLIER;
              LN_EXCESS_QTY := LN_PLAN_QTY - LN_SUPPLY_QTY;
              --LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
            END IF;
          
            LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).PLAN_QTY := LN_PLAN_QTY;
            LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
            --LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
            --LN_COUNT := 1;
          ELSE
            LN_COUNT := 2;
          END IF;
        ELSE
          --跨日期范围
          LN_CROSS_COUNT := NVL(LN_CROSS_COUNT, 0) + 1;
        
          --计算上一个日期范围的计划单数量跟过剩数量
          IF LN_CROSS_COUNT = 1 THEN
          
            IF NVL(LN_FIXED_LOT_MULTIPLIER, 0) = 0 THEN
              IF NVL(LN_MINIMUM_ORDER_QUANTITY, 0) = 0 THEN
                LN_PLAN_QTY   := LN_SUPPLY_QTY;
                LN_EXCESS_QTY := 0;
              ELSE
                IF LN_MINIMUM_ORDER_QUANTITY > LN_SUPPLY_QTY THEN
                  LN_PLAN_QTY   := LN_MINIMUM_ORDER_QUANTITY;
                  LN_EXCESS_QTY := LN_MINIMUM_ORDER_QUANTITY - LN_SUPPLY_QTY;
                ELSE
                  LN_PLAN_QTY   := LN_SUPPLY_QTY;
                  LN_EXCESS_QTY := 0;
                END IF;
              END IF;
            ELSE
              LN_PLAN_QTY   := GREATEST(CEIL(LN_SUPPLY_QTY / LN_FIXED_LOT_MULTIPLIER),
                                        CEIL(LN_MINIMUM_ORDER_QUANTITY / LN_FIXED_LOT_MULTIPLIER)) *
                               LN_FIXED_LOT_MULTIPLIER;
              LN_EXCESS_QTY := LN_PLAN_QTY - LN_SUPPLY_QTY;
              --LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
            END IF;
            LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).PLAN_QTY := LN_PLAN_QTY;
          
          END IF;
        
          LN_CROSS_COUNT := NVL(LN_CROSS_COUNT, 0) + 1;
        
          --若存在过剩数量
        
          IF LN_EXCESS_QTY > 0 THEN
          
            IF LR_DETAIL.NEW_ORDER_QUANTITY < LN_EXCESS_QTY THEN
              --若计划数量小于生个日期的剩余量，合并入上个日期第一笔计划单
              LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LT_PROCESS_SUPPLIES_L.extend;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'D';
              --LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LN_EXCESS_QTY := LN_EXCESS_QTY - LR_DETAIL.NEW_ORDER_QUANTITY;
            
              IF LN_SUPPLY_COUNT = LC_DETAILS%ROWCOUNT THEN
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
                --LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
                LN_COUNT := 1;
              END IF;
            ELSIF LR_DETAIL.NEW_ORDER_QUANTITY = LN_EXCESS_QTY THEN
              --若计划数量等于上个日期的剩余量，合并入上个日期第一笔计划单
              LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LT_PROCESS_SUPPLIES_L.extend;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'D';
              --LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LN_EXCESS_QTY  := 0;
              LN_CROSS_COUNT := 0;
              LN_COUNT       := 1;
              LN_SUPPLY_QTY  := 0;
            
            ELSIF LR_DETAIL.NEW_ORDER_QUANTITY > LN_EXCESS_QTY THEN
              --若计划数量大于上个日期的剩余量，部分数量合并入上个日期第一笔计划单
              LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LT_PROCESS_SUPPLIES_L.extend;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).ALLOT_QTY := LN_EXCESS_QTY;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'I';
              --LN_LINE_COUNT := LN_LINE_COUNT + 1;
              --LN_EXCESS_QTY  := 0;
              LN_CROSS_COUNT := 0;
              LN_SUPPLY_QTY  := 0;
              --部分数量作为下个日期的计划数量
              LN_COUNT := 1;
            
              IF LN_COUNT = 1 THEN
                LD_START_DATE := TRUNC(LR_DETAIL.NEW_SCHEDULE_DATE);
                LD_END_DATE   := LD_START_DATE + LN_FIXED_DAYS_SUPPLY - 1;
              
                SELECT CUX.CUX_MSC_PROCESS_SUPPLIES_H_S.NEXTVAL INTO LN_HEADER_ID FROM DUAL;
                LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
                LT_PROCESS_SUPPLIES_H.extend;
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).HEADER_ID := LN_HEADER_ID;
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).SUPPLY_DATE := LR_DETAIL.NEW_SCHEDULE_DATE;
              END IF;
              LN_SUPPLY_QTY := NVL(LN_SUPPLY_QTY, 0) + LR_DETAIL.NEW_ORDER_QUANTITY - LN_EXCESS_QTY;
              LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LT_PROCESS_SUPPLIES_L.extend;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
              --LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).ALLOT_QTY := LN_SUPPLY_QTY;
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'U';
            
              LN_EXCESS_QTY := 0;
              --LN_LINE_COUNT := LN_LINE_COUNT + 1;
              LN_COUNT := 2;
            
              --最后一条记录 需要判断是否需要增加过剩记录
              IF LN_SUPPLY_COUNT = LC_DETAILS%ROWCOUNT THEN
              
                IF NVL(LN_FIXED_LOT_MULTIPLIER, 0) = 0 THEN
                  IF NVL(LN_MINIMUM_ORDER_QUANTITY, 0) = 0 THEN
                    LN_PLAN_QTY   := LN_SUPPLY_QTY;
                    LN_EXCESS_QTY := 0;
                  ELSE
                    IF LN_MINIMUM_ORDER_QUANTITY > LN_SUPPLY_QTY THEN
                      LN_PLAN_QTY   := LN_MINIMUM_ORDER_QUANTITY;
                      LN_EXCESS_QTY := LN_MINIMUM_ORDER_QUANTITY - LN_SUPPLY_QTY;
                    ELSE
                      LN_PLAN_QTY   := LN_SUPPLY_QTY;
                      LN_EXCESS_QTY := 0;
                    END IF;
                  END IF;
                ELSE
                  LN_PLAN_QTY   := GREATEST(CEIL(LN_SUPPLY_QTY / LN_FIXED_LOT_MULTIPLIER),
                                            CEIL(LN_MINIMUM_ORDER_QUANTITY / LN_FIXED_LOT_MULTIPLIER)) *
                                   LN_FIXED_LOT_MULTIPLIER;
                  LN_EXCESS_QTY := LN_PLAN_QTY - LN_SUPPLY_QTY;
                  --LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
                END IF;
              
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).PLAN_QTY := LN_PLAN_QTY;
                LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
                --LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
                --LN_COUNT := 1;
              ELSE
                LN_COUNT := 2;
              END IF;
            
            END IF;
          
          ELSE
            --若不存在过剩数量
            LN_COUNT := 1;
          
            IF LN_COUNT = 1 THEN
              LN_SUPPLY_QTY := 0;
              LD_START_DATE := TRUNC(LR_DETAIL.NEW_SCHEDULE_DATE);
              LD_END_DATE   := LD_START_DATE + LN_FIXED_DAYS_SUPPLY - 1;
            
              SELECT CUX.CUX_MSC_PROCESS_SUPPLIES_H_S.NEXTVAL INTO LN_HEADER_ID FROM DUAL;
              LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
              LT_PROCESS_SUPPLIES_H.extend;
              LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).HEADER_ID := LN_HEADER_ID;
              LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
              LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).SUPPLY_DATE := LR_DETAIL.NEW_SCHEDULE_DATE;
              LN_CROSS_COUNT := 0;
            END IF;
          
            LN_SUPPLY_QTY := NVL(LN_SUPPLY_QTY, 0) + LR_DETAIL.NEW_ORDER_QUANTITY;
          
            LN_LINE_COUNT := LN_LINE_COUNT + 1;
            LT_PROCESS_SUPPLIES_L.extend;
            LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).HEADER_ID := LN_HEADER_ID;
            LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).TRANSACTION_ID := LR_DETAIL.TRANSACTION_ID;
            IF LN_COUNT = 1 THEN
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'I';
            ELSE
              LT_PROCESS_SUPPLIES_L(LN_LINE_COUNT).PROCESS_FLAG := 'D';
            END IF;
            LN_COUNT := LN_COUNT + 1;
            --LN_LINE_COUNT := LN_LINE_COUNT + 1;
          
            --最后一条记录 需要判断是否需要增加过剩记录
            IF LN_SUPPLY_COUNT = LC_DETAILS%ROWCOUNT THEN
            
              IF NVL(LN_FIXED_LOT_MULTIPLIER, 0) = 0 THEN
                IF NVL(LN_MINIMUM_ORDER_QUANTITY, 0) = 0 THEN
                  LN_PLAN_QTY   := LN_SUPPLY_QTY;
                  LN_EXCESS_QTY := 0;
                ELSE
                  IF LN_MINIMUM_ORDER_QUANTITY > LN_SUPPLY_QTY THEN
                    LN_PLAN_QTY   := LN_MINIMUM_ORDER_QUANTITY;
                    LN_EXCESS_QTY := LN_MINIMUM_ORDER_QUANTITY - LN_SUPPLY_QTY;
                  ELSE
                    LN_PLAN_QTY   := LN_SUPPLY_QTY;
                    LN_EXCESS_QTY := 0;
                  END IF;
                END IF;
              ELSE
                LN_PLAN_QTY   := GREATEST(CEIL(LN_SUPPLY_QTY / LN_FIXED_LOT_MULTIPLIER),
                                          CEIL(LN_MINIMUM_ORDER_QUANTITY / LN_FIXED_LOT_MULTIPLIER)) *
                                 LN_FIXED_LOT_MULTIPLIER;
                LN_EXCESS_QTY := LN_PLAN_QTY - LN_SUPPLY_QTY;
                --LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
              END IF;
            
              LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).PLAN_QTY := LN_PLAN_QTY;
              LT_PROCESS_SUPPLIES_H(LN_HEADER_COUNT).EXCESS_QTY := LN_EXCESS_QTY;
              --LN_HEADER_COUNT := LN_HEADER_COUNT + 1;
              --LN_COUNT := 1;
            ELSE
              LN_COUNT := 2;
            END IF;
          END IF;
        
        END IF;
      
      END LOOP;
    
    END LOOP;
  
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '002中间数据收集完毕时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    if LT_PROCESS_SUPPLIES_H.count > 0 then
      BEGIN
        forall j in LT_PROCESS_SUPPLIES_H.first .. LT_PROCESS_SUPPLIES_H.last
          insert /*+ append */
          into CUX.CUX_MSC_PROCESS_SUPPLIES_H
          values LT_PROCESS_SUPPLIES_H
            (j);
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT PLAN PCBA PEGGINGS 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    end if;
  
    LT_PROCESS_SUPPLIES_H.delete;
  
    if LT_PROCESS_SUPPLIES_L.count > 0 then
      BEGIN
        forall j in LT_PROCESS_SUPPLIES_L.first .. LT_PROCESS_SUPPLIES_L.last
          insert /*+ append */
          into CUX.CUX_MSC_PROCESS_SUPPLIES_L
          values LT_PROCESS_SUPPLIES_L
            (j);
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT PLAN PCBA PEGGINGS 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    end if;
  
    LT_PROCESS_SUPPLIES_L.delete;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '003更新相关的PEGGING：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --更新相关的PEGGING
    BEGIN
      UPDATE CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMS
         SET ALLOCATED_QUANTITY = ALLOCATED_QUANTITY - (SELECT CMPL.ALLOT_QTY
                                                          FROM CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL
                                                         WHERE 1 = 1
                                                           AND CMPL.TRANSACTION_ID = CMS.TRANSACTION_ID
                                                           AND SIGN(CMPL.ALLOT_QTY) = 1
                                                           AND CMPL.PROCESS_FLAG = 'I')
       WHERE 1 = 1
         AND CMS.PLAN_ID = P_PLAN_ID
         AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND EXISTS (SELECT 1
                FROM CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL
               WHERE 1 = 1
                 AND CMPL.TRANSACTION_ID = CMS.TRANSACTION_ID
                 AND SIGN(CMPL.ALLOT_QTY) = 1
                 AND CMPL.PROCESS_FLAG = 'I');
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** 减少相关的PEGGING 数量 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' || CHR(10) ||
            dbms_utility.format_error_backtrace() || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '004INSERT入过剩数量：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --INSERT入过剩数量
    BEGIN
      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T
        (PEGGING_ID,
         DEMAND_QUANTITY,
         SUPPLY_QUANTITY,
         ALLOCATED_QUANTITY,
         END_ITEM_USAGE,
         DEMAND_DATE,
         SUPPLY_DATE,
         SUPPLY_TYPE,
         END_ORIGINATION_TYPE,
         INVENTORY_ITEM_ID,
         ORGANIZATION_ID,
         PLAN_ID,
         PREV_PEGGING_ID,
         END_PEGGING_ID,
         TRANSACTION_ID,
         DISPOSITION_ID,
         DEMAND_ID,
         PROJECT_ID,
         TASK_ID,
         SR_INSTANCE_ID,
         DEMAND_CLASS,
         UPDATED,
         STATUS,
         LAST_UPDATE_DATE,
         LAST_UPDATED_BY,
         CREATION_DATE,
         CREATED_BY,
         LAST_UPDATE_LOGIN,
         REQUEST_ID,
         PROGRAM_APPLICATION_ID,
         PROGRAM_ID,
         PROGRAM_UPDATE_DATE)
        SELECT MSC_FULL_PEGGING_S.NEXTVAL,
               NULL,
               CMFP.SUPPLY_QUANTITY,
               CMPH.EXCESS_QTY,
               CMFP.END_ITEM_USAGE,
               NULL,
               CMFP.SUPPLY_DATE,
               CMFP.SUPPLY_TYPE,
               NULL,
               CMFP.INVENTORY_ITEM_ID,
               CMFP.ORGANIZATION_ID,
               CMFP.PLAN_ID,
               NULL,
               MSC_FULL_PEGGING_S.CURRVAL,
               CMPH.TRANSACTION_ID,
               CMPH.TRANSACTION_ID,
               -1, --CMFP.DEMAND_ID,
               CMFP.PROJECT_ID,
               CMFP.TASK_ID,
               CMFP.SR_INSTANCE_ID,
               CMFP.DEMAND_CLASS,
               CMFP.UPDATED,
               CMFP.STATUS,
               CMFP.LAST_UPDATE_DATE,
               CMFP.LAST_UPDATED_BY,
               CMFP.CREATION_DATE,
               CMFP.CREATED_BY,
               CMFP.LAST_UPDATE_LOGIN,
               CMFP.REQUEST_ID,
               CMFP.PROGRAM_APPLICATION_ID,
               CMFP.PROGRAM_ID,
               CMFP.PROGRAM_UPDATE_DATE
          FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMFP, CUX.CUX_MSC_PROCESS_SUPPLIES_H CMPH
         WHERE 1 = 1
           AND CMPH.TRANSACTION_ID = CMFP.TRANSACTION_ID
           AND SIGN(CMPH.EXCESS_QTY) = 1
           AND CMFP.PLAN_ID = P_PLAN_ID
           AND CMFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** INSERT入过剩数量 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '005INSERT入过剩数量NOTE表：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO msc_user_notes
        (note_id,
         entity_type,
         plan_id,
         sr_instance_id,
         organization_id,
         inventory_item_id,
         transaction_id,
         demand_id,
         note_text1,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by,
         last_update_login,
         assigned_to,
         due_by,
         status)
        SELECT msc_user_notes_s.NEXTVAL,
               'SUPPLY',
               CMFP.plan_id,
               CMFP.sr_instance_id,
               CMFP.organization_id,
               CMFP.inventory_item_id,
               CMPH.transaction_id,
               '',
               CMPH.EXCESS_QTY,
               SYSDATE,
               fnd_global.user_id,
               SYSDATE,
               fnd_global.user_id,
               fnd_global.login_id,
               '',
               '',
               ''
          FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMFP, CUX.CUX_MSC_PROCESS_SUPPLIES_H CMPH
         WHERE 1 = 1
           AND CMPH.TRANSACTION_ID = CMFP.TRANSACTION_ID
           AND SIGN(CMPH.EXCESS_QTY) = 1
           AND CMFP.PLAN_ID = P_PLAN_ID
           AND CMFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** INSERT入过剩数量NOTE 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
  
    --INSERT需要增加的PEGGING
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '006INSERT需要增加的PEGGING：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T
        (PEGGING_ID,
         DEMAND_QUANTITY,
         SUPPLY_QUANTITY,
         ALLOCATED_QUANTITY,
         END_ITEM_USAGE,
         DEMAND_DATE,
         SUPPLY_DATE,
         SUPPLY_TYPE,
         END_ORIGINATION_TYPE,
         INVENTORY_ITEM_ID,
         ORGANIZATION_ID,
         PLAN_ID,
         PREV_PEGGING_ID,
         END_PEGGING_ID,
         TRANSACTION_ID,
         DISPOSITION_ID,
         DEMAND_ID,
         PROJECT_ID,
         TASK_ID,
         SR_INSTANCE_ID,
         DEMAND_CLASS,
         UPDATED,
         STATUS,
         LAST_UPDATE_DATE,
         LAST_UPDATED_BY,
         CREATION_DATE,
         CREATED_BY,
         LAST_UPDATE_LOGIN,
         REQUEST_ID,
         PROGRAM_APPLICATION_ID,
         PROGRAM_ID,
         PROGRAM_UPDATE_DATE)
        SELECT MSC_FULL_PEGGING_S.NEXTVAL,
               CMFP.DEMAND_QUANTITY,
               CMFP.SUPPLY_QUANTITY,
               CMPL.ALLOT_QTY,
               CMFP.END_ITEM_USAGE,
               CMFP.DEMAND_DATE,
               CMPH.SUPPLY_DATE,
               CMFP.SUPPLY_TYPE,
               CMFP.END_ORIGINATION_TYPE,
               CMFP.INVENTORY_ITEM_ID,
               CMFP.ORGANIZATION_ID,
               CMFP.PLAN_ID,
               CMFP.PREV_PEGGING_ID,
               CMFP.END_PEGGING_ID,
               CMPH.TRANSACTION_ID,
               CMPH.TRANSACTION_ID,
               CMFP.DEMAND_ID,
               CMFP.PROJECT_ID,
               CMFP.TASK_ID,
               CMFP.SR_INSTANCE_ID,
               CMFP.DEMAND_CLASS,
               CMFP.UPDATED,
               CMFP.STATUS,
               CMFP.LAST_UPDATE_DATE,
               CMFP.LAST_UPDATED_BY,
               CMFP.CREATION_DATE,
               CMFP.CREATED_BY,
               CMFP.LAST_UPDATE_LOGIN,
               CMFP.REQUEST_ID,
               CMFP.PROGRAM_APPLICATION_ID,
               CMFP.PROGRAM_ID,
               CMFP.PROGRAM_UPDATE_DATE
          FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMFP,
               CUX.CUX_MSC_PROCESS_SUPPLIES_L  CMPL,
               CUX.CUX_MSC_PROCESS_SUPPLIES_H  CMPH
         WHERE CMPL.HEADER_ID = CMPH.HEADER_ID
           AND CMPL.PROCESS_FLAG = 'I'
           AND SIGN(NVL(CMPL.ALLOT_QTY, 0)) = 1
           AND CMPL.TRANSACTION_ID = CMFP.TRANSACTION_ID
           AND CMFP.PLAN_ID = P_PLAN_ID
           AND CMFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** INSERT增加PEGGING 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
  
    /*    insert into CUX.CUX_MSC_PROCESS_SUPPLIES_h_ray
    select *
    from CUX.CUX_MSC_PROCESS_SUPPLIES_h;
    
    insert into  CUX.CUX_MSC_PROCESS_SUPPLIES_l_ray
    select *
    from CUX.CUX_MSC_PROCESS_SUPPLIES_l_ray;*/
  
    --更新供应表中PLAN ORDER 数量
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '007更新供应表中PLAN ORDER 数量：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE CUX.CUX_MSC_SUPPLIES_PLAN_T CMS
         SET NEW_ORDER_QUANTITY =
             (SELECT CMPH.PLAN_QTY
                FROM CUX.CUX_MSC_PROCESS_SUPPLIES_H CMPH
               WHERE CMPH.TRANSACTION_ID = CMS.TRANSACTION_ID)
       WHERE 1 = 1
         AND CMS.PLAN_ID = P_PLAN_ID
         AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMS.ORDER_TYPE = 5
         AND EXISTS
       (SELECT 1 FROM CUX.CUX_MSC_PROCESS_SUPPLIES_H CMPH1 WHERE CMPH1.TRANSACTION_ID = CMS.TRANSACTION_ID);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** 更新供应表中PLAN ORDER 数量 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
  
    --更新PEGGING中的TRANSACTION_ID,SUPPLY_QTY,SUPPLY_DATE
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '008更新PEGGING表：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      UPDATE CUX.CUX_MSC_FULL_PEGGING_PLAN_T CMFP
         SET (CMFP.TRANSACTION_ID, DISPOSITION_ID, SUPPLY_DATE, SUPPLY_QUANTITY) =
             (SELECT CMPH.TRANSACTION_ID, CMPH.TRANSACTION_ID, CMPH.SUPPLY_DATE, CMPH.PLAN_QTY
                FROM CUX.CUX_MSC_PROCESS_SUPPLIES_H CMPH, CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL
               WHERE CMPL.TRANSACTION_ID = CMFP.TRANSACTION_ID
                 AND CMPH.HEADER_ID = CMPL.HEADER_ID
                 AND CMPL.PROCESS_FLAG IN ('D', 'U'))
       WHERE 1 = 1
         AND CMFP.PLAN_ID = P_PLAN_ID
         AND CMFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMFP.TRANSACTION_ID IN (SELECT CMPL1.TRANSACTION_ID
                                       FROM CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL1
                                      WHERE CMPL1.PROCESS_FLAG IN ('D', 'U'))
      /* AND EXISTS (SELECT 1
       FROM CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL1
      WHERE CMPL1.TRANSACTION_ID = CMFP.TRANSACTION_ID
        AND CMPL1.PROCESS_FLAG IN ('D', 'U'))*/
      ;
      LOG(FND_GLOBAL.CONC_REQUEST_ID, 'INSERT_PLAN_MFP', '更新CUX.CUX_MSC_FULL_PEGGING_PLAN_T记录数:' || sql%rowcount);
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** 更新PEGGING数量 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
  
    --删除多余的PLAN ORDER记录
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '009删除多余的PLAN ORDER记录：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE CUX.CUX_MSC_SUPPLIES_PLAN_T CMS
       WHERE CMS.PLAN_ID = P_PLAN_ID
         AND CMS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND CMS.ORDER_TYPE = 5
         AND EXISTS (SELECT 1
                FROM CUX.CUX_MSC_PROCESS_SUPPLIES_L CMPL
               WHERE CMPL.TRANSACTION_ID = CMS.TRANSACTION_ID
                 AND CMPL.PROCESS_FLAG = 'D');
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** 删除多余的PLAN ORDER记录 051 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        LV_ERROR_CODE := 2;
        RAISE LE_EXCEPTION;
    END;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'ORDER_SUPPLIY',
                '订单修正因子结束时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
      LT_PROCESS_SUPPLIES_H.delete;
      LT_PROCESS_SUPPLIES_L.delete;
  END;

  /***********************************************************************************
   NAME: PROCESS_SUPPLIY_ACCESS
   DESCRIPTION:写入收集的供应中过剩的部分
  ***********************************************************************************/
  PROCEDURE PROCESS_SUPPLIY_ACCESS(PO_ERROR_CODE OUT VARCHAR2, P_PLAN_ID NUMBER, P_SR_INSTANCE_ID NUMBER) IS
    LN_TRANSACTION_ID     NUMBER;
    LN_S_COUNT            NUMBER := 1;
    LN_P_COUNT            NUMBER := 1;
    LN_PEGGING_ID         NUMBER;
    LV_EXIST_PEGGING_FLAG VARCHAR2(10);
    LE_EXCEPTION EXCEPTION;
    LV_ERROR_CODE    VARCHAR2(10);
    LT_PEGGING_TEMP  CUX.CUX_MSC_FULL_PEGGING_PLAN_T%ROWTYPE;
    LT_DEMAND_TEMP   CUX.CUX_MSC_DEMANDS_PLAN_T%ROWTYPE;
    LV_SUPPLIES_TEMP CUX.CUX_MSC_SUPPLIES_PLAN_T%ROWTYPE;
  
  BEGIN
    --库存有剩余部分写入剩余数据
    FOR LR_SUPPLY_OH IN (select CMS.*
                           from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, MSC_SUB_INVENTORIES_V M1, CUX.CUX_MSC_ORG_RANGE CMOR
                          WHERE CMS.plan_id = -1
                            and CMS.sr_instance_id = p_SR_INSTANCE_ID
                            and CMS.order_type = 18 --现有量
                            and CMS.organization_id = CMOR.ORGANIZATION_ID
                               --and CMS.inventory_item_id = P_INVENTORY_ITEM_ID
                            AND CMS.ORGANIZATION_ID = M1.organization_id
                            AND CMS.SUBINVENTORY_CODE = M1.sub_inventory_code
                            AND SIGN(CMS.REMAIN_QTY) = 1
                            and M1.PLAN_ID = -1
                            AND M1.NETTING_TYPE = 1
                          ORDER BY CMS.NEW_ORDER_QUANTITY, CMS.SUBINVENTORY_CODE) LOOP
    
      --写入供应数据
      IF LR_SUPPLY_OH.NEW_TRANSACTION_ID IS NULL THEN
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
        
          LV_SUPPLIES_TEMP                   := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
          --LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_OH.ORGANIZATION_ID;--Commented by V1.029
          LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_OH.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SUPPLY_OH.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LR_SUPPLY_OH.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_SUPPLY_OH.NEED_BY_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := LR_SUPPLY_OH.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := LR_SUPPLY_OH.NEW_DOCK_DATE;
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := LR_SUPPLY_OH.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := LR_SUPPLY_OH.NEW_ORDER_PLACEMENT_DATE;
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID          := -23453;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE := 1;
          LV_SUPPLIES_TEMP.ORDER_TYPE              := 18; --现有量
          LV_SUPPLIES_TEMP.SUPPLIER_ID             := NULL;
          LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID        := NULL;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY      := LR_SUPPLY_OH.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY      := LR_SUPPLY_OH.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG         := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE       := 2;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG         := 0;
          LV_SUPPLIES_TEMP.SUBINVENTORY_CODE       := LR_SUPPLY_OH.SUBINVENTORY_CODE;
          LV_SUPPLIES_TEMP.VMI_FLAG                := LR_SUPPLY_OH.VMI_FLAG;
          LV_SUPPLIES_TEMP.UPDATED                 := 2;
          LV_SUPPLIES_TEMP.STATUS                  := 0;
          LV_SUPPLIES_TEMP.NON_NETTABLE_QTY        := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE        := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY         := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE           := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY              := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN       := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID              := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID  := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID              := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE     := SYSDATE;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE         := LR_SUPPLY_OH.ITEM_TYPE_VALUE;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG          := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 006 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_OH.NEW_TRANSACTION_ID;
      
      END IF;
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_OH.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_OH.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL; --单位用量
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_OH.NEW_SCHEDULE_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := 18;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_OH.INVENTORY_ITEM_ID;
        --LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_OH.ORGANIZATION_ID;--Commented by V1.029
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_OH.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := NULL;
        LT_PEGGING_TEMP.TASK_ID                := NULL;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := NULL;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT WIP PEGGINGS 007 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           --LR_SUPPLY_OH.ORGANIZATION_ID,--Commented by V1.029
           LR_SUPPLY_OH.ORIGINAL_ORGANIZATION_ID,--Added by V1.029
           LR_SUPPLY_OH.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_OH.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 007 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    END LOOP;
  
    --工单有剩余部分写入剩余数据
    FOR LR_SUPPLY_DJ IN (select CMS.*
                           from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_ORG_RANGE CMOR
                          where CMS.plan_id = -1
                            and CMS.sr_instance_id = p_SR_INSTANCE_ID
                            and CMS.order_type IN (3, 7) --3 工作单 7 非标准任务
                            and CMS.organization_id = CMOR.ORGANIZATION_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1
                          ORDER BY CMS.NEW_WIP_START_DATE, CMS.DISPOSITION_ID) LOOP
    
      --写入供应数据
      LV_EXIST_PEGGING_FLAG := 'N';
      IF LR_SUPPLY_DJ.NEW_TRANSACTION_ID IS NULL THEN
      
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                           := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID                   := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID            := LN_TRANSACTION_ID;
          LV_SUPPLIES_TEMP.ORGANIZATION_ID           := LR_SUPPLY_DJ.ORGANIZATION_ID;
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID            := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID         := LR_SUPPLY_DJ.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE         := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE         := LR_SUPPLY_DJ.OLD_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_WIP_START_DATE        := LR_SUPPLY_DJ.OLD_WIP_START_DATE;
          LV_SUPPLIES_TEMP.DISPOSITION_ID            := LR_SUPPLY_DJ.DISPOSITION_ID;
          LV_SUPPLIES_TEMP.NEED_BY_DATE              := LR_SUPPLY_DJ.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE             := LR_SUPPLY_DJ.NEW_DOCK_DATE; --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE        := LR_SUPPLY_DJ.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE  := LR_SUPPLY_DJ.NEW_ORDER_PLACEMENT_DATE;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE   := 2;
          LV_SUPPLIES_TEMP.ORDER_TYPE                := LR_SUPPLY_DJ.ORDER_TYPE;
          LV_SUPPLIES_TEMP.SUPPLIER_ID               := NULL;
          LV_SUPPLIES_TEMP.SUPPLIER_SITE_ID          := NULL;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY        := LR_SUPPLY_DJ.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY        := LR_SUPPLY_DJ.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG           := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE         := 2;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED      := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED      := 0;
          LV_SUPPLIES_TEMP.LINE_ID                   := LR_SUPPLY_DJ.LINE_ID;
          LV_SUPPLIES_TEMP.ORDER_NUMBER              := LR_SUPPLY_DJ.ORDER_NUMBER;
          LV_SUPPLIES_TEMP.SCHEDULE_GROUP_ID         := LR_SUPPLY_DJ.SCHEDULE_GROUP_ID;
          LV_SUPPLIES_TEMP.QTY_SCRAPPED              := LR_SUPPLY_DJ.QTY_SCRAPPED;
          LV_SUPPLIES_TEMP.QTY_COMPLETED             := LR_SUPPLY_DJ.QTY_COMPLETED;
          LV_SUPPLIES_TEMP.SCHEDULE_GROUP_NAME       := LR_SUPPLY_DJ.SCHEDULE_GROUP_NAME;
          LV_SUPPLIES_TEMP.UPDATED                   := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG           := 1;
          LV_SUPPLIES_TEMP.STATUS                    := 0;
          LV_SUPPLIES_TEMP.NON_NETTABLE_QTY          := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE          := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY           := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE             := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY                := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN         := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID                := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID    := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID                := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE       := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE           := LR_SUPPLY_DJ.WIP_STATUS_CODE;
          LV_SUPPLIES_TEMP.ROUTING_SEQUENCE_ID       := LR_SUPPLY_DJ.ROUTING_SEQUENCE_ID;
          LV_SUPPLIES_TEMP.BILL_SEQUENCE_ID          := LR_SUPPLY_DJ.BILL_SEQUENCE_ID;
          LV_SUPPLIES_TEMP.WIP_START_QUANTITY        := LR_SUPPLY_DJ.WIP_START_QUANTITY;
          LV_SUPPLIES_TEMP.SCHEDULE_PRIORITY         := LR_SUPPLY_DJ.SCHEDULE_PRIORITY;
          LV_SUPPLIES_TEMP.REQUESTED_COMPLETION_DATE := LR_SUPPLY_DJ.REQUESTED_COMPLETION_DATE;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE           := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG            := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT PCBA SUPPLIES 035 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_DJ.NEW_TRANSACTION_ID;
        --删除MPS与非标准工单提前写入写入部分
      
        BEGIN
          SELECT 'Y'
            INTO LV_EXIST_PEGGING_FLAG
            FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T MFP
           WHERE MFP.TRANSACTION_ID = LR_SUPPLY_DJ.NEW_TRANSACTION_ID
             AND MFP.PLAN_ID = P_PLAN_ID
             AND MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
             AND MFP.DEMAND_ID = -1;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            LV_EXIST_PEGGING_FLAG := 'N';
          WHEN OTHERS THEN
            LV_EXIST_PEGGING_FLAG := 'N';
        END;
      
      END IF;
    
      IF LV_EXIST_PEGGING_FLAG = 'N' THEN
        --写入PEGGING数据
        BEGIN
          SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
        
          LT_PEGGING_TEMP                        := NULL;
          LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
          LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
          LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_DJ.NEW_ORDER_QUANTITY;
          LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_DJ.REMAIN_QTY;
          LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL;
          LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
          LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_DJ.NEW_SCHEDULE_DATE; --可能要修改
          LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_DJ.ORDER_TYPE;
          LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
          LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_DJ.INVENTORY_ITEM_ID;
          LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_DJ.ORGANIZATION_ID;
          LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
          LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
          LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
          LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
          LT_PEGGING_TEMP.DEMAND_ID              := -1;
          LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_DJ.PROJECT_ID;
          LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_DJ.TASK_ID;
          LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
          LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_DJ.DEMAND_CLASS;
          LT_PEGGING_TEMP.UPDATED                := 0;
          LT_PEGGING_TEMP.STATUS                 := 2;
          LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
          LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
          LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
          LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
          LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
          LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
          LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
          LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
          INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
        
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MFP',
                '***ERROR*** INSERT PCBA PEGGINGS 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      END IF;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           LR_SUPPLY_DJ.ORGANIZATION_ID,
           LR_SUPPLY_DJ.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_DJ.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 036 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    END LOOP;
  
    --工单负需求有剩余部分写入剩余数据
    FOR LR_SUPPLY_RDJ IN (select CMS.*
                            from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_ORG_RANGE CMOR
                           where CMS.plan_id = -1
                             and CMS.sr_instance_id = p_SR_INSTANCE_ID
                             and CMS.order_type IN (14, 15) --14 工作单联产品/副产品 15 非标准任务副产品
                             and CMS.organization_id = CMOR.ORGANIZATION_ID
                             AND SIGN(CMS.REMAIN_QTY) = 1
                           ORDER BY CMS.NEW_WIP_START_DATE, CMS.DISPOSITION_ID) LOOP
      IF LR_SUPPLY_RDJ.NEW_TRANSACTION_ID IS NULL THEN
        --写入供应数据
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                   := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
          LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_RDJ.ORGANIZATION_ID;
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SUPPLY_RDJ.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LR_SUPPLY_RDJ.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_SUPPLY_RDJ.OLD_SCHEDULE_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := LR_SUPPLY_RDJ.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := LR_SUPPLY_RDJ.NEW_DOCK_DATE; --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := LR_SUPPLY_RDJ.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := LR_SUPPLY_RDJ.NEW_ORDER_PLACEMENT_DATE;
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RDJ.DISPOSITION_ID;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
          LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RDJ.ORDER_TYPE;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RDJ.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RDJ.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
          LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
          LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := LR_SUPPLY_RDJ.OPERATION_SEQ_NUM;
          LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := LR_SUPPLY_RDJ.BY_PRODUCT_USING_ASSY_ID;
          LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.UPDATED                  := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
          LV_SUPPLIES_TEMP.STATUS                   := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
          LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 008 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_RDJ.NEW_TRANSACTION_ID;
      
      END IF;
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RDJ.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_RDJ.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL; --单位用量
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_RDJ.NEW_SCHEDULE_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RDJ.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_RDJ.INVENTORY_ITEM_ID;
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_RDJ.ORGANIZATION_ID;
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RDJ.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RDJ.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RDJ.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT WIP PEGGINGS 009 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           LR_SUPPLY_RDJ.ORGANIZATION_ID,
           LR_SUPPLY_RDJ.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_RDJ.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 009 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
    END LOOP;
  
    --在途有剩余部分写入剩余数据
    FOR LR_SUPPLY_RCV IN (select CMS.*
                            from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_ORG_RANGE CMOR
                           where CMS.plan_id = -1
                             and CMS.sr_instance_id = p_SR_INSTANCE_ID
                             and CMS.order_type IN (8, 12, 11) --8 正在接收 PO 12 在途接收
                             and CMS.organization_id = CMOR.ORGANIZATION_ID
                             AND SIGN(CMS.REMAIN_QTY) = 1
                           ORDER BY CMS.New_Dock_Date) LOOP
    
      IF LR_SUPPLY_RCV.NEW_TRANSACTION_ID IS NULL THEN
      
        --写入供应数据
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                   := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
          --LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_RCV.ORGANIZATION_ID;--Commented by V1.029
          LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_RCV.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SUPPLY_RCV.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LR_SUPPLY_RCV.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_SUPPLY_RCV.OLD_SCHEDULE_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := LR_SUPPLY_RCV.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := LR_SUPPLY_RCV.NEW_DOCK_DATE; --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := LR_SUPPLY_RCV.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := LR_SUPPLY_RCV.NEW_ORDER_PLACEMENT_DATE;
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_RCV.DISPOSITION_ID;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 1;
          LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_RCV.ORDER_TYPE;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_RCV.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_RCV.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
          LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
          LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
          LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
          LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.UPDATED                  := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
          LV_SUPPLIES_TEMP.STATUS                   := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
          LV_SUPPLIES_TEMP.PO_LINE_ID               := 0;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 010 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_RCV.NEW_TRANSACTION_ID;
      
      END IF;
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_RCV.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_RCV.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL; --单位用量
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_RCV.NEW_SCHEDULE_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_RCV.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_RCV.INVENTORY_ITEM_ID;
        --LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_RCV.ORGANIZATION_ID;--Commented by V1.029
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_RCV.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_RCV.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_RCV.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_RCV.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT WIP PEGGINGS 011 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           --LR_SUPPLY_RCV.ORGANIZATION_ID,--Commented by V1.029
           LR_SUPPLY_RCV.ORIGINAL_ORGANIZATION_ID,--Added by V1.029
           LR_SUPPLY_RCV.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_RCV.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 011 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    END LOOP;
  
    --PO有剩余部分写入剩余数据
    FOR LR_SUPPLY_PO IN (select CMS.*
                           from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_ORG_RANGE CMOR
                          where CMS.plan_id = -1
                            and CMS.sr_instance_id = p_SR_INSTANCE_ID
                            and CMS.order_type IN (1) --1 采购订单
                            and CMS.organization_id = CMOR.ORGANIZATION_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1
                          ORDER BY CMS.NEW_ORDER_PLACEMENT_DATE, CMS.Disposition_Id) LOOP
    
      IF LR_SUPPLY_PO.NEW_TRANSACTION_ID IS NULL THEN
      
        --写入供应数据
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                   := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
          --LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_PO.ORGANIZATION_ID;--Commented by V1.029
          LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_PO.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SUPPLY_PO.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LR_SUPPLY_PO.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_SUPPLY_PO.OLD_SCHEDULE_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := LR_SUPPLY_PO.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := LR_SUPPLY_PO.NEW_DOCK_DATE; --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := LR_SUPPLY_PO.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := LR_SUPPLY_PO.NEW_ORDER_PLACEMENT_DATE;
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PO.DISPOSITION_ID;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 2;
          LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PO.ORDER_NUMBER;
          LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PO.DELIVERY_PRICE;
          LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PO.PO_LINE_ID;
          LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PO.RECEIVING_CALENDAR;
          LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PO.PO_LINE_LOCATION_ID;
          LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PO.ORDER_TYPE;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PO.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PO.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
          LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
          LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
          LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
          LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.UPDATED                  := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
          LV_SUPPLIES_TEMP.STATUS                   := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 012 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_PO.NEW_TRANSACTION_ID;
      
      END IF;
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PO.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_PO.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL; --单位用量
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_PO.NEW_SCHEDULE_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PO.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_PO.INVENTORY_ITEM_ID;
        --LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_PO.ORGANIZATION_ID;--Commentd by V1.029
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_PO.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PO.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PO.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PO.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT WIP PEGGINGS 013 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           --LR_SUPPLY_PO.ORGANIZATION_ID,--Commented by V1.029
           LR_SUPPLY_PO.ORIGINAL_ORGANIZATION_ID,--Added by V1.029
           LR_SUPPLY_PO.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_PO.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 013 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
    END LOOP;
  
    --PR有剩余部分写入剩余数据
    FOR LR_SUPPLY_PR IN (select CMS.*
                           from CUX.CUX_MSC_SUPPLIES_SJ_T CMS, CUX.CUX_MSC_ORG_RANGE CMOR
                          where CMS.plan_id = -1
                            and CMS.sr_instance_id = p_SR_INSTANCE_ID
                            and CMS.order_type IN (2) --2 采购申请
                            and CMS.organization_id = CMOR.ORGANIZATION_ID
                            AND SIGN(CMS.REMAIN_QTY) = 1
                          ORDER BY CMS.NEW_ORDER_PLACEMENT_DATE, CMS.ORDER_NUMBER) LOOP
    
      IF LR_SUPPLY_PR.NEW_TRANSACTION_ID IS NULL THEN
        --写入供应数据
        BEGIN
          SELECT MSC_SUPPLIES_S.NEXTVAL INTO LN_TRANSACTION_ID FROM DUAL;
          LV_SUPPLIES_TEMP                   := NULL;
          LV_SUPPLIES_TEMP.PLAN_ID           := P_PLAN_ID;
          LV_SUPPLIES_TEMP.TRANSACTION_ID    := LN_TRANSACTION_ID;
          --LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_PR.ORGANIZATION_ID;--Commented by V1.029
          LV_SUPPLIES_TEMP.ORGANIZATION_ID   := LR_SUPPLY_PR.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
          LV_SUPPLIES_TEMP.SR_INSTANCE_ID    := P_SR_INSTANCE_ID;
          LV_SUPPLIES_TEMP.INVENTORY_ITEM_ID := LR_SUPPLY_PR.INVENTORY_ITEM_ID;
          LV_SUPPLIES_TEMP.NEW_SCHEDULE_DATE := LR_SUPPLY_PR.NEW_SCHEDULE_DATE;
          LV_SUPPLIES_TEMP.OLD_SCHEDULE_DATE := LR_SUPPLY_PR.OLD_SCHEDULE_DATE;
        
          LV_SUPPLIES_TEMP.NEED_BY_DATE             := LR_SUPPLY_PR.NEED_BY_DATE;
          LV_SUPPLIES_TEMP.NEW_DOCK_DATE            := LR_SUPPLY_PR.NEW_DOCK_DATE; --重新计算
          LV_SUPPLIES_TEMP.NEW_WIP_START_DATE       := LR_SUPPLY_PR.NEW_WIP_START_DATE;
          LV_SUPPLIES_TEMP.NEW_ORDER_PLACEMENT_DATE := LR_SUPPLY_PR.NEW_ORDER_PLACEMENT_DATE;
        
          LV_SUPPLIES_TEMP.DISPOSITION_ID           := LR_SUPPLY_PR.DISPOSITION_ID;
          LV_SUPPLIES_TEMP.DISPOSITION_STATUS_TYPE  := 2;
          LV_SUPPLIES_TEMP.ORDER_NUMBER             := LR_SUPPLY_PR.ORDER_NUMBER;
          LV_SUPPLIES_TEMP.DELIVERY_PRICE           := LR_SUPPLY_PR.DELIVERY_PRICE;
          LV_SUPPLIES_TEMP.PO_LINE_ID               := LR_SUPPLY_PR.PO_LINE_ID;
          LV_SUPPLIES_TEMP.RECEIVING_CALENDAR       := LR_SUPPLY_PR.RECEIVING_CALENDAR;
          LV_SUPPLIES_TEMP.PO_LINE_LOCATION_ID      := LR_SUPPLY_PR.PO_LINE_LOCATION_ID;
          LV_SUPPLIES_TEMP.ORDER_TYPE               := LR_SUPPLY_PR.ORDER_TYPE;
          LV_SUPPLIES_TEMP.NEW_ORDER_QUANTITY       := LR_SUPPLY_PR.REMAIN_QTY;
          LV_SUPPLIES_TEMP.OLD_ORDER_QUANTITY       := LR_SUPPLY_PR.REMAIN_QTY;
          LV_SUPPLIES_TEMP.RESCHEDULE_FLAG          := 2;
          LV_SUPPLIES_TEMP.FIRM_PLANNED_TYPE        := 2;
          LV_SUPPLIES_TEMP.PROCESS_SEQ_ID           := 0;
          LV_SUPPLIES_TEMP.SCO_SUPPLY_FLAG          := 0;
          LV_SUPPLIES_TEMP.OPERATION_SEQ_NUM        := NULL;
          LV_SUPPLIES_TEMP.BY_PRODUCT_USING_ASSY_ID := NULL;
          LV_SUPPLIES_TEMP.SOURCE_SR_INSTANCE_ID    := 0;
          LV_SUPPLIES_TEMP.WEIGHT_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.VOLUME_CAPACITY_USED     := 0;
          LV_SUPPLIES_TEMP.UPDATED                  := 2;
          LV_SUPPLIES_TEMP.SUBST_ITEM_FLAG          := 1;
          LV_SUPPLIES_TEMP.STATUS                   := 0;
          LV_SUPPLIES_TEMP.LAST_UPDATE_DATE         := SYSDATE;
          LV_SUPPLIES_TEMP.LAST_UPDATED_BY          := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.CREATION_DATE            := SYSDATE;
          LV_SUPPLIES_TEMP.CREATED_BY               := FND_GLOBAL.USER_ID;
          LV_SUPPLIES_TEMP.LAST_UPDATE_LOGIN        := FND_GLOBAL.LOGIN_ID;
          LV_SUPPLIES_TEMP.REQUEST_ID               := FND_GLOBAL.CONC_REQUEST_ID;
          LV_SUPPLIES_TEMP.PROGRAM_APPLICATION_ID   := FND_GLOBAL.PROG_APPL_ID;
          LV_SUPPLIES_TEMP.PROGRAM_ID               := FND_GLOBAL.CONC_PROGRAM_ID;
          LV_SUPPLIES_TEMP.PROGRAM_UPDATE_DATE      := SYSDATE;
          LV_SUPPLIES_TEMP.WIP_STATUS_CODE          := 0;
          LV_SUPPLIES_TEMP.ITEM_TYPE_VALUE          := 1;
          LV_SUPPLIES_TEMP.PS_SUPPLY_FLAG           := 2;
          INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T VALUES LV_SUPPLIES_TEMP;
        EXCEPTION
          WHEN OTHERS THEN
            LOG(FND_GLOBAL.CONC_REQUEST_ID,
                'INSERT_PLAN_MS',
                '***ERROR*** INSERT WIP SUPPLIES 014 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
                dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
            LV_ERROR_CODE := 2;
            RAISE LE_EXCEPTION;
        END;
      
      ELSE
        LN_TRANSACTION_ID := LR_SUPPLY_PR.NEW_TRANSACTION_ID;
      
      END IF;
    
      --写入PEGGING数据
      BEGIN
        SELECT MSC_FULL_PEGGING_S.NEXTVAL INTO LN_PEGGING_ID FROM DUAL;
      
        LT_PEGGING_TEMP                        := NULL;
        LT_PEGGING_TEMP.PEGGING_ID             := LN_PEGGING_ID;
        LT_PEGGING_TEMP.DEMAND_QUANTITY        := NULL;
        LT_PEGGING_TEMP.SUPPLY_QUANTITY        := LR_SUPPLY_PR.NEW_ORDER_QUANTITY;
        LT_PEGGING_TEMP.ALLOCATED_QUANTITY     := LR_SUPPLY_PR.REMAIN_QTY;
        LT_PEGGING_TEMP.END_ITEM_USAGE         := NULL; --单位用量
        LT_PEGGING_TEMP.DEMAND_DATE            := NULL;
        LT_PEGGING_TEMP.SUPPLY_DATE            := LR_SUPPLY_PR.NEW_SCHEDULE_DATE; --可能要修改
        LT_PEGGING_TEMP.SUPPLY_TYPE            := LR_SUPPLY_PR.ORDER_TYPE;
        LT_PEGGING_TEMP.END_ORIGINATION_TYPE   := NULL;
        LT_PEGGING_TEMP.INVENTORY_ITEM_ID      := LR_SUPPLY_PR.INVENTORY_ITEM_ID;
        --LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_PR.ORGANIZATION_ID;--Commented by V1.029
        LT_PEGGING_TEMP.ORGANIZATION_ID        := LR_SUPPLY_PR.ORIGINAL_ORGANIZATION_ID;--Added by V1.029
        LT_PEGGING_TEMP.PLAN_ID                := P_PLAN_ID;
        LT_PEGGING_TEMP.PREV_PEGGING_ID        := NULL;
        LT_PEGGING_TEMP.END_PEGGING_ID         := LN_PEGGING_ID;
        LT_PEGGING_TEMP.TRANSACTION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DISPOSITION_ID         := LN_TRANSACTION_ID;
        LT_PEGGING_TEMP.DEMAND_ID              := -1;
        LT_PEGGING_TEMP.PROJECT_ID             := LR_SUPPLY_PR.PROJECT_ID;
        LT_PEGGING_TEMP.TASK_ID                := LR_SUPPLY_PR.TASK_ID;
        LT_PEGGING_TEMP.SR_INSTANCE_ID         := P_SR_INSTANCE_ID;
        LT_PEGGING_TEMP.DEMAND_CLASS           := LR_SUPPLY_PR.DEMAND_CLASS;
        LT_PEGGING_TEMP.UPDATED                := 0;
        LT_PEGGING_TEMP.STATUS                 := 2;
        LT_PEGGING_TEMP.LAST_UPDATE_DATE       := SYSDATE;
        LT_PEGGING_TEMP.LAST_UPDATED_BY        := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.CREATION_DATE          := SYSDATE;
        LT_PEGGING_TEMP.CREATED_BY             := FND_GLOBAL.USER_ID;
        LT_PEGGING_TEMP.LAST_UPDATE_LOGIN      := FND_GLOBAL.LOGIN_ID;
        LT_PEGGING_TEMP.REQUEST_ID             := FND_GLOBAL.CONC_REQUEST_ID;
        LT_PEGGING_TEMP.PROGRAM_APPLICATION_ID := FND_GLOBAL.PROG_APPL_ID;
        LT_PEGGING_TEMP.PROGRAM_ID             := FND_GLOBAL.CONC_PROGRAM_ID;
        LT_PEGGING_TEMP.PROGRAM_UPDATE_DATE    := SYSDATE;
        INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T VALUES LT_PEGGING_TEMP;
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT WIP PEGGINGS 015 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
      BEGIN
        INSERT INTO msc_user_notes
          (note_id,
           entity_type,
           plan_id,
           sr_instance_id,
           organization_id,
           inventory_item_id,
           transaction_id,
           demand_id,
           note_text1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by,
           last_update_login,
           assigned_to,
           due_by,
           status)
        VALUES
          (msc_user_notes_s.NEXTVAL,
           'SUPPLY',
           P_PLAN_ID,
           P_SR_INSTANCE_ID,
           --LR_SUPPLY_PR.ORGANIZATION_ID,--Commented by v1.029
           LR_SUPPLY_PR.ORIGINAL_ORGANIZATION_ID,--Added by V1.029
           LR_SUPPLY_PR.INVENTORY_ITEM_ID,
           LN_TRANSACTION_ID,
           '',
           LR_SUPPLY_PR.REMAIN_QTY,
           SYSDATE,
           fnd_global.user_id,
           SYSDATE,
           fnd_global.user_id,
           fnd_global.login_id,
           '',
           '',
           '');
      EXCEPTION
        WHEN OTHERS THEN
          LOG(FND_GLOBAL.CONC_REQUEST_ID,
              'INSERT_PLAN_MFP',
              '***ERROR*** INSERT NOTE 015 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
              dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
          LV_ERROR_CODE := 2;
          RAISE LE_EXCEPTION;
      END;
    
    END LOOP;
  
  EXCEPTION
    WHEN LE_EXCEPTION THEN
      PO_ERROR_CODE := LV_ERROR_CODE;
  END;

  /***********************************************************************************
   NAME: MAIN
   DESCRIPTION:ASCP加强程序主程序
  ***********************************************************************************/
  PROCEDURE MAIN(errbuf           OUT VARCHAR2,
                 retcode          OUT VARCHAR2,
                 P_SR_INSTANCE_ID NUMBER,
                 P_PLAN_ID        NUMBER,
                 P_LOG_FLAG       VARCHAR2) IS
    LN_EXIST_COUNT NUMBER;
    LE_EXIST_EXCEPTION EXCEPTION;
    LN_MIN_LEVEL NUMBER;
    LE_LEVEL_EXCEPTION EXCEPTION;
    LE_INSERT_TMP_EXCEPTION EXCEPTION;
    LV_BOM_ERR_CODE VARCHAR2(1);
    LE_BOM_ERR_CODE EXCEPTION;
    LN_REQUEST_ID       NUMBER;
    LV_MESSAGE          VARCHAR2(2000);
    LV_ERROR_CODE       VARCHAR2(10);
    LN_WIP_FLAG_COUNT   NUMBER;
    LN_NET_SUBINV_COUNT NUMBER;
    LD_PLAN_DATE        DATE;
    LD_RECALS_DATE      DATE;
  BEGIN
  
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MS', ' P_LOG_FLAG = ' || P_LOG_FLAG);
    GV_LOG_FLAG     := P_LOG_FLAG;
    GV_BUY_LOG_FLAG := 'N';
    BEGIN
      SELECT FND_GLOBAL.CONC_REQUEST_ID INTO LN_REQUEST_ID FROM DUAL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_REQUEST_ID := -999;
    END;
    LOG_PROCESS(LN_REQUEST_ID, 'START', '开始时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      SELECT COUNT(*)
        INTO LN_WIP_FLAG_COUNT
        FROM MSC_PLAN_ORGS_V
       WHERE PLAN_ID = P_PLAN_ID
         AND NET_WIP = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_WIP_FLAG_COUNT := 0;
    END;
  
    IF LN_WIP_FLAG_COUNT > 0 THEN
      LOG(LN_REQUEST_ID,
          'VALIDATE_PLAN_EXIST',
          '***ERROR*** 此计划已经勾选"WIP净值"勾选框，不能进行计算！ ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
      RAISE LE_EXIST_EXCEPTION;
    END IF;
  
    BEGIN
      SELECT COUNT(*)
        INTO LN_NET_SUBINV_COUNT
        FROM MSC_SUB_INVENTORIES_V
       WHERE PLAN_ID = P_PLAN_ID
         AND NETTING_TYPE = 1;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_NET_SUBINV_COUNT := 0;
    END;
  
    IF LN_NET_SUBINV_COUNT > 0 THEN
      LOG(LN_REQUEST_ID,
          'VALIDATE_PLAN_EXIST',
          '***ERROR*** 此计划已经"计算子库存净值"有选择库存净值，不能进行计算！ ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
      RAISE LE_EXIST_EXCEPTION;
    END IF;
  
    BEGIN
      SELECT COUNT(*) INTO LN_EXIST_COUNT FROM CUX.CUX_MSC_COMPILE_DESIGNATORS WHERE PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_EXIST_COUNT := 0;
    END;
  
    --获取计划运行时间
    BEGIN
      SELECT MP.PLAN_START_DATE INTO LD_PLAN_DATE FROM MSC_PLANS MP WHERE PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'VALIDATE_PLAN_EXIST',
            '***ERROR*** 无法获取计划运行时间，计划异常！ ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    --获取上次加强程序时间
    BEGIN
      SELECT LAST_UPDATE_DATE INTO LD_RECALS_DATE FROM CUX.CUX_MSC_COMPILE_DESIGNATORS WHERE PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LD_RECALS_DATE := SYSDATE - 3600;
    END;
  
    IF LD_PLAN_DATE < LD_RECALS_DATE THEN
      LOG(LN_REQUEST_ID,
          'VALIDATE_PLAN_EXIST',
          '***ERROR*** 此计划已经进行过客制程序计算，不能重复计算！ ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
      RAISE LE_EXIST_EXCEPTION;
    END IF;
  
    --取得最小的LOW LEVEL CODE
    BEGIN
      select MIN(msi.low_level_code)
        INTO LN_MIN_LEVEL
        from msc_system_items msi
       where 1 = 1
         and plan_id = P_PLAN_ID
         AND SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        LN_MIN_LEVEL := 0;
      WHEN OTHERS THEN
        LN_MIN_LEVEL := 0;
    END;
    --Added by V1.024
    IF NVL(LN_MIN_LEVEL, -99) < 1 THEN
      RAISE LE_LEVEL_EXCEPTION;
    END IF;
  
    --得到SOURCE RULE分配集ID
    BEGIN
      SELECT MP.ASSIGNMENT_SET_ID
        INTO GV_ASSIGNMENT_SET_ID
        FROM MSC_PLANS MP
       WHERE MP.PLAN_ID = P_PLAN_ID
         AND MP.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        GV_ASSIGNMENT_SET_ID := -999;
    END;
  
    --计划的ORG范围
    INSERT INTO CUX.CUX_MSC_ORG_RANGE
      (ORGANIZATION_ID, ORG_ID)
      select MPO.ORGANIZATION_ID, OOD.OPERATING_UNIT
        from MSC_PLAN_ORGANIZATIONS MPO, ORG_ORGANIZATION_DEFINITIONS OOD
       WHERE MPO.PLAN_ID = P_PLAN_ID
         AND MPO.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         AND MPO.ORGANIZATION_ID = OOD.ORGANIZATION_ID;
  
    --获取期初的招标比例
    INSERT INTO CUX.CUX_MSC_ASCP_BID_ACCUM_INFO_T
      SELECT *
        FROM CUX.CUX_MSC_ASCP_BID_ACCUM_INFO CMAB
       WHERE CMAB.ORG_ID IN (SELECT CMO.ORG_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
  
    --将BOM中的DFF信息同步至MSC BOM中相关的计划中
    LOG(LN_REQUEST_ID, 'UPDATE_BOM', '更新计划BOM属性 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    UPDATE_PLAN_SUB_RATE(retcode          => LV_BOM_ERR_CODE,
                         P_REQUEST_ID     => LN_REQUEST_ID,
                         p_SR_INSTANCE_ID => P_SR_INSTANCE_ID,
                         P_PLAN_ID        => P_PLAN_ID);
  
    IF LV_BOM_ERR_CODE = 2 THEN
      LOG(LN_REQUEST_ID, 'UPDATE_BOM', '***ERROR*** 更新计划BOM属性 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
      RAISE LE_BOM_ERR_CODE;
    END IF;
  
    --更新物料的ITEM_TYPE
    UPDATE MSC_SYSTEM_ITEMS MSI
       SET MSI.ATTRIBUTE1 =
           (SELECT MSI1.ATTRIBUTE1
              FROM MSC_SYSTEM_ITEMS MSI1
             WHERE MSI.ORGANIZATION_ID = MSI1.ORGANIZATION_ID
               AND MSI.INVENTORY_ITEM_ID = MSI1.INVENTORY_ITEM_ID
               AND MSI1.PLAN_ID = -1
               AND MSI.SR_INSTANCE_ID = MSI1.SR_INSTANCE_ID)
     WHERE MSI.PLAN_ID = P_PLAN_ID
       AND MSI.SR_INSTANCE_ID = P_SR_INSTANCE_ID
       AND MSI.ORGANIZATION_ID IN (SELECT CMO.ORGANIZATION_ID FROM CUX.CUX_MSC_ORG_RANGE CMO);
  
    --计划的MPS物料范围
    LOG(LN_REQUEST_ID, 'GET_MPS_RANGE', '得到MPS物料范围 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_MPS_RANGE
        (ORGANIZATION_ID, INVENTORY_ITEM_ID)
        SELECT DISTINCT MD.ORGANIZATION_ID, MD.INVENTORY_ITEM_ID
          FROM MSC_DEMANDS MD
         WHERE MD.PLAN_ID = P_PLAN_ID
           AND MD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND MD.origination_type = 12 --MPS 需求
        ;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'UPDATE_BOM',
            '***ERROR*** 得到MPS物料范围 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    --同步收集的供应数据
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MS', '得到收集的MSC SUPPLIES ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_SUPPLIES_SJ_T
        SELECT MS.ROWID,
               MS.PLAN_ID,
               MS.TRANSACTION_ID,
               MS.ORGANIZATION_ID,
               MS.SR_INSTANCE_ID,
               MS.INVENTORY_ITEM_ID,
               MS.SCHEDULE_DESIGNATOR_ID,
               MS.REVISION,
               MS.UNIT_NUMBER,
               MS.NEW_SCHEDULE_DATE,
               MS.OLD_SCHEDULE_DATE,
               MS.NEW_WIP_START_DATE,
               MS.OLD_WIP_START_DATE,
               MS.FIRST_UNIT_COMPLETION_DATE,
               MS.LAST_UNIT_COMPLETION_DATE,
               MS.FIRST_UNIT_START_DATE,
               MS.LAST_UNIT_START_DATE,
               MS.DISPOSITION_ID,
               MS.DISPOSITION_STATUS_TYPE,
               MS.ORDER_TYPE,
               MS.SUPPLIER_ID,
               MS.SUPPLIER_SITE_ID,
               MS.NEW_ORDER_QUANTITY,
               MS.OLD_ORDER_QUANTITY,
               MS.NEW_ORDER_PLACEMENT_DATE,
               MS.OLD_ORDER_PLACEMENT_DATE,
               MS.RESCHEDULE_DAYS,
               MS.RESCHEDULE_FLAG,
               MS.SCHEDULE_COMPRESS_DAYS,
               MS.NEW_PROCESSING_DAYS,
               MS.PURCH_LINE_NUM,
               MS.QUANTITY_IN_PROCESS,
               MS.IMPLEMENTED_QUANTITY,
               MS.FIRM_PLANNED_TYPE,
               MS.FIRM_QUANTITY,
               MS.FIRM_DATE,
               MS.IMPLEMENT_DEMAND_CLASS,
               MS.IMPLEMENT_DATE,
               MS.IMPLEMENT_QUANTITY,
               MS.IMPLEMENT_FIRM,
               MS.IMPLEMENT_WIP_CLASS_CODE,
               MS.IMPLEMENT_JOB_NAME,
               MS.IMPLEMENT_DOCK_DATE,
               MS.IMPLEMENT_STATUS_CODE,
               MS.IMPLEMENT_EMPLOYEE_ID,
               MS.IMPLEMENT_UOM_CODE,
               MS.IMPLEMENT_LOCATION_ID,
               MS.IMPLEMENT_SOURCE_ORG_ID,
               MS.IMPLEMENT_SR_INSTANCE_ID,
               MS.IMPLEMENT_SUPPLIER_ID,
               MS.IMPLEMENT_SUPPLIER_SITE_ID,
               MS.IMPLEMENT_AS,
               MS.RELEASE_STATUS,
               MS.LOAD_TYPE,
               MS.PROCESS_SEQ_ID,
               MS.SCO_SUPPLY_FLAG,
               MS.ALTERNATE_BOM_DESIGNATOR,
               MS.ALTERNATE_ROUTING_DESIGNATOR,
               MS.OPERATION_SEQ_NUM,
               MS.BY_PRODUCT_USING_ASSY_ID,
               MS.SOURCE_ORGANIZATION_ID,
               MS.SOURCE_SR_INSTANCE_ID,
               MS.SOURCE_SUPPLIER_SITE_ID,
               MS.SOURCE_SUPPLIER_ID,
               MS.SHIP_METHOD,
               MS.WEIGHT_CAPACITY_USED,
               MS.VOLUME_CAPACITY_USED,
               MS.NEW_SHIP_DATE,
               MS.NEW_DOCK_DATE,
               MS.OLD_DOCK_DATE,
               MS.LINE_ID,
               MS.PROJECT_ID,
               MS.TASK_ID,
               MS.PLANNING_GROUP,
               MS.IMPLEMENT_PROJECT_ID,
               MS.IMPLEMENT_TASK_ID,
               MS.IMPLEMENT_SCHEDULE_GROUP_ID,
               MS.IMPLEMENT_BUILD_SEQUENCE,
               MS.IMPLEMENT_ALTERNATE_BOM,
               MS.IMPLEMENT_ALTERNATE_ROUTING,
               MS.IMPLEMENT_UNIT_NUMBER,
               MS.IMPLEMENT_LINE_ID,
               MS.RELEASE_ERRORS,
               MS.NUMBER1,
               MS.SOURCE_ITEM_ID,
               MS.ORDER_NUMBER,
               MS.SCHEDULE_GROUP_ID,
               MS.BUILD_SEQUENCE,
               MS.WIP_ENTITY_NAME,
               MS.IMPLEMENT_PROCESSING_DAYS,
               MS.DELIVERY_PRICE,
               MS.LATE_SUPPLY_DATE,
               MS.LATE_SUPPLY_QTY,
               MS.LOT_NUMBER,
               MS.SUBINVENTORY_CODE,
               MS.QTY_SCRAPPED,
               MS.EXPECTED_SCRAP_QTY,
               MS.QTY_COMPLETED,
               MS.DAILY_RATE,
               MS.SCHEDULE_GROUP_NAME,
               MS.UPDATED,
               MS.SUBST_ITEM_FLAG,
               MS.STATUS,
               MS.APPLIED,
               MS.EXPIRATION_QUANTITY,
               MS.EXPIRATION_DATE,
               MS.NON_NETTABLE_QTY,
               MS.IMPLEMENT_WIP_START_DATE,
               MS.REFRESH_NUMBER,
               MS.LAST_UPDATE_DATE,
               MS.LAST_UPDATED_BY,
               MS.CREATION_DATE,
               MS.CREATED_BY,
               MS.LAST_UPDATE_LOGIN,
               MS.REQUEST_ID,
               MS.PROGRAM_APPLICATION_ID,
               MS.PROGRAM_ID,
               MS.PROGRAM_UPDATE_DATE,
               MS.IMPLEMENT_DAILY_RATE,
               MS.NEED_BY_DATE,
               MS.SOURCE_SUPPLY_ID,
               MS.SR_MTL_SUPPLY_ID,
               MS.WIP_STATUS_CODE,
               MS.DEMAND_CLASS,
               MS.FROM_ORGANIZATION_ID,
               MS.WIP_SUPPLY_TYPE,
               MS.PO_LINE_ID,
               MS.LOAD_FACTOR_RATE,
               MS.ROUTING_SEQUENCE_ID,
               MS.BILL_SEQUENCE_ID,
               MS.COPRODUCTS_SUPPLY,
               MS.CFM_ROUTING_FLAG,
               MS.CUSTOMER_ID,
               MS.SHIP_TO_SITE_ID,
               MS.OLD_NEED_BY_DATE,
               MS.OLD_DAILY_RATE,
               MS.OLD_FIRST_UNIT_START_DATE,
               MS.OLD_LAST_UNIT_COMPLETION_DATE,
               MS.OLD_NEW_SCHEDULE_DATE,
               MS.OLD_QTY_COMPLETED,
               MS.OLD_NEW_ORDER_QUANTITY,
               MS.OLD_FIRM_QUANTITY,
               MS.OLD_FIRM_DATE,
               MS.PLANNING_PARTNER_SITE_ID,
               MS.PLANNING_TP_TYPE,
               MS.OWNING_PARTNER_SITE_ID,
               MS.OWNING_TP_TYPE,
               MS.VMI_FLAG,
               MS.EARLIEST_START_DATE,
               MS.EARLIEST_COMPLETION_DATE,
               MS.MIN_START_DATE,
               MS.SCHEDULED_DEMAND_ID,
               MS.EXPLOSION_DATE,
               MS.SCO_SUPPLY_DATE,
               MS.RECORD_SOURCE,
               MS.SUPPLY_IS_SHARED,
               MS.ULPSD,
               MS.ULPCD,
               MS.UEPSD,
               MS.UEPCD,
               MS.EACD,
               MS.ORIGINAL_NEED_BY_DATE,
               MS.ORIGINAL_QUANTITY,
               MS.ACCEPTANCE_REQUIRED_FLAG,
               MS.PROMISED_DATE,
               MS.WIP_START_QUANTITY,
               MS.END_ORDER_NUMBER,
               MS.END_ORDER_LINE_NUMBER,
               MS.ORDER_LINE_NUMBER,
               MS.QUANTITY_PER_ASSEMBLY,
               MS.QUANTITY_ISSUED,
               MS.UNBUCKETED_DEMAND_DATE,
               MS.SHIPMENT_ID,
               MS.JOB_OP_SEQ_NUM,
               MS.JUMP_OP_SEQ_NUM,
               MS.SHIP_CALENDAR,
               MS.RECEIVING_CALENDAR,
               MS.INTRANSIT_CALENDAR,
               MS.INTRANSIT_LEAD_TIME,
               MS.OLD_SHIP_DATE,
               MS.IMPLEMENT_SHIP_DATE,
               MS.ORIG_SHIP_METHOD,
               MS.ORIG_INTRANSIT_LEAD_TIME,
               MS.PARENT_ID,
               MS.DAYS_LATE,
               MS.SCHEDULE_PRIORITY,
               MS.PO_LINE_LOCATION_ID,
               MS.PO_DISTRIBUTION_ID,
               MS.WSM_FAULTY_NETWORK,
               MS.IMPLEMENT_DEST_ORG_ID,
               MS.IMPLEMENT_DEST_INST_ID,
               MS.REQUESTED_START_DATE,
               MS.REQUESTED_COMPLETION_DATE,
               MS.ASSET_SERIAL_NUMBER,
               MS.ASSET_ITEM_ID,
               MS.TOP_TRANSACTION_ID,
               MS.UNBUCKETED_NEW_SCHED_DATE,
               MS.IMPLEMENT_SHIP_METHOD,
               MS.ACTUAL_START_DATE,
               MS.FIRM_SHIP_DATE,
               MS.SCHEDULE_ORIGINATION_TYPE,
               MS.UNBUCKETED_START_DATE,
               MS.SR_CUSTOMER_ACCT_ID,
               MS.ITEM_TYPE_ID,
               MS.CUSTOMER_PRODUCT_ID,
               MS.RO_STATUS_CODE,
               MS.SR_REPAIR_GROUP_ID,
               MS.SR_REPAIR_TYPE_ID,
               MS.ITEM_TYPE_VALUE,
               MS.ZONE_ID,
               MS.RO_CREATION_DATE,
               MS.REPAIR_LEAD_TIME,
               MS.FIRM_START_DATE,
               MS.REQ_LINE_ID,
               MS.INTRANSIT_OWNING_ORG_ID,
               MS.RELEASABLE,
               MS.BATCH_ID,
               MS.OTM_ARRIVAL_DATE,
               MS.PS_SUPPLY_FLAG,
               MS.CTB_FLAG,
               MS.CTB_COMP_AVAIL_PERCENT,
               MS.RTB_ORDER_QTY_PERCENT,
               MS.CTB_EXPECTED_DATE,
               MS.POTENTIAL_RTB_PERCENT,
               MS.CTB_PRIORITY,
               MS.DESCRIPTION,
               MS.MAINTENANCE_OBJECT_SOURCE,
               MS.ORIG_FIRM_DATE,
               MS.ORIG_FIRM_QUANTITY,
               MS.PRODUCTION_SCHEDULE_ID,
               MS.VISIT_ID,
               MS.PRODUCES_TO_STOCK,
               MS.PRODUCT_CLASSIFICATION,
               MS.MAINTENANCE_REQT,
               MS.ACTIVITY_TYPE,
               MS.ACTIVITY_NAME,
               MS.CLASS_CODE,
               MS.SHUTDOWN_TYPE,
               MS.TO_BE_EXPLODED,
               MS.OBJECT_TYPE,
               MS.MAINTENANCE_TYPE_CODE,
               MS.ACTIVITY_ITEM_ID,
               MS.USE_WO_SUBSTITUTE,
               MS.ASSET_NUMBER,
               MS.MAINTENANCE_OBJECT_ID,
               MS.MAINTENANCE_OBJECT_TYPE,
               MS.OPERATING_FLEET,
               MS.MAINTENANCE_REQUIREMENT,
               MS.COLL_ORDER_TYPE,
               MS.NEW_ORDER_QUANTITY,
               NULL,
               NULL,
               'N',--Added by V1.029
               MS.ORGANIZATION_ID --Added by V1.029
          FROM MSC_SUPPLIES MS, CUX.CUX_MSC_ORG_RANGE CMO
         WHERE MS.PLAN_ID = -1
           AND MS.ORGANIZATION_ID = CMO.ORGANIZATION_ID
           AND MS.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***ERROR*** 得到收集的MSC SUPPLIES ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
    
    --Added by V1.029
    --跨组织的采购件需要把ORGANIZATION_ID更新为其来源组织ID
   UPDATE CUX.CUX_MSC_SUPPLIES_SJ_T CMS
      SET CMS.ORGANIZATION_ID       =
          (SELECT CMI1.ORGANIZATION_ID
             FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI1
            WHERE CMI1.INVENTORY_ITEM_ID = CMS.INVENTORY_ITEM_ID
              AND CMI1.SOURCE_ORGANIZATION_ID = CMS.ORGANIZATION_ID),
          CMS.UPDATE_ORG_FLAG        = 'Y'
    WHERE CMS.SR_INSTANCE_ID = 1
      AND CMS.PLAN_ID = -1
      AND EXISTS (SELECT 1
             FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI
            WHERE CMI.INVENTORY_ITEM_ID = CMS.INVENTORY_ITEM_ID
              AND CMI.SOURCE_ORGANIZATION_ID = CMS.ORGANIZATION_ID);
  
    --同步收集的需求数据
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MD', '得到收集的MSC DEMANDS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_DEMANDS_SJ_T
        SELECT MD.*
          FROM MSC.MSC_DEMANDS MD, CUX.CUX_MSC_ORG_RANGE CMO
         WHERE MD.PLAN_ID = -1
           AND MD.ORGANIZATION_ID = CMO.ORGANIZATION_ID
           AND MD.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_PLAN_MD',
            '***ERROR*** 得到收集的MSC DEMANDS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    --同步计划的DEMAND SUPPLIES PEGGING
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MD', '得到计划的MSC DEMANDS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_T
        SELECT MD.*,
               MSI.LOW_LEVEL_CODE,
               MSI.MINIMUM_ORDER_QUANTITY   MOQ_QTY,
               MSI.FIXED_LOT_MULTIPLIER     FLM_QTY,
               MSI.ROUNDING_CONTROL_TYPE,
               MSI.PREPROCESSING_LEAD_TIME  ITEM_PREPROCE_LEAD_TIME, --预加工
               MSI.POSTPROCESSING_LEAD_TIME ITEM_POST_LEAD_TIME, --后加工
               MSI.FULL_LEAD_TIME           ITEM_FULL_LEAD_TIME, --加工中
               MSI.FIXED_LEAD_TIME          ITEM_FIXED_LEAD_TIME, --固定
               MSI.VARIABLE_LEAD_TIME       ITEM_VARIA_LEAD_TIME, --变量
               MP.PEGGING_ID,
               MP.END_ORIGINATION_TYPE,
               MP.PREV_PEGGING_ID,
               MP.END_PEGGING_ID,
               MP.ALLOCATED_QUANTITY,
               MP.TRANSACTION_ID,
               MP.SUPPLY_DATE,
               MSI.ATTRIBUTE1,
               MSI.ITEM_NAME,
               MSI.PLANNING_MAKE_BUY_CODE， MP.END_ITEM_USAGE
          FROM MSC.MSC_DEMANDS MD, MSC_SYSTEM_ITEMS MSI, MSC_FULL_PEGGING MP
         WHERE MD.plan_id = P_PLAN_ID
           AND MD.SR_INSTANCE_ID = P_SR_INSTANCE_ID
           AND MSI.PLAN_ID = P_PLAN_ID
           AND MSI.SR_INSTANCE_ID = MD.SR_INSTANCE_ID
           AND MSI.ORGANIZATION_ID = MD.ORGANIZATION_ID
           AND MSI.INVENTORY_ITEM_ID = MD.INVENTORY_ITEM_ID
           AND MD.PLAN_ID = MP.PLAN_ID
           AND MD.SR_INSTANCE_ID = MP.SR_INSTANCE_ID
           AND MD.DEMAND_ID = MP.DEMAND_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_PLAN_MD',
            '***ERROR*** 得到计划的MSC DEMANDS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    /*LOG(LN_REQUEST_ID, 'INSERT_PLAN_MD', '**************开始更新BILL_ID ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    UPDATE CUX.CUX_MSC_DEMANDS_PLAN_T CMD
    SET    CMD.BILL_ID = GET_BILL_ID(P_PLAN_ID ,p_SR_INSTANCE_ID ,CMD.COMP_SEQ_ID )
    WHERE  CMD.PLAN_ID = P_PLAN_ID
      AND  cMD.SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MD', '**************完成更新更新BILL_ID ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));*/
  
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MS', '得到计划的MSC SUPPLIES ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_T
        SELECT MS.ROWID, MS.*
          FROM MSC.MSC_SUPPLIES MS
         WHERE plan_id = P_PLAN_ID
           AND SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_PLAN_MS',
            '***ERROR*** 得到计划的MSC SUPPLIES ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    LOG(LN_REQUEST_ID, 'INSERT_PLAN_MFP', '得到计划的MSC PEGGINGS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_T
        SELECT *
          FROM MSC.MSC_FULL_PEGGING
         WHERE plan_id = P_PLAN_ID
           AND SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_PLAN_MFP',
            '***ERROR*** 得到计划的MSC PEGGINGS ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') || ' 出现错误: ' ||
            dbms_utility.format_error_backtrace() || CHR(10) || SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    INSERT INTO cux.cux_msc_component_substitutes
      select MCS.plan_id,
             MCS.organization_id,
             MCS.SUBSTITUTE_ITEM_ID,
             DECODE(MCS.ATTRIBUTE1, '2', 'Y', 'Y', 'Y', 'N') ZR_SUB_FLAG,
             MCS.component_sequence_id,
             MCS.bill_sequence_id,
             MCS.sr_instance_id,
             MCS.usage_quantity
        from msc.msc_component_substitutes MCS, CUX.CUX_MSC_ORG_RANGE CMO
       where MCS.plan_id = -1
         AND MCS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
         and MCS.organization_id = CMO.ORGANIZATION_ID;
  
    /*Commented by V1.026
    LOG(LN_REQUEST_ID, 'INSERT_GATHER_TABLE', '分析客制表 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_DEMANDS_SJ_T', CASCADE => TRUE);
    
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_SUPPLIES_SJ_T', CASCADE => TRUE);
    
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_DEMANDS_PLAN_T', CASCADE => TRUE);
    
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_SUPPLIES_PLAN_T', CASCADE => TRUE);
    
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_FULL_PEGGING_PLAN_T', CASCADE => TRUE);
    
      fnd_stats.gather_table_stats('CUX', 'CUX_MSC_COMPONENT_SUBSTITUTES', CASCADE => TRUE);      
    
    EXCEPTION
      WHEN OTHERS THEN
        LOG(LN_REQUEST_ID,
            'INSERT_GATHER_TABLE',
            '***ERROR*** 分析客制表 ' || dbms_utility.format_error_backtrace() || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
        RAISE LE_EXIST_EXCEPTION;
    END;*/
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_WIP_MPS_DEMAND',
                'INSERT入收集的MPS物料的工作单和非标准工作单：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --0.  MPS物料的工作单和非标准工作单处理
    LOG(LN_REQUEST_ID,
        'INSERT_WIP_MPS_DEMAND',
        'INSERT入收集的MPS物料的工作单和非标准工作单 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    INSERT_WIP_MPS_DEMAND(P_SR_INSTANCE_ID, P_PLAN_ID);
  
    LOG_PROCESS(LN_REQUEST_ID,
                'PROCESS_SA',
                '处理非料表错阶组合制造件部分：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --1.  非料表错阶组合制造件处理
    LOG(LN_REQUEST_ID, 'PROCESS_SA', '处理非料表错阶组合制造件部分 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    FOR I IN LN_MIN_LEVEL .. 999 LOOP
      CALCULATE_SA_PROCESS(p_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                           P_PLAN_ID        => P_PLAN_ID,
                           P_LEVEL_CODE     => I,
                           PO_ERROR_CODE    => LV_ERROR_CODE);
      IF LV_ERROR_CODE = 2 THEN
        RAISE LE_EXIST_EXCEPTION;
      END IF;
    END LOOP;
  
    --系统正式上线，请屏蔽此处下面。此为分析性能过程中使用。
    IF NVL(FND_PROFILE.VALUE('CUX_ASCP_PROCESS_TABLE'), 'N') = 'Y' THEN
      /*DELETE CUX.CUX_MSC_SUPPLIES_PLAN_TT
      WHERE  PLAN_ID = P_PLAN_ID
        AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID;
      
      DELETE CUX.CUX_MSC_DEMANDS_PLAN_TT
      WHERE  PLAN_ID = P_PLAN_ID
        AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID;
        
      DELETE CUX.CUX_MSC_FULL_PEGGING_PLAN_TT
      WHERE  PLAN_ID = P_PLAN_ID
        AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID; 
        
      DELETE CUX.CUX_ASCP_CHANGE_PEG_TEMP_TT  
      WHERE  P_PLAN_ID = P_PLAN_ID
      AND    REQUEST_ID = fnd_global.CONC_REQUEST_ID;    */
    
      /*INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_TT
        SELECT * FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
    
      INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TT
        SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
    
      INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_TT
        SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;*/
      COMMIT;
    END IF;
    --系统正式上线，请屏蔽此处上面。此为分析性能过程中使用。
    LOG_PROCESS(LN_REQUEST_ID, 'PROCESS_PCBA', '处理PCBA部分：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --2 处理PCBA部分
    LOG(LN_REQUEST_ID, 'PROCESS_PCBA', '处理PCBA部分 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    FOR I IN LN_MIN_LEVEL .. 999 LOOP
      --LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID , 'PCBA_COUNT', 'PCBA LEVEL CODE：'||I);
      CALCULATE_PCBA_PROCESS(p_SR_INSTANCE_ID => p_SR_INSTANCE_ID,
                             P_PLAN_ID        => P_PLAN_ID,
                             P_LEVEL_CODE     => I,
                             PO_ERROR_CODE    => LV_ERROR_CODE);
      IF LV_ERROR_CODE = 2 THEN
        RAISE LE_EXIST_EXCEPTION;
      END IF;
    END LOOP;
    LOG_PROCESS(FND_GLOBAL.CONC_REQUEST_ID,
                'PCBA_COUNT',
                'PCBA结束时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    /*INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;    */
  
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_NO_SA_PCBA',
                '错阶部分的SA，错阶，组合，采购件按照时间先后依次处理：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --3 处理错阶部分的SA，错阶，组合，采购件
    LOG(LN_REQUEST_ID,
        'INSERT_NO_SA_PCBA',
        '错阶部分的SA，错阶，组合，采购件按照时间先后依次处理 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    PROCESS_NO_SA_PCBA(P_SR_INSTANCE_ID => p_SR_INSTANCE_ID, P_PLAN_ID => P_PLAN_ID, PO_ERROR_CODE => LV_ERROR_CODE);
    IF LV_ERROR_CODE = 2 THEN
      RAISE LE_EXIST_EXCEPTION;
    END IF;
    /*INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;*/
  
    LOG_PROCESS(LN_REQUEST_ID,
                'PROCESS_BUY_PL',
                '处理采购件部分订单修正因子：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --4 计算采购件的PLAND ORDER订单修正因子处理
    LOG(LN_REQUEST_ID, 'PROCESS_BUY_PL', '处理采购件部分订单修正因子 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    PROCESS_PLAN_ORDER_SUPPLIY(PO_ERROR_CODE    => LV_ERROR_CODE,
                               P_PLAN_ID        => P_PLAN_ID,
                               P_SR_INSTANCE_ID => P_SR_INSTANCE_ID);
    IF LV_ERROR_CODE = 2 THEN
      RAISE LE_EXIST_EXCEPTION;
    END IF;
  
    LOG_PROCESS(LN_REQUEST_ID, 'PROCESS_ACCESS', '处理过剩部分：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --5 过剩部分
    LOG(LN_REQUEST_ID, 'PROCESS_ACCESS', '处理过剩部分 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    PROCESS_SUPPLIY_ACCESS(PO_ERROR_CODE    => LV_ERROR_CODE,
                           P_PLAN_ID        => P_PLAN_ID,
                           P_SR_INSTANCE_ID => P_SR_INSTANCE_ID);
    IF LV_ERROR_CODE = 2 THEN
      RAISE LE_EXIST_EXCEPTION;
    END IF;
  
    /*--删除原计划内容
    INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
    
    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_TT
      SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;*/
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'DELETE_SOURCE_MD',
        '删除原始计划单DEMAND 062 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'DELETE_SOURCE_MD',
                '删除原始计划单DEMAND：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE FROM MSC_DEMANDS MD
       WHERE MD.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MD.PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'DELETE_SOURCE_MD',
            '***ERROR*** 删除原始计划单DEMAND 056 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
    END;
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'DELETE_SOURCE_MS',
        '删除原始计划单SUPPLIES 063 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'DELETE_SOURCE_MS',
                '删除原始计划单SUPPLIES：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE FROM MSC_SUPPLIES MS
       WHERE MS.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MS.PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'DELETE_SOURCE_MS',
            '***ERROR*** 删除原始计划单SUPPLIES 057 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
    END;
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'DELETE_SOURCE_MFP',
        '删除原始计划单PEGGINS 064 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'DELETE_SOURCE_MFP',
                '删除原始计划单PEGGINS：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      DELETE FROM MSC_FULL_PEGGING MFP
       WHERE MFP.SR_INSTANCE_ID = p_SR_INSTANCE_ID
         AND MFP.PLAN_ID = P_PLAN_ID;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'DELETE_SOURCE_MFP',
            '***ERROR*** 删除原始计划单PEGGINS 058 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
    END;
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'INSERT_RESULT_MS',
        'INSERT计算后的计划单SUPPLIES 065 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_RESULT_MS',
                'INSERT计算后的计划单SUPPLIES：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    --INSERT替代计算后的结果
    ----Added by V1.025 保存最后结果
    --IF NVL(FND_PROFILE.VALUE('CUX_ASCP_PROCESS_TABLE'),'N') = 'Y' THEN
    /*DELETE CUX.CUX_MSC_SUPPLIES_PLAN_TTT
    WHERE  PLAN_ID = P_PLAN_ID
      AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID;
    
    DELETE CUX.CUX_MSC_DEMANDS_PLAN_TTT
    WHERE  PLAN_ID = P_PLAN_ID
      AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID;
      
    DELETE CUX.CUX_MSC_FULL_PEGGING_PLAN_TTT
    WHERE  PLAN_ID = P_PLAN_ID
      AND  SR_INSTANCE_ID = P_SR_INSTANCE_ID; */
  
    /*INSERT INTO CUX.CUX_MSC_SUPPLIES_PLAN_TTT
      SELECT * FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
  
    INSERT INTO CUX.CUX_MSC_DEMANDS_PLAN_TTT
      SELECT * FROM CUX.CUX_MSC_DEMANDS_PLAN_T;
  
    INSERT INTO CUX.CUX_MSC_FULL_PEGGING_PLAN_TTT
      SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;*/
    COMMIT;
    -- END IF;
    --Added end
  
    BEGIN
      INSERT INTO MSC_SUPPLIES
        (PLAN_ID,
         TRANSACTION_ID,
         ORGANIZATION_ID,
         SR_INSTANCE_ID,
         INVENTORY_ITEM_ID,
         SCHEDULE_DESIGNATOR_ID,
         REVISION,
         UNIT_NUMBER,
         NEW_SCHEDULE_DATE,
         OLD_SCHEDULE_DATE,
         NEW_WIP_START_DATE,
         OLD_WIP_START_DATE,
         FIRST_UNIT_COMPLETION_DATE,
         LAST_UNIT_COMPLETION_DATE,
         FIRST_UNIT_START_DATE,
         LAST_UNIT_START_DATE,
         DISPOSITION_ID,
         DISPOSITION_STATUS_TYPE,
         ORDER_TYPE,
         SUPPLIER_ID,
         SUPPLIER_SITE_ID,
         NEW_ORDER_QUANTITY,
         OLD_ORDER_QUANTITY,
         NEW_ORDER_PLACEMENT_DATE,
         OLD_ORDER_PLACEMENT_DATE,
         RESCHEDULE_DAYS,
         RESCHEDULE_FLAG,
         SCHEDULE_COMPRESS_DAYS,
         NEW_PROCESSING_DAYS,
         PURCH_LINE_NUM,
         QUANTITY_IN_PROCESS,
         IMPLEMENTED_QUANTITY,
         FIRM_PLANNED_TYPE,
         FIRM_QUANTITY,
         FIRM_DATE,
         IMPLEMENT_DEMAND_CLASS,
         IMPLEMENT_DATE,
         IMPLEMENT_QUANTITY,
         IMPLEMENT_FIRM,
         IMPLEMENT_WIP_CLASS_CODE,
         IMPLEMENT_JOB_NAME,
         IMPLEMENT_DOCK_DATE,
         IMPLEMENT_STATUS_CODE,
         IMPLEMENT_EMPLOYEE_ID,
         IMPLEMENT_UOM_CODE,
         IMPLEMENT_LOCATION_ID,
         IMPLEMENT_SOURCE_ORG_ID,
         IMPLEMENT_SR_INSTANCE_ID,
         IMPLEMENT_SUPPLIER_ID,
         IMPLEMENT_SUPPLIER_SITE_ID,
         IMPLEMENT_AS,
         RELEASE_STATUS,
         LOAD_TYPE,
         PROCESS_SEQ_ID,
         SCO_SUPPLY_FLAG,
         ALTERNATE_BOM_DESIGNATOR,
         ALTERNATE_ROUTING_DESIGNATOR,
         OPERATION_SEQ_NUM,
         BY_PRODUCT_USING_ASSY_ID,
         SOURCE_ORGANIZATION_ID,
         SOURCE_SR_INSTANCE_ID,
         SOURCE_SUPPLIER_SITE_ID,
         SOURCE_SUPPLIER_ID,
         SHIP_METHOD,
         WEIGHT_CAPACITY_USED,
         VOLUME_CAPACITY_USED,
         NEW_SHIP_DATE,
         NEW_DOCK_DATE,
         OLD_DOCK_DATE,
         LINE_ID,
         PROJECT_ID,
         TASK_ID,
         PLANNING_GROUP,
         IMPLEMENT_PROJECT_ID,
         IMPLEMENT_TASK_ID,
         IMPLEMENT_SCHEDULE_GROUP_ID,
         IMPLEMENT_BUILD_SEQUENCE,
         IMPLEMENT_ALTERNATE_BOM,
         IMPLEMENT_ALTERNATE_ROUTING,
         IMPLEMENT_UNIT_NUMBER,
         IMPLEMENT_LINE_ID,
         RELEASE_ERRORS,
         NUMBER1,
         SOURCE_ITEM_ID,
         ORDER_NUMBER,
         SCHEDULE_GROUP_ID,
         BUILD_SEQUENCE,
         WIP_ENTITY_NAME,
         IMPLEMENT_PROCESSING_DAYS,
         DELIVERY_PRICE,
         LATE_SUPPLY_DATE,
         LATE_SUPPLY_QTY,
         LOT_NUMBER,
         SUBINVENTORY_CODE,
         QTY_SCRAPPED,
         EXPECTED_SCRAP_QTY,
         QTY_COMPLETED,
         DAILY_RATE,
         SCHEDULE_GROUP_NAME,
         UPDATED,
         SUBST_ITEM_FLAG,
         STATUS,
         APPLIED,
         EXPIRATION_QUANTITY,
         EXPIRATION_DATE,
         NON_NETTABLE_QTY,
         IMPLEMENT_WIP_START_DATE,
         REFRESH_NUMBER,
         LAST_UPDATE_DATE,
         LAST_UPDATED_BY,
         CREATION_DATE,
         CREATED_BY,
         LAST_UPDATE_LOGIN,
         REQUEST_ID,
         PROGRAM_APPLICATION_ID,
         PROGRAM_ID,
         PROGRAM_UPDATE_DATE,
         IMPLEMENT_DAILY_RATE,
         NEED_BY_DATE,
         SOURCE_SUPPLY_ID,
         SR_MTL_SUPPLY_ID,
         WIP_STATUS_CODE,
         DEMAND_CLASS,
         FROM_ORGANIZATION_ID,
         WIP_SUPPLY_TYPE,
         PO_LINE_ID,
         LOAD_FACTOR_RATE,
         ROUTING_SEQUENCE_ID,
         BILL_SEQUENCE_ID,
         COPRODUCTS_SUPPLY,
         CFM_ROUTING_FLAG,
         CUSTOMER_ID,
         SHIP_TO_SITE_ID,
         OLD_NEED_BY_DATE,
         OLD_DAILY_RATE,
         OLD_FIRST_UNIT_START_DATE,
         OLD_LAST_UNIT_COMPLETION_DATE,
         OLD_NEW_SCHEDULE_DATE,
         OLD_QTY_COMPLETED,
         OLD_NEW_ORDER_QUANTITY,
         OLD_FIRM_QUANTITY,
         OLD_FIRM_DATE,
         PLANNING_PARTNER_SITE_ID,
         PLANNING_TP_TYPE,
         OWNING_PARTNER_SITE_ID,
         OWNING_TP_TYPE,
         VMI_FLAG,
         EARLIEST_START_DATE,
         EARLIEST_COMPLETION_DATE,
         MIN_START_DATE,
         SCHEDULED_DEMAND_ID,
         EXPLOSION_DATE,
         SCO_SUPPLY_DATE,
         RECORD_SOURCE,
         SUPPLY_IS_SHARED,
         ULPSD,
         ULPCD,
         UEPSD,
         UEPCD,
         EACD,
         ORIGINAL_NEED_BY_DATE,
         ORIGINAL_QUANTITY,
         ACCEPTANCE_REQUIRED_FLAG,
         PROMISED_DATE,
         WIP_START_QUANTITY,
         END_ORDER_NUMBER,
         END_ORDER_LINE_NUMBER,
         ORDER_LINE_NUMBER,
         QUANTITY_PER_ASSEMBLY,
         QUANTITY_ISSUED,
         UNBUCKETED_DEMAND_DATE,
         SHIPMENT_ID,
         JOB_OP_SEQ_NUM,
         JUMP_OP_SEQ_NUM,
         SHIP_CALENDAR,
         RECEIVING_CALENDAR,
         INTRANSIT_CALENDAR,
         INTRANSIT_LEAD_TIME,
         OLD_SHIP_DATE,
         IMPLEMENT_SHIP_DATE,
         ORIG_SHIP_METHOD,
         ORIG_INTRANSIT_LEAD_TIME,
         PARENT_ID,
         DAYS_LATE,
         SCHEDULE_PRIORITY,
         PO_LINE_LOCATION_ID,
         PO_DISTRIBUTION_ID,
         WSM_FAULTY_NETWORK,
         IMPLEMENT_DEST_ORG_ID,
         IMPLEMENT_DEST_INST_ID,
         REQUESTED_START_DATE,
         REQUESTED_COMPLETION_DATE,
         ASSET_SERIAL_NUMBER,
         ASSET_ITEM_ID,
         TOP_TRANSACTION_ID,
         UNBUCKETED_NEW_SCHED_DATE,
         IMPLEMENT_SHIP_METHOD,
         ACTUAL_START_DATE,
         FIRM_SHIP_DATE,
         SCHEDULE_ORIGINATION_TYPE,
         UNBUCKETED_START_DATE,
         SR_CUSTOMER_ACCT_ID,
         ITEM_TYPE_ID,
         CUSTOMER_PRODUCT_ID,
         RO_STATUS_CODE,
         SR_REPAIR_GROUP_ID,
         SR_REPAIR_TYPE_ID,
         ITEM_TYPE_VALUE,
         ZONE_ID,
         RO_CREATION_DATE,
         REPAIR_LEAD_TIME,
         FIRM_START_DATE,
         REQ_LINE_ID,
         INTRANSIT_OWNING_ORG_ID,
         RELEASABLE,
         BATCH_ID,
         OTM_ARRIVAL_DATE,
         PS_SUPPLY_FLAG,
         CTB_FLAG,
         CTB_COMP_AVAIL_PERCENT,
         RTB_ORDER_QTY_PERCENT,
         CTB_EXPECTED_DATE,
         POTENTIAL_RTB_PERCENT,
         CTB_PRIORITY,
         DESCRIPTION,
         MAINTENANCE_OBJECT_SOURCE,
         ORIG_FIRM_DATE,
         
         ORIG_FIRM_QUANTITY,
         PRODUCTION_SCHEDULE_ID,
         VISIT_ID,
         PRODUCES_TO_STOCK,
         PRODUCT_CLASSIFICATION,
         MAINTENANCE_REQT,
         ACTIVITY_TYPE,
         ACTIVITY_NAME,
         CLASS_CODE,
         SHUTDOWN_TYPE,
         TO_BE_EXPLODED,
         OBJECT_TYPE,
         MAINTENANCE_TYPE_CODE,
         ACTIVITY_ITEM_ID,
         USE_WO_SUBSTITUTE,
         ASSET_NUMBER,
         MAINTENANCE_OBJECT_ID,
         MAINTENANCE_OBJECT_TYPE,
         OPERATING_FLEET,
         MAINTENANCE_REQUIREMENT,
         COLL_ORDER_TYPE)
        SELECT DISTINCT PLAN_ID,
                        TRANSACTION_ID,
                        ORGANIZATION_ID,
                        SR_INSTANCE_ID,
                        INVENTORY_ITEM_ID,
                        SCHEDULE_DESIGNATOR_ID,
                        REVISION,
                        UNIT_NUMBER,
                        NEW_SCHEDULE_DATE,
                        OLD_SCHEDULE_DATE,
                        NEW_WIP_START_DATE,
                        OLD_WIP_START_DATE,
                        FIRST_UNIT_COMPLETION_DATE,
                        LAST_UNIT_COMPLETION_DATE,
                        FIRST_UNIT_START_DATE,
                        LAST_UNIT_START_DATE,
                        DISPOSITION_ID,
                        DISPOSITION_STATUS_TYPE,
                        ORDER_TYPE,
                        SUPPLIER_ID,
                        SUPPLIER_SITE_ID,
                        NEW_ORDER_QUANTITY,
                        OLD_ORDER_QUANTITY,
                        NEW_ORDER_PLACEMENT_DATE,
                        OLD_ORDER_PLACEMENT_DATE,
                        RESCHEDULE_DAYS,
                        RESCHEDULE_FLAG,
                        SCHEDULE_COMPRESS_DAYS,
                        NEW_PROCESSING_DAYS,
                        PURCH_LINE_NUM,
                        QUANTITY_IN_PROCESS,
                        IMPLEMENTED_QUANTITY,
                        FIRM_PLANNED_TYPE,
                        FIRM_QUANTITY,
                        FIRM_DATE,
                        IMPLEMENT_DEMAND_CLASS,
                        IMPLEMENT_DATE,
                        IMPLEMENT_QUANTITY,
                        IMPLEMENT_FIRM,
                        IMPLEMENT_WIP_CLASS_CODE,
                        IMPLEMENT_JOB_NAME,
                        IMPLEMENT_DOCK_DATE,
                        IMPLEMENT_STATUS_CODE,
                        IMPLEMENT_EMPLOYEE_ID,
                        IMPLEMENT_UOM_CODE,
                        IMPLEMENT_LOCATION_ID,
                        IMPLEMENT_SOURCE_ORG_ID,
                        IMPLEMENT_SR_INSTANCE_ID,
                        IMPLEMENT_SUPPLIER_ID,
                        IMPLEMENT_SUPPLIER_SITE_ID,
                        IMPLEMENT_AS,
                        RELEASE_STATUS,
                        LOAD_TYPE,
                        PROCESS_SEQ_ID,
                        SCO_SUPPLY_FLAG,
                        ALTERNATE_BOM_DESIGNATOR,
                        ALTERNATE_ROUTING_DESIGNATOR,
                        OPERATION_SEQ_NUM,
                        BY_PRODUCT_USING_ASSY_ID,
                        SOURCE_ORGANIZATION_ID,
                        SOURCE_SR_INSTANCE_ID,
                        SOURCE_SUPPLIER_SITE_ID,
                        SOURCE_SUPPLIER_ID,
                        SHIP_METHOD,
                        WEIGHT_CAPACITY_USED,
                        VOLUME_CAPACITY_USED,
                        NEW_SHIP_DATE,
                        NEW_DOCK_DATE,
                        OLD_DOCK_DATE,
                        LINE_ID,
                        PROJECT_ID,
                        TASK_ID,
                        PLANNING_GROUP,
                        IMPLEMENT_PROJECT_ID,
                        IMPLEMENT_TASK_ID,
                        IMPLEMENT_SCHEDULE_GROUP_ID,
                        IMPLEMENT_BUILD_SEQUENCE,
                        IMPLEMENT_ALTERNATE_BOM,
                        IMPLEMENT_ALTERNATE_ROUTING,
                        IMPLEMENT_UNIT_NUMBER,
                        IMPLEMENT_LINE_ID,
                        RELEASE_ERRORS,
                        NUMBER1,
                        SOURCE_ITEM_ID,
                        ORDER_NUMBER,
                        SCHEDULE_GROUP_ID,
                        BUILD_SEQUENCE,
                        WIP_ENTITY_NAME,
                        IMPLEMENT_PROCESSING_DAYS,
                        DELIVERY_PRICE,
                        LATE_SUPPLY_DATE,
                        LATE_SUPPLY_QTY,
                        LOT_NUMBER,
                        SUBINVENTORY_CODE,
                        QTY_SCRAPPED,
                        EXPECTED_SCRAP_QTY,
                        QTY_COMPLETED,
                        DAILY_RATE,
                        SCHEDULE_GROUP_NAME,
                        UPDATED,
                        SUBST_ITEM_FLAG,
                        STATUS,
                        APPLIED,
                        EXPIRATION_QUANTITY,
                        EXPIRATION_DATE,
                        NON_NETTABLE_QTY,
                        IMPLEMENT_WIP_START_DATE,
                        REFRESH_NUMBER,
                        LAST_UPDATE_DATE,
                        LAST_UPDATED_BY,
                        CREATION_DATE,
                        CREATED_BY,
                        LAST_UPDATE_LOGIN,
                        REQUEST_ID,
                        PROGRAM_APPLICATION_ID,
                        PROGRAM_ID,
                        PROGRAM_UPDATE_DATE,
                        IMPLEMENT_DAILY_RATE,
                        NEED_BY_DATE,
                        SOURCE_SUPPLY_ID,
                        SR_MTL_SUPPLY_ID,
                        WIP_STATUS_CODE,
                        DEMAND_CLASS,
                        FROM_ORGANIZATION_ID,
                        WIP_SUPPLY_TYPE,
                        PO_LINE_ID,
                        LOAD_FACTOR_RATE,
                        ROUTING_SEQUENCE_ID,
                        BILL_SEQUENCE_ID,
                        COPRODUCTS_SUPPLY,
                        CFM_ROUTING_FLAG,
                        CUSTOMER_ID,
                        SHIP_TO_SITE_ID,
                        OLD_NEED_BY_DATE,
                        OLD_DAILY_RATE,
                        OLD_FIRST_UNIT_START_DATE,
                        OLD_LAST_UNIT_COMPLETION_DATE,
                        OLD_NEW_SCHEDULE_DATE,
                        OLD_QTY_COMPLETED,
                        OLD_NEW_ORDER_QUANTITY,
                        OLD_FIRM_QUANTITY,
                        OLD_FIRM_DATE,
                        PLANNING_PARTNER_SITE_ID,
                        PLANNING_TP_TYPE,
                        OWNING_PARTNER_SITE_ID,
                        OWNING_TP_TYPE,
                        VMI_FLAG,
                        EARLIEST_START_DATE,
                        EARLIEST_COMPLETION_DATE,
                        MIN_START_DATE,
                        SCHEDULED_DEMAND_ID,
                        EXPLOSION_DATE,
                        SCO_SUPPLY_DATE,
                        RECORD_SOURCE,
                        SUPPLY_IS_SHARED,
                        ULPSD,
                        ULPCD,
                        UEPSD,
                        UEPCD,
                        EACD,
                        ORIGINAL_NEED_BY_DATE,
                        ORIGINAL_QUANTITY,
                        ACCEPTANCE_REQUIRED_FLAG,
                        PROMISED_DATE,
                        WIP_START_QUANTITY,
                        END_ORDER_NUMBER,
                        END_ORDER_LINE_NUMBER,
                        ORDER_LINE_NUMBER,
                        QUANTITY_PER_ASSEMBLY,
                        QUANTITY_ISSUED,
                        UNBUCKETED_DEMAND_DATE,
                        SHIPMENT_ID,
                        JOB_OP_SEQ_NUM,
                        JUMP_OP_SEQ_NUM,
                        SHIP_CALENDAR,
                        RECEIVING_CALENDAR,
                        INTRANSIT_CALENDAR,
                        INTRANSIT_LEAD_TIME,
                        OLD_SHIP_DATE,
                        IMPLEMENT_SHIP_DATE,
                        ORIG_SHIP_METHOD,
                        ORIG_INTRANSIT_LEAD_TIME,
                        PARENT_ID,
                        DAYS_LATE,
                        SCHEDULE_PRIORITY,
                        PO_LINE_LOCATION_ID,
                        PO_DISTRIBUTION_ID,
                        WSM_FAULTY_NETWORK,
                        IMPLEMENT_DEST_ORG_ID,
                        IMPLEMENT_DEST_INST_ID,
                        REQUESTED_START_DATE,
                        REQUESTED_COMPLETION_DATE,
                        ASSET_SERIAL_NUMBER,
                        ASSET_ITEM_ID,
                        TOP_TRANSACTION_ID,
                        UNBUCKETED_NEW_SCHED_DATE,
                        IMPLEMENT_SHIP_METHOD,
                        ACTUAL_START_DATE,
                        FIRM_SHIP_DATE,
                        SCHEDULE_ORIGINATION_TYPE,
                        UNBUCKETED_START_DATE,
                        SR_CUSTOMER_ACCT_ID,
                        ITEM_TYPE_ID,
                        CUSTOMER_PRODUCT_ID,
                        RO_STATUS_CODE,
                        SR_REPAIR_GROUP_ID,
                        SR_REPAIR_TYPE_ID,
                        ITEM_TYPE_VALUE,
                        ZONE_ID,
                        RO_CREATION_DATE,
                        REPAIR_LEAD_TIME,
                        FIRM_START_DATE,
                        REQ_LINE_ID,
                        INTRANSIT_OWNING_ORG_ID,
                        RELEASABLE,
                        BATCH_ID,
                        OTM_ARRIVAL_DATE,
                        PS_SUPPLY_FLAG,
                        CTB_FLAG,
                        CTB_COMP_AVAIL_PERCENT,
                        RTB_ORDER_QTY_PERCENT,
                        CTB_EXPECTED_DATE,
                        POTENTIAL_RTB_PERCENT,
                        CTB_PRIORITY,
                        DESCRIPTION,
                        MAINTENANCE_OBJECT_SOURCE,
                        ORIG_FIRM_DATE,
                        ORIG_FIRM_QUANTITY,
                        PRODUCTION_SCHEDULE_ID,
                        VISIT_ID,
                        PRODUCES_TO_STOCK,
                        PRODUCT_CLASSIFICATION,
                        MAINTENANCE_REQT,
                        ACTIVITY_TYPE,
                        ACTIVITY_NAME,
                        CLASS_CODE,
                        SHUTDOWN_TYPE,
                        TO_BE_EXPLODED,
                        OBJECT_TYPE,
                        MAINTENANCE_TYPE_CODE,
                        ACTIVITY_ITEM_ID,
                        USE_WO_SUBSTITUTE,
                        ASSET_NUMBER,
                        MAINTENANCE_OBJECT_ID,
                        MAINTENANCE_OBJECT_TYPE,
                        OPERATING_FLEET,
                        MAINTENANCE_REQUIREMENT,
                        COLL_ORDER_TYPE
          FROM CUX.CUX_MSC_SUPPLIES_PLAN_T;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_RESULT_MS',
            '***ERROR*** INSERT计算后的计划单SUPPLIES 059 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'INSERT_RESULT_MFP',
        'INSERT计算后的计划单PEGGINS 066 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_RESULT_MFP',
                'INSERT计算后的计划单PEGGINS：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO MSC_FULL_PEGGING
        SELECT * FROM CUX.CUX_MSC_FULL_PEGGING_PLAN_T;
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_RESULT_MFP',
            '***ERROR*** INSERT计算后的计划单PEGGINS 060 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    LOG(FND_GLOBAL.CONC_REQUEST_ID,
        'INSERT_RESULT_MD',
        'INSERT计算后的计划单DEMANDS 067 ' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_RESULT_MD',
                'INSERT计算后的计划单DEMANDS：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    BEGIN
      INSERT INTO MSC_DEMANDS
        (ORDER_PRIORITY,
         FORECAST_MAD,
         DEMAND_ID,
         SCHEDULE_DESIGNATOR_ID,
         USING_REQUIREMENT_QUANTITY,
         ASSEMBLY_DEMAND_COMP_DATE,
         USING_ASSEMBLY_DEMAND_DATE,
         DEMAND_TYPE,
         ORIGINATION_TYPE,
         DEMAND_PRIORITY,
         SALES_ORDER_PRIORITY,
         FORECAST_PRIORITY,
         PLANNING_GROUP,
         DAILY_DEMAND_RATE,
         UNIT_NUMBER,
         DISPOSITION_ID,
         USING_ASSEMBLY_ITEM_ID,
         PLAN_ID,
         ORGANIZATION_ID,
         INVENTORY_ITEM_ID,
         PROJECT_ID,
         TASK_ID,
         CUSTOMER_ID,
         CUSTOMER_SITE_ID,
         SR_INSTANCE_ID,
         SHIP_TO_SITE_ID,
         PROMISE_DATE,
         SELLING_PRICE,
         DMD_LATENESS_COST,
         DMD_SATISFIED_DATE,
         OP_SEQ_NUM,
         UPDATED,
         STATUS,
         APPLIED,
         DEMAND_CLASS,
         FIRM_QUANTITY,
         FIRM_DATE,
         OLD_DEMAND_QUANTITY,
         OLD_DEMAND_DATE,
         SOURCE_ORGANIZATION_ID,
         RESERVATION_ID,
         PARENT_ID,
         LENDING_PROJECT_ID,
         LENDING_TASK_ID,
         SUBST_ITEM_FLAG,
         ORDER_NUMBER,
         RESERVED_QUANTITY,
         LAST_UPDATE_DATE,
         LAST_UPDATED_BY,
         CREATION_DATE,
         CREATED_BY,
         LAST_UPDATE_LOGIN,
         REQUEST_ID,
         PROGRAM_APPLICATION_ID,
         PROGRAM_ID,
         PROGRAM_UPDATE_DATE,
         WIP_ENTITY_ID,
         ISSUED_QUANTITY,
         REPETITIVE_SCHEDULE_ID,
         REFRESH_NUMBER,
         REQUEST_DATE,
         WIP_STATUS_CODE,
         WIP_SUPPLY_TYPE,
         SOURCE_ORG_INSTANCE_ID,
         SALES_ORDER_LINE_ID,
         CONFIDENCE_PERCENTAGE,
         BUCKET_TYPE,
         BILL_ID,
         PROBABILITY,
         FORECAST_SET_ID,
         GROUP_ID,
         SERVICE_LEVEL,
         QUANTITY_BY_DUE_DATE,
         TARGET_SAFETY_STOCK,
         SCENARIO_SET,
         DEMAND_SOURCE_TYPE,
         SUPPLY_ID,
         ORIGINAL_SYSTEM_REFERENCE,
         ORIGINAL_SYSTEM_LINE_REFERENCE,
         STOLEN_FLAG,
         OLD_USING_REQUIREMENT_QUANTITY,
         OLD_USING_ASSEMBLY_DEMAND_DATE,
         OLD_ASSEMBLY_DEMAND_COMP_DATE,
         CUMMULATIVE_PROBABILITY,
         ORIGINAL_ITEM_ID,
         UNMET_QUANTITY,
         RECORD_SOURCE,
         LINK_TO_LINE_ID,
         ERROR_TYPE,
         ATP_SYNCHRONIZATION_FLAG,
         COMP_SEQ_ID,
         QUANTITY_PER_ASSEMBLY,
         RELEASE_STATUS,
         RESCHEDULE_FLAG,
         LOAD_TYPE,
         IMPLEMENT_ORG_ID,
         IMPLEMENT_INSTANCE_ID,
         IMPLEMENT_DATE,
         RELEASE_ERRORS,
         ORG_FIRM_FLAG,
         ORIGINAL_ORG_ID,
         ORIGINAL_INST_ID,
         ARRIVAL_SET_ID,
         SHIP_SET_ID,
         ORDER_DATE_TYPE_CODE,
         SCHEDULE_ARRIVAL_DATE,
         LATEST_ACCEPTABLE_DATE,
         SHIPPING_METHOD_CODE,
         PLANNED_ARRIVAL_DATE,
         REQUEST_SHIP_DATE,
         PROMISE_SHIP_DATE,
         SCHEDULE_SHIP_DATE,
         ORIGINAL_DEMAND_ID,
         ZONE_ID,
         ORIG_SHIPPING_METHOD_CODE,
         INTRANSIT_LEAD_TIME,
         ORIG_INTRANSIT_LEAD_TIME,
         ATP_OVERRIDE_FLAG,
         IMPLEMENT_FIRM,
         IMPLEMENT_EARLIEST_DATE,
         IMPLEMENT_ARRIVAL_DATE,
         UNBUCKETED_DEMAND_DATE,
         ATO_LINE_ID,
         TOP_MODEL_LINE_ID,
         PARENT_MODEL_LINE_ID,
         STD_MANDATORY_COMP_FLAG,
         OLD_REFRESH_NUMBER,
         SHIP_METHOD,
         SHIP_CALENDAR,
         RECEIVING_CALENDAR,
         INTRANSIT_CALENDAR,
         SHIP_TO_LOCATION_ID,
         ORIGINAL_QUANTITY,
         FINAL_USE_PRIORITY,
         FINAL_USE_DATE,
         ARRIVAL_SET_NAME,
         SHIP_SET_NAME,
         SOURCE_PHANTOM_ID,
         PRIMARY_COMPONENT_ID,
         ATP_SESSION_ID,
         IMPLEMENT_SHIP_DATE,
         PLANNED_SHIP_DATE,
         PRIOR_ALLOCATION_QTY,
         MANUAL_ALLOCATION_QTY,
         MANUAL_ALLOCATION_DATE,
         FIRM_ALLOCATION_FLAG,
         ASSET_SERIAL_NUMBER,
         ASSET_ITEM_ID,
         EXPIRATION_DATE,
         SALES_ORDER_LINE_SPLIT,
         PLANNED_INBOUND_DUE_DATE,
         FILL_KILL_FLAG,
         DEFINITION_LEVEL_USED,
         DEMAND_FULFILLMENT_LEAD_TIME,
         COMPONENT_SCALING_TYPE,
         COMPONENT_YIELD_FACTOR,
         SPLIT_FROM_DEMAND_ID,
         PREV_SUBST_ITEM,
         PREV_SUBST_ORG,
         ITEM_TYPE_ID,
         ITEM_TYPE_VALUE,
         REPAIR_LINE_ID,
         OTM_ARRIVAL_DATE,
         WIP_ENTITY_NAME,
         MIN_REM_SHELF_LIFE_DAYS,
         REVISED_DMD_DATE,
         REVISED_DMD_PRIORITY,
         TOP_MODEL_ITEM_ID,
         PARENT_MODEL_ITEM_ID,
         DAYS_LATE,
         ORIG_FIRM_DATE,
         ORIG_FIRM_QUANTITY,
         OBJECT_TYPE,
         MAINTENANCE_OBJECT_SOURCE)
        SELECT ORDER_PRIORITY,
               FORECAST_MAD,
               DEMAND_ID,
               SCHEDULE_DESIGNATOR_ID,
               USING_REQUIREMENT_QUANTITY,
               ASSEMBLY_DEMAND_COMP_DATE,
               USING_ASSEMBLY_DEMAND_DATE,
               DEMAND_TYPE,
               ORIGINATION_TYPE,
               DEMAND_PRIORITY,
               SALES_ORDER_PRIORITY,
               FORECAST_PRIORITY,
               PLANNING_GROUP,
               DAILY_DEMAND_RATE,
               UNIT_NUMBER,
               DISPOSITION_ID,
               USING_ASSEMBLY_ITEM_ID,
               PLAN_ID,
               ORGANIZATION_ID,
               INVENTORY_ITEM_ID,
               PROJECT_ID,
               TASK_ID,
               CUSTOMER_ID,
               CUSTOMER_SITE_ID,
               SR_INSTANCE_ID,
               SHIP_TO_SITE_ID,
               PROMISE_DATE,
               SELLING_PRICE,
               DMD_LATENESS_COST,
               DMD_SATISFIED_DATE,
               OP_SEQ_NUM,
               UPDATED,
               STATUS,
               APPLIED,
               DEMAND_CLASS,
               FIRM_QUANTITY,
               FIRM_DATE,
               OLD_DEMAND_QUANTITY,
               OLD_DEMAND_DATE,
               SOURCE_ORGANIZATION_ID,
               RESERVATION_ID,
               PARENT_ID,
               LENDING_PROJECT_ID,
               LENDING_TASK_ID,
               SUBST_ITEM_FLAG,
               ORDER_NUMBER,
               RESERVED_QUANTITY,
               LAST_UPDATE_DATE,
               LAST_UPDATED_BY,
               CREATION_DATE,
               CREATED_BY,
               LAST_UPDATE_LOGIN,
               REQUEST_ID,
               PROGRAM_APPLICATION_ID,
               PROGRAM_ID,
               PROGRAM_UPDATE_DATE,
               WIP_ENTITY_ID,
               ISSUED_QUANTITY,
               REPETITIVE_SCHEDULE_ID,
               REFRESH_NUMBER,
               REQUEST_DATE,
               WIP_STATUS_CODE,
               WIP_SUPPLY_TYPE,
               SOURCE_ORG_INSTANCE_ID,
               SALES_ORDER_LINE_ID,
               CONFIDENCE_PERCENTAGE,
               BUCKET_TYPE,
               BILL_ID,
               PROBABILITY,
               FORECAST_SET_ID,
               GROUP_ID,
               SERVICE_LEVEL,
               QUANTITY_BY_DUE_DATE,
               TARGET_SAFETY_STOCK,
               SCENARIO_SET,
               DEMAND_SOURCE_TYPE,
               SUPPLY_ID,
               ORIGINAL_SYSTEM_REFERENCE,
               ORIGINAL_SYSTEM_LINE_REFERENCE,
               STOLEN_FLAG,
               OLD_USING_REQUIREMENT_QUANTITY,
               OLD_USING_ASSEMBLY_DEMAND_DATE,
               OLD_ASSEMBLY_DEMAND_COMP_DATE,
               CUMMULATIVE_PROBABILITY,
               ORIGINAL_ITEM_ID,
               UNMET_QUANTITY,
               RECORD_SOURCE,
               LINK_TO_LINE_ID,
               ERROR_TYPE,
               ATP_SYNCHRONIZATION_FLAG,
               COMP_SEQ_ID,
               QUANTITY_PER_ASSEMBLY,
               RELEASE_STATUS,
               RESCHEDULE_FLAG,
               LOAD_TYPE,
               IMPLEMENT_ORG_ID,
               IMPLEMENT_INSTANCE_ID,
               IMPLEMENT_DATE,
               RELEASE_ERRORS,
               ORG_FIRM_FLAG,
               ORIGINAL_ORG_ID,
               ORIGINAL_INST_ID,
               ARRIVAL_SET_ID,
               SHIP_SET_ID,
               ORDER_DATE_TYPE_CODE,
               SCHEDULE_ARRIVAL_DATE,
               LATEST_ACCEPTABLE_DATE,
               SHIPPING_METHOD_CODE,
               PLANNED_ARRIVAL_DATE,
               REQUEST_SHIP_DATE,
               PROMISE_SHIP_DATE,
               SCHEDULE_SHIP_DATE,
               ORIGINAL_DEMAND_ID,
               ZONE_ID,
               ORIG_SHIPPING_METHOD_CODE,
               INTRANSIT_LEAD_TIME,
               ORIG_INTRANSIT_LEAD_TIME,
               ATP_OVERRIDE_FLAG,
               IMPLEMENT_FIRM,
               IMPLEMENT_EARLIEST_DATE,
               IMPLEMENT_ARRIVAL_DATE,
               UNBUCKETED_DEMAND_DATE,
               ATO_LINE_ID,
               TOP_MODEL_LINE_ID,
               PARENT_MODEL_LINE_ID,
               STD_MANDATORY_COMP_FLAG,
               OLD_REFRESH_NUMBER,
               SHIP_METHOD,
               SHIP_CALENDAR,
               RECEIVING_CALENDAR,
               INTRANSIT_CALENDAR,
               SHIP_TO_LOCATION_ID,
               ORIGINAL_QUANTITY,
               FINAL_USE_PRIORITY,
               FINAL_USE_DATE,
               ARRIVAL_SET_NAME,
               SHIP_SET_NAME,
               SOURCE_PHANTOM_ID,
               PRIMARY_COMPONENT_ID,
               ATP_SESSION_ID,
               IMPLEMENT_SHIP_DATE,
               PLANNED_SHIP_DATE,
               PRIOR_ALLOCATION_QTY,
               MANUAL_ALLOCATION_QTY,
               MANUAL_ALLOCATION_DATE,
               FIRM_ALLOCATION_FLAG,
               ASSET_SERIAL_NUMBER,
               ASSET_ITEM_ID,
               EXPIRATION_DATE,
               SALES_ORDER_LINE_SPLIT,
               PLANNED_INBOUND_DUE_DATE,
               FILL_KILL_FLAG,
               DEFINITION_LEVEL_USED,
               DEMAND_FULFILLMENT_LEAD_TIME,
               COMPONENT_SCALING_TYPE,
               COMPONENT_YIELD_FACTOR,
               SPLIT_FROM_DEMAND_ID,
               PREV_SUBST_ITEM,
               PREV_SUBST_ORG,
               ITEM_TYPE_ID,
               ITEM_TYPE_VALUE,
               REPAIR_LINE_ID,
               OTM_ARRIVAL_DATE,
               WIP_ENTITY_NAME,
               MIN_REM_SHELF_LIFE_DAYS,
               REVISED_DMD_DATE,
               REVISED_DMD_PRIORITY,
               TOP_MODEL_ITEM_ID,
               PARENT_MODEL_ITEM_ID,
               DAYS_LATE,
               ORIG_FIRM_DATE,
               ORIG_FIRM_QUANTITY,
               OBJECT_TYPE,
               MAINTENANCE_OBJECT_SOURCE
          FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD1
         WHERE NVL(CMD1.PEGGING_ID, -999) = (SELECT MIN(NVL(CMD2.PEGGING_ID, -999))
                                               FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD2
                                              WHERE CMD1.PLAN_ID = CMD2.PLAN_ID
                                                AND CMD1.SR_INSTANCE_ID = CMD2.SR_INSTANCE_ID
                                                AND CMD1.DEMAND_ID = CMD2.DEMAND_ID);
    
      /*WHERE CMD1.ROWID = (SELECT MIN(CMD2.ROWID)
       FROM CUX.CUX_MSC_DEMANDS_PLAN_T CMD2
      WHERE CMD1.PLAN_ID = CMD2.PLAN_ID
        AND CMD1.SR_INSTANCE_ID = CMD2.SR_INSTANCE_ID
        AND CMD1.DEMAND_ID = CMD2.DEMAND_ID);*/
    EXCEPTION
      WHEN OTHERS THEN
        LOG(FND_GLOBAL.CONC_REQUEST_ID,
            'INSERT_RESULT_MD',
            '***ERROR*** INSERT计算后的计划单DEMANDS 061 ' || ' 出现错误: ' || dbms_utility.format_error_backtrace() || CHR(10) ||
            SQLERRM);
        RAISE LE_EXIST_EXCEPTION;
    END;
  
    LOG_PROCESS(LN_REQUEST_ID,
                'INSERT_PLAN_PROCESS',
                '记录计划执行加强程序时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));
    
    --Added below by V1.029
    --开始更新跨组织采购件组织
    --更新跨组织采购件非计划单部分
    UPDATE MSC_FULL_PEGGING MFP
       SET MFP.ORGANIZATION_ID =
           (SELECT CMS.NEW_TRANSACTION_ID
              FROM CUX.CUX_MSC_SUPPLIES_SJ_T CMS
             WHERE CMS.PLAN_ID = MFP.PLAN_ID
               AND CMS.SR_INSTANCE_ID = MFP.SR_INSTANCE_ID
               AND CMS.UPDATE_ORG_FLAG = 'Y'
               AND SIGN(CMS.NEW_TRANSACTION_ID) = 1)
     WHERE MFP.PLAN_ID = P_PLAN_ID
       AND MFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID
       AND MFP.TRANSACTION_ID IN (SELECT CMS.NEW_TRANSACTION_ID
                                   FROM CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                  WHERE CMS.PLAN_ID = MFP.PLAN_ID
                                    AND CMS.SR_INSTANCE_ID = MFP.SR_INSTANCE_ID
                                    AND CMS.UPDATE_ORG_FLAG = 'Y'
                                    AND SIGN(CMS.NEW_TRANSACTION_ID) = 1);
    
    UPDATE MSC_SUPPLIES MS
       SET MS.ORGANIZATION_ID =
           (SELECT CMS.NEW_TRANSACTION_ID
              FROM CUX.CUX_MSC_SUPPLIES_SJ_T CMS
             WHERE CMS.PLAN_ID = MS.PLAN_ID
               AND CMS.SR_INSTANCE_ID = MS.SR_INSTANCE_ID
               AND CMS.UPDATE_ORG_FLAG = 'Y'
               AND SIGN(CMS.NEW_TRANSACTION_ID) = 1)
     WHERE MS.PLAN_ID = P_PLAN_ID
       AND MS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
       AND MS.TRANSACTION_ID IN (SELECT CMS.NEW_TRANSACTION_ID
                                   FROM CUX.CUX_MSC_SUPPLIES_SJ_T CMS
                                  WHERE CMS.PLAN_ID = MS.PLAN_ID
                                    AND CMS.SR_INSTANCE_ID = MS.SR_INSTANCE_ID
                                    AND CMS.UPDATE_ORG_FLAG = 'Y'
                                    AND SIGN(CMS.NEW_TRANSACTION_ID) = 1);
    --更新跨组织采购件计划单部分
    UPDATE MSC_FULL_PEGGING MFP
       SET MFP.ORGANIZATION_ID =
           (SELECT CMI.SOURCE_ORGANIZATION_ID
              FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI
             WHERE MFP.INVENTORY_ITEM_ID = CMI.INVENTORY_ITEM_ID
               AND MFP.ORGANIZATION_ID = CMI.ORGANIZATION_ID)
     WHERE MFP.PLAN_ID = P_PLAN_ID
       AND MFP.SR_INSTANCE_ID = P_SR_INSTANCE_ID
       AND MFP.SUPPLY_TYPE = 5
       AND EXISTS (SELECT 1
              FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI
             WHERE MFP.INVENTORY_ITEM_ID = CMI.INVENTORY_ITEM_ID
               AND MFP.ORGANIZATION_ID = CMI.ORGANIZATION_ID);
    
    UPDATE MSC_SUPPLIES MS
       SET MS.ORGANIZATION_ID =
           (SELECT CMI.SOURCE_ORGANIZATION_ID
              FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI
             WHERE MS.INVENTORY_ITEM_ID = CMI.INVENTORY_ITEM_ID
               AND MS.ORGANIZATION_ID = CMI.ORGANIZATION_ID)
     WHERE MS.PLAN_ID = P_PLAN_ID
       AND MS.SR_INSTANCE_ID = P_SR_INSTANCE_ID
       AND MS.ORDER_TYPE = 5
       AND EXISTS (SELECT 1
              FROM CUX.CUX_MSC_ITEM_TRAN_ORG CMI
             WHERE MS.INVENTORY_ITEM_ID = CMI.INVENTORY_ITEM_ID
               AND MS.ORGANIZATION_ID = CMI.ORGANIZATION_ID);
    --Added above by V1.029                                
    LOG_PROCESS(LN_REQUEST_ID,
                'UPDTE_BUY_ORG',
                '更新跨组织采购件组织完成时间：' || TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'));            
    IF LN_EXIST_COUNT > 0 THEN
      UPDATE CUX.CUX_MSC_COMPILE_DESIGNATORS
         SET REQUEST_ID        = LN_REQUEST_ID,
             LAST_UPDATE_DATE  = SYSDATE,
             LAST_UPDATED_BY   = FND_GLOBAL.USER_ID,
             LAST_UPDATE_LOGIN = FND_GLOBAL.LOGIN_ID
       WHERE PLAN_ID = P_PLAN_ID;
    ELSE
      INSERT INTO CUX.CUX_MSC_COMPILE_DESIGNATORS
        (REQUEST_ID, PLAN_ID, LAST_UPDATE_DATE, LAST_UPDATED_BY, LAST_UPDATE_LOGIN, CREATION_DATE, CREATED_BY)
      VALUES
        (LN_REQUEST_ID, P_PLAN_ID, SYSDATE, FND_GLOBAL.USER_ID, FND_GLOBAL.LOGIN_ID, SYSDATE, FND_GLOBAL.USER_ID);
    
    END IF;
  
  EXCEPTION
    WHEN LE_EXIST_EXCEPTION THEN
      rollback;
      retcode := 2;
    WHEN LE_LEVEL_EXCEPTION THEN
      rollback;
      retcode := 2;
      errbuf  := '***ERROR*** 查找LOW LEVEL CODE异常！';
      LOG(LN_REQUEST_ID, 'VALIDATE MIN LEVEL', '***ERROR*** 查找LOW LEVEL CODE异常！');
    WHEN LE_INSERT_TMP_EXCEPTION THEN
      rollback;
      retcode := GV_ERROR_COCE;
      errbuf  := GV_ERROR_MESSAGE;
    WHEN LE_BOM_ERR_CODE THEN
      rollback;
      retcode := 2;
      errbuf  := '***ERROR*** 同步BOM DFF至相关计划异常！';
      LOG(LN_REQUEST_ID, 'VALIDATE COPY DFF', '***ERROR*** 同步BOM DFF至相关计划异常！');
    WHEN OTHERS THEN
      rollback;
      retcode := 2;
      errbuf  := SQLERRM;
    
  END MAIN;

END CUX_MSC_SUBSTITUTE_RECALS_EY;
/
